{"componentChunkName":"component---src-templates-post-template-js","path":"/react-native/usereducer-with-usecontext","webpackCompilationHash":"73c4a47e2c163fc9d239","result":{"data":{"markdownRemark":{"id":"91d5b8ad-b1b6-52a6-883d-d742f10698a7","html":"<p><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux</a> has a <code class=\"language-text\">Provider</code>, which allows you to access the <strong>redux store</strong> from all the components. Similar to that, <code class=\"language-text\">useContext</code> allows you to create a <code class=\"language-text\">Context Provider</code> in order for you to have an access to <strong>context</strong> from all the components.</p>\n<p>Here I am going to create <code class=\"language-text\">UserInfoContext</code>, which has information about a user’s name and age. And also implement a <code class=\"language-text\">reducer</code> to change user information.</p>\n<p>First, you have to <code class=\"language-text\">createContext</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// UserInfoContext.tsx\n\nimport React, {createContext} from &#39;react&#39;;\n\ntype ActionProps = {\n  type: string,\n  payload: {\n    age: number\n  }\n}\n\nconst UserInfoContext = createContext({\n  userInfo: {\n    username: &#39;Jason Kang&#39;,\n    age: 20,\n  },\n  changeUserInfo: (action: ActionProps) =&gt; {}\n});\n\nexport default UserInfoContext;</code></pre></div>\n<p>Now you create a <code class=\"language-text\">reducer</code> to change user information</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// UserInfoReducer.tsx\ntype ActionProps = {\n  type: string,\n  payload: {\n    name: string\n    age: number\n  }\n}\n\ntype IUserInfo = {\n  username: string,\n  age: number\n}\n\nconst userInfoReducer = (state: IUserInfo, action: ActionProps) =&gt; {\n  switch(action.type) {\n    case &#39;CHANGE_USERINFO&#39;:\n      const {username} = action.payload;\n      return {\n        ...state,\n        username\n      }\n\n    case &#39;CHANGE_AGE&#39;:\n      const {age} = action.payload;\n      return {\n        ...state,\n        age\n      }\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}</code></pre></div>\n<p>And then you import this context in your <code class=\"language-text\">App.tsx</code> to create a <strong>context provider</strong>. And you also need to <code class=\"language-text\">useReducer</code> and pass it to all the components using the provider so that you can change userinfo in every single component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// App.tsx\n\nimport React, {useReducer} from &#39;react&#39;;\nimport ComponentA from &#39;~/ComponentA&#39;;\nimport ComponentB from &#39;~/ComponentB&#39;;\nimport ComponentC from &#39;~/ComponentC&#39;;\nimport UserInfoContext from &#39;~contexts/UserInfoContext&#39;;\nimport UserInfoReducer from &#39;~reducers/UserInfoReducer&#39;;\n\ntype IUserInfo = {\n  username: string,\n  age: number\n}\n\nconst App = () =&gt; {\n  const initialUserInfo: IUserInfo = {\n    username: &#39;Jason Kang&#39;,\n    age: 20\n  }\n\n  const [state, dispatch] = useReducer(UserInfoReducer, initialUserInfo)\n\n  const userInfoValue = {\n    initialUserInfo,\n    changeUserInfo: (type: string, payload: IUserInfo) =&gt; {\n      dispatch({type, payload})\n    }\n  }\n\n  return (\n    &lt;UserInfoContext.Provider value={userInfoValue}&gt;\n      &lt;ComponentA /&gt;\n      &lt;ComponentB /&gt;\n      &lt;ComponentC /&gt;\n    &lt;/UserInfoContext.Provider&gt;\n  );\n};\n\nexport default App;</code></pre></div>\n<p>Now you can <code class=\"language-text\">useContext</code> in all the components to change user information</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ComponentA.tsx\n\nimport React, {FunctionComponent, useContext} from &#39;react&#39;\nimport {TouchableOpacity, Text} from &#39;react-native\n\nimport UserInfoContext from &#39;~contexts/UserInfoContext&#39;;\n\n\ntype ComponentAProps = {}\n\nconst ComponentA: FunctionComponent&lt;ComponentAProps&gt; = props =&gt; {\n  const userInfoContext = useContext(UserInfoContext)\n\n  const changeName = (): void =&gt; {\n    userInfoContext.changeUserInfo({\n      type: &#39;CHANGE_NAME&#39;,\n      payload: {\n        name: &#39;James Kang&#39;\n      }\n    })\n  }\n\n  const changeAge = (): void =&gt; {\n    userInfoContext.changeUserInfo({\n      type: &#39;CHANGE_AGE&#39;,\n      payload: {\n        name: 30\n      }\n    })\n  }\n\n  return (\n    &lt;TouchableOpacity onPress={changeName}&gt;\n      &lt;Text&gt;Change Name&lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n\n    &lt;TouchableOpacity onPress={changeAge}&gt;\n      &lt;Text&gt;Change Age&lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n  )\n}</code></pre></div>\n<p>Now you can change username and age in every single component</p>","fields":{"slug":"/react-native/usereducer-with-usecontext","tagSlugs":["/tag/reactnative/","/tag/reacthooks/","/tag/typescript/","/tag/wecode/","/tag/위코드/"]},"frontmatter":{"date":"2020-06-15T10:53:37.121Z","description":"How to use useReducer with useContext","tags":["reactnative","reacthooks","typescript","wecode","위코드"],"title":"React Native - useReducer with useContext + TypeScript"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-native/usereducer-with-usecontext"}}}