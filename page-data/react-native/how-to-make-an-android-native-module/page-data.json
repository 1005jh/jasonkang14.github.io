{"componentChunkName":"component---src-templates-post-template-js","path":"/react-native/how-to-make-an-android-native-module","webpackCompilationHash":"48bd45191fec93802d5f","result":{"data":{"markdownRemark":{"id":"67655e30-21d8-5a0d-a956-3d89cca24f1d","html":"<h3 id=\"this-is-following-an-example-from-the-official-document-with-some-of-my-personal-input\"><a href=\"#this-is-following-an-example-from-the-official-document-with-some-of-my-personal-input\" aria-label=\"this is following an example from the official document with some of my personal input permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>This is following an example from the <a href=\"https://reactnative.dev/docs/native-modules-android\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official document</a> with some of my personal input</h3>\n<p>Before creating a native module for a react-native project, you have to understand how react-native works for an Android app. A general tree is defined in <code class=\"language-text\">AndroidManifest.xml</code> like I have posted. And how the app actually works or how it is composed is declared in <code class=\"language-text\">MainApplication.java</code></p>\n<p>There are two default <code class=\"language-text\">java</code> files in a react-native project. One is <code class=\"language-text\">MainApplication.java</code>, which I am going to use in order to add a native module, and the ohter is <code class=\"language-text\">MainActivity.java</code>, which you rarely deal with throughout your project. The only thing declared in <code class=\"language-text\">MainActivity.java</code> is the name of your project like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package com.your-app-name;\n\nimport com.facebook.react.ReactActivity;\n\npublic class MainActivity extends ReactActivity {\n\n  /**\n   * Returns the name of the main component registered from JavaScript. This is used to schedule\n   * rendering of the component.\n   */\n  @Override\n  protected String getMainComponentName() {\n    return &quot;your-app-name&quot;;\n  }\n}</code></pre></div>\n<p>And everything else is declared in <code class=\"language-text\">MainApplication.java</code>. When you create a native module of your own, you have to pay attention to this section right here;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    @Override\n    protected List&lt;ReactPackage&gt; getPackages() {\n        @SuppressWarnings(&quot;UnnecessaryLocalVariable&quot;)\n        List&lt;ReactPackage&gt; packages = new PackageList(this).getPackages();\n\n        // packages.add(new MyReactNativePackage());  // &lt;-- this is where you are going to add your module\n        return packages;\n    }</code></pre></div>\n<p>Technically, you are not adding a module to <code class=\"language-text\">MainApplication.java</code>. You are adding a <code class=\"language-text\">package</code> which includes a <code class=\"language-text\">module</code> to <code class=\"language-text\">MainApplication.java</code>.</p>\n<p>First, you create your module like this. The below example is directly from the <a href=\"https://reactnative.dev/docs/native-modules-android\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official website</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ToastModule.java\n\npackage com.your-app-name;\n\nimport android.widget.Toast;\n\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\n\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class ToastModule extends ReactContextBaseJavaModule {\n// a native module is a Java class that extends ReactContextBaseJavaModule\n\n  private static ReactApplicationContext reactContext;\n\n  private static final String DURATION_SHORT_KEY = &quot;SHORT&quot;;\n  private static final String DURATION_LONG_KEY = &quot;LONG&quot;;\n\n  ToastModule(ReactApplicationContext context) {\n    super(context);\n    reactContext = context;\n  }\n\n  @Override\n  public String getName() { // a ReactContextBaseJavaModule requires this method to be implemented\n    return &quot;ToastExample&quot;; // this string represents the name of the NativeModule that you are creating\n  }                        // therefore, you can access this module through React.NativeModules.ToastExample\n\n  @Override\n  public Map&lt;String, Object&gt; getConstants() {     // this is optional\n    final Map&lt;String, Object&gt; constants = new HashMap&lt;&gt;();\n    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);\n    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);\n    return constants;\n  }\n\n  @ReactMethod   // this decorator allows you to access this Java method with JavaScript. You will see what I mean later\n  public void show(String message, int duration) {\n    Toast.makeText(getReactApplicationContext(), message, duration).show();\n  }\n}</code></pre></div>\n<p>Now you have to create a <code class=\"language-text\">package</code> to register your <code class=\"language-text\">module</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// CustomToastPackage.java\n\npackage com.your-app-name;\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CustomToastPackage implements ReactPackage {\n\n  @Override\n  public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) {\n    return Collections.emptyList();\n  }\n\n  @Override\n  public List&lt;NativeModule&gt; createNativeModules(\n                              ReactApplicationContext reactContext) {\n    List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();\n\n    modules.add(new ToastModule(reactContext));  // Your module is added right here\n\n    return modules;\n  }\n\n}</code></pre></div>\n<p>Now you add the <code class=\"language-text\">package</code> to <code class=\"language-text\">MainApplication.java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\nimport com.your-app-name.CustomToastPackage; // &lt;-- Add this line with your package name.\n...\n\nprotected List&lt;ReactPackage&gt; getPackages() {\n  @SuppressWarnings(&quot;UnnecessaryLocalVariable&quot;)\n  List&lt;ReactPackage&gt; packages = new PackageList(this).getPackages();\n\n  packages.add(new CustomToastPackage()); // &lt;-- Add this line with your package name.\n  return packages;\n}</code></pre></div>\n<p>Now you create a JavaScript file to wrap the native module you have just created, which is <code class=\"language-text\">React.NativeModule.ToastExample</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//ToastExample.js\n\nimport {NativeModules} from &#39;react-native&#39;;\nmodule.exports = NativeModules.ToastExample;</code></pre></div>\n<p>This is not in the official document, but you can also do it like this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import {NativeModules} from &#39;react-native&#39;;\n\nconst {ToastExample} = NativeModules\n\nexport default ToastExample</code></pre></div>\n<p>You can all the <code class=\"language-text\">show</code> method which you have decorated with <code class=\"language-text\">ReactMethod</code> in <code class=\"language-text\">ToastModule.java</code> like this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import ToastExample from &#39;./ToastExample&#39;;\n\nToastExample.show(&#39;Awesome&#39;, ToastExample.SHORT);</code></pre></div>\n<p>This shows a toast with a text <code class=\"language-text\">Awesome</code> when you launch your Android app</p>","fields":{"slug":"/react-native/how-to-make-an-android-native-module","tagSlugs":["/tag/reactnative/","/tag/android/","/tag/native/","/tag/module/","/tag/위코드/","/tag/wecode/"]},"frontmatter":{"date":"2020-03-15T22:53:37.121Z","description":"How to make an Android native module for a React-Native project","tags":["reactnative","android","native","module","위코드","wecode"],"title":"React Native - How to make an Android native module"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-native/how-to-make-an-android-native-module"}}}