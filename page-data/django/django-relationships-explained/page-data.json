{"componentChunkName":"component---src-templates-post-template-js","path":"/django/django-relationships-explained","webpackCompilationHash":"d6cce922851fe0da636d","result":{"data":{"markdownRemark":{"id":"5d1dcf76-732a-5c0c-baa5-2bb8600f5645","html":"<h3 id=\"many-to-one-relationships\"><a href=\"#many-to-one-relationships\" aria-label=\"many to one relationships permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Many-to-One Relationships</h3>\n<p>In order to define a many-to-one relationship, you can use <code class=\"language-text\">django.db.models.ForeignKey</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db import models\n\nclass Manufacturer(models.Model):\n    company = models.CharField(max_length=25)\n\nclass Car(models.Model):\n    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)\n    name         = models.CharField(max_length=25)</code></pre></div>\n<p>You just have to add the name of the model as an argument to the field. Make sure that the model you are referencing in your <code class=\"language-text\">ForienKey</code> field is delcared before. If you are creating a relationship on a model that has not yet been defined, you have to use the name of the model instead of the model object itself like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db import models\n\nclass Car(models.Model):\n    manufacturer = models.ForeignKey(&#39;Manufacturer&#39;, on_delete=models.CASCADE)\n    name         = models.CharField(max_length=25)\n\nclass Manufacturer(models.Model):\n    company = models.CharField(max_length=25)</code></pre></div>\n<p>If you want to create a recursive relationship, which is an object that has a many-to-one relationship with itself, you can use <code class=\"language-text\">models.ForeignKey(&#39;self&#39;, on_delete=models.CASCADE)</code>. An example that I have found is when an employee supervies multiple employees. An employee has a many-to-one relatiponship with multiple employees.</p>\n<h3 id=\"many-to-many-relationships\"><a href=\"#many-to-many-relationships\" aria-label=\"many to many relationships permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Many-to-Many Relationships</h3>\n<p>In order to define a many-to-one relationship, you can use <code class=\"language-text\">ManyToManyField</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db import models\n\nclass Topping(models.Model):\n    name = models.CharField(max_length=25)\n\nclass Pizza(models.Model):\n    toppings = models.ManyToManyField(Topping)\n    name     = models.CharField(max_length=25)</code></pre></div>\n<p>Like you would do with <code class=\"language-text\">ForeignKey</code>, you can create recursive relationships and relationships to models not yet defined.</p>\n<p>Sometimes, you might want to use an extra table in order to describe the relationship between two models by using the <code class=\"language-text\">through</code> argument like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db import models\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n    def __str__(self):\n        return self.name\n\nclass Group(models.Model):\n    name    = models.CharField(max_length=128)\n    members = models.ManyToManyField(Person, through=&#39;Membership&#39;)\n\n    def __str__(self):\n        return self.name\n\nclass Membership(models.Model):\n    person        = models.ForeignKey(Person, on_delete=models.CASCADE)\n    group         = models.ForeignKey(Group, on_delete=models.CASCADE)\n    date_joined   = models.DateField()\n    invite_reason = models.CharField(max_length=64)</code></pre></div>\n<p>The <code class=\"language-text\">Group</code> model has a many-to-many relationship with the <code class=\"language-text\">Person</code> model through a model called <code class=\"language-text\">Membership</code> which has many-to-one relationships with both <code class=\"language-text\">Person</code> and <code class=\"language-text\">Group</code></p>\n<p>You can use <code class=\"language-text\">add()</code>, <code class=\"language-text\">create()</code>, <code class=\"language-text\">set()</code> to create relationships as long as you specify <code class=\"language-text\">through_defulats</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">beatles.members.add(john, through_defaults={&#39;date_joined&#39;: date(1960, 8, 1)})\nbeatles.members.create(name=&quot;George Harrison&quot;, through_defaults={&#39;date_joined&#39;: date(1960, 8, 1)})\nbeatles.members.set([john, paul, ringo, george], through_defaults={&#39;date_joined&#39;: date(1960, 8, 1)})</code></pre></div>\n<p>If you call <code class=\"language-text\">remove()</code>, all intermediate model instances related to the model will be removed. If you call <code class=\"language-text\">clear()</code>, all many-to-many relationships for an instance will be deleted.</p>\n<p>f<code class=\"language-text\">{modelname}_set</code> like <code class=\"language-text\">membership_set</code> can be used in order to mane a query on <code class=\"language-text\">Person</code> model</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ringos_membership = ringo.membership_set.get(group=beatles)\nringos_membership.date_joined   #  datetime.date(1962, 8, 16)</code></pre></div>\n<h3 id=\"one-to-one-relationships\"><a href=\"#one-to-one-relationships\" aria-label=\"one to one relationships permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One-to-One Relationships</h3>\n<p>In order to define a many-to-one relationship, you can use <code class=\"language-text\">OneToOneField</code>. This is very straight-forward. Like you would do with <code class=\"language-text\">ForeignKey</code>, you can create recursive relationships and relationships to models not yet defined. This is somewhat similar to inheritance, which is inheriting a previously declared model like a normal python class.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db import models\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n\n    class Meta:\n        abstract = True\n\nclass Student(CommonInfo):\n    home_group = models.CharField(max_length=5)</code></pre></div>\n<p>In this case, the <code class=\"language-text\">Student</code> model has three fields: <strong>name</strong>, <strong>age</strong>, and <strong>home_group</strong>. And the <code class=\"language-text\">CommonInfo</code> class cannot be used as a normal Django model since it is an abstract base class.</p>","fields":{"slug":"/django/django-relationships-explained","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2020-04-25T12:53:37.121Z","description":"Django models: relationships like Many-to-One, Many-to-Many, and One-to-One explained","tags":["django"],"title":"Django - Relationships Explained"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/django/django-relationships-explained"}}}