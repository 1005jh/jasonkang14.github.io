{"componentChunkName":"component---src-templates-post-template-js","path":"/django/select-related","webpackCompilationHash":"859a56cd4c34593da9cf","result":{"data":{"markdownRemark":{"id":"6b9d55fb-81e5-5606-a865-5e880b93600b","html":"<h3 id=\"tldr\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h3>\n<p><code class=\"language-text\">select_related()</code> allows you to access data without accesing the database multiple times.</p>\n<h3 id=\"explanation\"><a href=\"#explanation\" aria-label=\"explanation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>explanation</h3>\n<p><code class=\"language-text\">select_related()</code> is helpful when there is a <code class=\"language-text\">ForeignKey</code> relationship. Esepecially if there are nested foreignkey relationships between tables, it will save you a lot of time.</p>\n<p>I created models in <code class=\"language-text\">models.py</code> for a testing purpose like this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class State(models.Model):\n    name = models.CharField(max_length=25)\n\nclass City(models.Model):\n    state = models.ForeignKey(State, on_delete=models.CASCADE)\n    name  = models.CharField(max_length=25)\n\nclass Street(models.Model):\n    city = models.ForeignKey(City, on_delete=models.CASCADE)\n    name = models.CharField(max_length=25)</code></pre></div>\n<p>And then created two views. One using <code class=\"language-text\">select_related()</code> and the other not using it</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class SelectRelatedView(View):\n    def get(self, request):\n        print(&quot;select_related&quot;)\n        street = Street.objects.select_related(&#39;city__state&#39;).get(pk=1)\n        print(F&quot;street      == {street} {datetime.datetime.now()}&quot;)\n        c = street.city\n        print(f&quot;street.city == {street.city} {datetime.datetime.now()}&quot;)\n        s = c.state\n        print(f&quot;city.state  == {c.state} {datetime.datetime.now()}&quot;)\n\n        return HttpResponse(status=200)\n\nclass NormalCityView(View):\n    def get(self, request):\n        print(&quot;normal&quot;)\n        street = Street.objects.get(pk=1)\n        print(F&quot;street      == {street} {datetime.datetime.now()}&quot;)\n        c = street.city\n        print(f&quot;street.city == {street.city} {datetime.datetime.now()}&quot;)\n        s = c.state\n        print(f&quot;city.state  == {c.state} {datetime.datetime.now()}&quot;)\n\n        return HttpResponse(status=200)</code></pre></div>\n<p>And here is the time difference</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">select_related\nstreet      == Street object (1) 2020-06-04 15:25:55.039457\nstreet.city == City object (1) 2020-06-04 15:25:55.039495\ncity.state  == State object (1) 2020-06-04 15:25:55.039506\n[04/Jun/2020 15:25:55] &quot;GET /select_related/ HTTP/1.1&quot; 200 0\n\nnormal\nstreet      == Street object (1) 2020-06-04 15:26:04.422837\nstreet.city == City object (1) 2020-06-04 15:26:04.425180\ncity.state  == State object (1) 2020-06-04 15:26:04.429000</code></pre></div>\n<p>You can see that when I used <code class=\"language-text\">select_related()</code>, the time difference between the last print line the the first prine like is 0.00005 second. However, when I did not use <code class=\"language-text\">select_related()</code>, the time difference is 0.006 second. Therefore, if I were to use simple math, <code class=\"language-text\">select_related()</code> is <strong>120</strong> times more efficient.</p>","fields":{"slug":"/django/select-related","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2020-06-04T15:53:37.121Z","description":"Let's try to improve efficiency when you make a query in Django","tags":["django"],"title":"Django - Select Related"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/django/select-related"}}}