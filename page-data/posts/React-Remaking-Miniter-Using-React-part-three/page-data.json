{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/React-Remaking-Miniter-Using-React-part-three","webpackCompilationHash":"d54eea2ef298fe9a8def","result":{"data":{"markdownRemark":{"id":"11831ca8-b780-5ec9-b7a6-ba7519b96795","html":"<p><code class=\"language-text\">state</code> is a way to store and update data or information that a component has. <br>\nAs mentioned in a previous post, a <code class=\"language-text\">component</code> must be defined as a <code class=\"language-text\">class component</code> in order to use <code class=\"language-text\">state</code></p>\n<h1 id=\"1-adding-local-state-to-a-class\"><a href=\"#1-adding-local-state-to-a-class\" aria-label=\"1 adding local state to a class permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Adding Local State to a Class</h1>\n<p>Use a <code class=\"language-text\">class constructor</code> in order to assign initial <code class=\"language-text\">this.state</code> to a component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\n        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;\n      &lt;/div&gt;\n    );\n  }\n}</code></pre></div>\n<p>Class components should always call the base constructor with <code class=\"language-text\">props</code>. by passing <code class=\"language-text\">props</code> to the base constructor, it — but why?</p>\n<h1 id=\"2-adding-lifecycle-methods-to-a-class\"><a href=\"#2-adding-lifecycle-methods-to-a-class\" aria-label=\"2 adding lifecycle methods to a class permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Adding Lifecycle Methods to a Class</h1>\n<p>Using the example of the <code class=\"language-text\">Clock</code> component writeen in section 1, <br>\n<code class=\"language-text\">mounting</code>: set up a timer whenever the <code class=\"language-text\">Clock</code> is rendered to the DOM for the first time <br>\n<code class=\"language-text\">unmounting</code>: clear the timer whenever the DOM produced by the <code class=\"language-text\">Clock</code> is removed</p>\n<p>this is the order of how React inserts components into the DOM: <br></p>\n<ul>\n<li>constructor() -> componentWillMount() -> render() -> componentDidMount()</li>\n</ul>\n<p>Like below, you can do <code class=\"language-text\">mounting</code> and <code class=\"language-text\">unmounting</code> by using <code class=\"language-text\">componentDidMount()</code> and <code class=\"language-text\">componentWillUnmount()</code> respectively.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () =&gt; this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\n        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;\n      &lt;/div&gt;\n    );\n  }\n}</code></pre></div>\n<h4 id=\"compononetwillmount\"><a href=\"#compononetwillmount\" aria-label=\"compononetwillmount permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">compononetWillMount()</code></h4>\n<ul>\n<li>called before the <code class=\"language-text\">render()</code> method</li>\n<li>only called once in a life of a component</li>\n<li>therefore, no access to the DOM</li>\n</ul>\n<h4 id=\"compononetdidmount\"><a href=\"#compononetdidmount\" aria-label=\"compononetdidmount permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">compononetDidMount()</code></h4>\n<ul>\n<li>called after the <code class=\"language-text\">render()</code> method</li>\n<li>use this method if your initialization relies on the DOM (different from <code class=\"language-text\">componentWillMount()</code>)</li>\n<li>able to set the state with <code class=\"language-text\">this.setState()</code>, which will trigger a re-render, therefore, displayed on the browser</li>\n<li><code class=\"language-text\">fetch</code> data from a server</li>\n</ul>\n<h4 id=\"componentwillunmount\"><a href=\"#componentwillunmount\" aria-label=\"componentwillunmount permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">componentWillUnmount()</code></h4>\n<ul>\n<li>called right before React unmounts and destroys components</li>\n<li>can’t set state before unmounting</li>\n<li>remove <code class=\"language-text\">event listeners</code> added in <code class=\"language-text\">componentDidMount()</code></li>\n<li>cancelling active network requests</li>\n<li>cleaning up DOM elements created in <code class=\"language-text\">componentDidMount()</code></li>\n</ul>","fields":{"slug":"/posts/React-Remaking-Miniter-Using-React-part-three","tagSlugs":["/tag/react/","/tag/css/","/tag/javascript/"]},"frontmatter":{"date":"2019-06-24T22:56:37.121Z","description":"Remaking Miniter Using React","tags":["react","css","javascript"],"title":"React[03]Remaking Miniter Using React III - State and Lifecycle"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/React-Remaking-Miniter-Using-React-part-three"}}}