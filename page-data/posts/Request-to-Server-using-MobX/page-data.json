{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Request-to-Server-using-MobX","webpackCompilationHash":"ee771c63184d4e951532","result":{"data":{"markdownRemark":{"id":"105935e0-b6b9-5af2-a1b7-059f343a37cc","html":"<p>State like login must be handled globally since your login information should be accessible in every single page that requires permissions. So when you send a request to a server for login, you have to do it globally. <code class=\"language-text\">MobX</code> is the way to go.</p>\n<p>I have already posted about how to set up your <code class=\"language-text\">React Native</code> project using <code class=\"language-text\">MobX</code>. And this post is about how you send a request.</p>\n<p>First, you have to create a <code class=\"language-text\">Store</code> which changes a state and detects such changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { observable, action, runInAction } from &quot;mobx&quot;;\nimport { LoginManager, AccessToken } from &#39;react-native-fbsdk&#39;;\nimport { API_URL } from &quot;../../config&quot;;\nimport axios from &quot;axios&quot;;\n\nclass UserStore {\n    @observable user = [];\n    @observable facebookLoginStatus = &quot;&quot;;\n    @observable state = &quot;pending&quot;\n\n    const store = new UserStore();\n    export default store;</code></pre></div>\n<p><code class=\"language-text\">observable</code> in <code class=\"language-text\">MobX</code> is data of which change could be observable. When Facebook login is successful, his or her user information is going to be stored in <code class=\"language-text\">@observable user</code></p>\n<p>And you implement the Facebook login by using the code provided by Facebook Github. I used a custom button, so my code is like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    @action\n    facebookLogin() {\n        LoginManager.logInWithPermissions([&quot;public_profile&quot;]).then(\n            action ((result) =&gt; {\n              if (result.isCancelled) {\n                console.log(&quot;Login cancelled&quot;);\n              } else {\n                AccessToken.getCurrentAccessToken().then(\n                   action ((data) =&gt; {\n                    this.facebookToken = data.accessToken;\n                    const headers = {\n                            &quot;Content-Type&quot;: &quot;application/json&quot;,\n                            &quot;Accept&quot;: &quot;application/json&quot;\n                        }\n                    const body = JSON.stringify(this.facebookToken)\n\n                    axios.post(`${API_URL}account/facebooklogin`, body, { headers }). then(\n                        action ((response) =&gt; {\n                        if (response.data.code === 0) {\n                            this.state = &quot;done&quot;;\n                            this.facebookLoginStatus=&quot;fail&quot;;\n                            this.user = response.data.user_info;\n                        } else {\n                            this.state= &quot;done&quot;;\n                            this.facebookLoginStatus=&quot;success&quot;;\n                            this.user = response.data.user_info;\n                        }\n                    }))\n                  })\n                )\n                console.log(\n                  &quot;Login success with permissions: &quot; +\n                    result.grantedPermissions.toString()\n                );\n              }\n            }),\n            action ((error) =&gt; {\n              console.log(&quot;Login fail with error: &quot; + error);\n            })\n        );\n    }\n\n}</code></pre></div>\n<p><code class=\"language-text\">action</code> is anything that can modify a <code class=\"language-text\">state</code>. Since I am going to change the state called <code class=\"language-text\">user</code>, I am calling this request an <code class=\"language-text\">action</code>. I used <code class=\"language-text\">async/await</code> like above since the instruction was very clear in the <a href=\"https://mobx.js.org/best/actions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MobX website</a>.</p>\n<p>And when you send a request to a server using a token from Facebook, your server will return the access token from your server, which you have to store in your storage.</p>\n<p>One thing <code class=\"language-text\">React Native</code> is different from <code class=\"language-text\">React</code> is that you have to store the token by using <code class=\"language-text\">async-storage</code> library. I will talk about this in the next post</p>","fields":{"slug":"/posts/Request-to-Server-using-MobX","tagSlugs":["/tag/we-code/","/tag/coding-bootcamp/","/tag/react-native/","/tag/facebook/","/tag/social-login/","/tag/mob-x/"]},"frontmatter":{"date":"2019-08-02T18:27:37.121Z","description":"How to send a request to the server via MobX","tags":["WeCode","Coding Bootcamp","React Native","Facebook","Social Login","MobX"],"title":"Request to Server using MobX"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/Request-to-Server-using-MobX"}}}