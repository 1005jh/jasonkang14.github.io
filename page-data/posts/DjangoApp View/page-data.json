{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/DjangoApp View","webpackCompilationHash":"3be2fbf12ba176c6223d","result":{"data":{"markdownRemark":{"id":"8b0a2cbf-1b29-52ba-b066-9bbbdab40ac0","html":"<h1 id=\"1-writing-a-simple-form\"><a href=\"#1-writing-a-simple-form\" aria-label=\"1 writing a simple form permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Writing a simple form</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n\n{% if error_message %}&lt;p&gt;&lt;strong&gt;{{ error_message }}&lt;/strong&gt;&lt;/p&gt;{% endif %}\n\n&lt;form action=&quot;{% url &#39;polls:vote&#39; question.id %}&quot; method=&quot;post&quot;&gt;\n{% csrf_token %}\n{% for choice in question.choice_set.all %}\n    &lt;input type=&quot;radio&quot; name=&quot;choice&quot; id=&quot;choice{{ forloop.counter }}&quot; value=&quot;{{ choice.id }}&quot;&gt;\n    &lt;label for=&quot;choice{{ forloop.counter }}&quot;&gt;{{ choice.choice_text }}&lt;/label&gt;&lt;br&gt;\n{% endfor %}\n&lt;input type=&quot;submit&quot; value=&quot;Vote&quot;&gt;\n&lt;/form&gt;</code></pre></div>\n<ol>\n<li>each question <code class=\"language-text\">choice</code> displays a radio button</li>\n<li>the <code class=\"language-text\">value</code> of each radio button is the associated question choice’s ID</li>\n<li>the <code class=\"language-text\">name</code> of each radio button is <code class=\"language-text\">choice</code></li>\n<li>when somebody selects one of the radio buttons to submit a form, it will send the <code class=\"language-text\">POST</code> data <code class=\"language-text\">choice=#</code> where # is the ID of the selected choice</li>\n</ol>\n<p>Using <code class=\"language-text\">method=&quot;post&quot;</code> is important because the act of submitting this form will alter data server-side. (make sure not to use <code class=\"language-text\">method=&quot;get&quot;</code>)</p>\n<ul>\n<li>always use <code class=\"language-text\">method=&quot;post&quot;</code> when you create a form that alters data server-side</li>\n</ul>\n<p><code class=\"language-text\">forloop.counter</code> indicates how many times the <code class=\"language-text\">for</code> tag has gone through the loop</p>\n<p><code class=\"language-text\">{% csrf_token %}</code>: we need to worry about this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## views.py\n\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\n\nfrom .models import Choice, Question\n\ndef vote(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = question.choice_set.get)pk=request.POST[&#39;choice&#39;])\n    except (KeyError, Choice.DoesNotExist):\n        return render(request, &#39;polls/detail.html&#39;, {\n            &#39;question&#39;: question,\n            &#39;error_message&#39;: &quot;You didn&#39;t select a choice&quot;,\n        })\n    else:\n        selected_choice:votes += 1\n        selected_choice.save()\n        return HttpResponseRedirect(reverse(&#39;polls:results&#39;, args=(question.id,)))</code></pre></div>\n<ol>\n<li><code class=\"language-text\">request.POST</code>: a dictionary-like object that lets you access submitted data by key name</li>\n<li>contains all given HTTP POST parameters</li>\n<li><code class=\"language-text\">request.POST[&#39;choice&#39;]</code> returns the ID of the selected choice as a string</li>\n<li>\n<p>its values are always strings</p>\n<ul>\n<li>Django provides <code class=\"language-text\">request.GET</code> for accessing GET data in the same way</li>\n</ul>\n</li>\n<li><code class=\"language-text\">request.POST[&#39;choice&#39;]</code> will raise <code class=\"language-text\">KeyError</code> if choice wasn’t provided in POST data.</li>\n<li>checks for <code class=\"language-text\">KeyError</code> and redisplays the question form with an error message</li>\n<li>\n<p>choice returns <code class=\"language-text\">HttpReponseRedirect</code>, which takes a single argument: the URL to which the user will be redirected.</p>\n<ul>\n<li>always return <code class=\"language-text\">HttpResponseRedirect</code> after successfully dealing with POST data</li>\n</ul>\n</li>\n<li>using the <code class=\"language-text\">reverse()</code> function in the <code class=\"language-text\">HttpResponseRedirect</code> constructor, which helps avoid having to hardcode a URL in the view function.</li>\n</ol>\n<h1 id=\"2-amend-views\"><a href=\"#2-amend-views\" aria-label=\"2 amend views permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Amend Views</h1>\n<ul>\n<li>the shorter the code, the better it is</li>\n</ul>\n<p><code class=\"language-text\">ListView</code> and <code class=\"language-text\">Detail View</code> to abstract the concepts of “display a list of objects” and “display a detail page for a particular type of object”</p>\n<ul>\n<li>each generic view needs to know what model it will be acting upon. this is provided using the <code class=\"language-text\">model</code> attribute</li>\n<li>the <code class=\"language-text\">DetailView</code> generic view expects the primary key value captured from the URL to be called <code class=\"language-text\">pk</code>, so <code class=\"language-text\">question_id</code> has been changed to <code class=\"language-text\">pk</code></li>\n</ul>\n<p><code class=\"language-text\">DetailView</code> and <code class=\"language-text\">ListView</code> generic views use a default template called <code class=\"language-text\">&lt;app name&gt;/&lt;model name&gt;_list.html</code> like <code class=\"language-text\">polls/index.html</code></p>","fields":{"slug":"/posts/DjangoApp View","tagSlugs":["/tag/python/","/tag/django/","/tag/form/"]},"frontmatter":{"date":"2019-06-17T20:17:37.121Z","description":"Following a Django tutorial on djangoproject.com to create a django app.","tags":["Python","Django","form"],"title":"Django App[05] Form"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/DjangoApp View"}}}