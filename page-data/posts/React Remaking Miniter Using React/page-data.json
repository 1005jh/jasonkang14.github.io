{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/React Remaking Miniter Using React","webpackCompilationHash":"3be2fbf12ba176c6223d","result":{"data":{"markdownRemark":{"id":"dec46005-7259-5756-abba-ce9a42d45cee","html":"<p>Decided to dig deeper into the front-end development. Used <code class=\"language-text\">React</code> to re-do the miniter project which I had done using DOM</p>\n<h1 id=\"1-jsx-format\"><a href=\"#1-jsx-format\" aria-label=\"1 jsx format permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JSX format</h1>\n<p>Simply put, it’s using HTML elements as a string like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const name = &#39;Josh Perez&#39;;\nconst element = &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n\nReactDOM.render(\n  element,\n  document.getElementById(&#39;root&#39;)\n);</code></pre></div>\n<p>Any JavaScript expression can go inside the curly braces in JSX. For the longest time, I was wondering why every single example was rendinring the element to document.getElementById(‘root’) and found out that HTML components written in React becomes children to that element. like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en&gt;\n  &lt;head&gt;...&lt;/head&gt;\n  &lt;body&gt;\n    &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;\n    &lt;div id=&quot;root&gt;...&lt;/div&gt;\n      &lt;!--\n        ... has code written in React\n      --&gt;\n  &lt;script&gt;...&lt;/script&gt;\n &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>You can just close the element directly like this. without a separate closing tag</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button name=&quot;input-btn&quot; /&gt;</code></pre></div>\n<h1 id=\"2-jsx-as-an-object\"><a href=\"#2-jsx-as-an-object\" aria-label=\"2 jsx as an object permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. JSX as an object</h1>\n<p>if you write something like this,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const element = (\n  &lt;h1 className=&quot;greeting&quot;&gt;\n    Hello, world!\n  &lt;/h1&gt;\n);</code></pre></div>\n<p>this is same as this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const element = React.createElement(\n  &#39;h1&#39;,\n  {className: &#39;greeting&#39;},\n  &#39;Hello, world!&#39;\n);</code></pre></div>","fields":{"slug":"/posts/React Remaking Miniter Using React","tagSlugs":["/tag/react/","/tag/css/","/tag/java-script/"]},"frontmatter":{"date":"2019-06-22T22:56:37.121Z","description":"Remaking Miniter Using React","tags":["React","CSS","JavaScript"],"title":"React[01] Remaking Miniter Using React I - JSX"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/React Remaking Miniter Using React"}}}