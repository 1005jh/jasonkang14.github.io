{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Miniter-Events/","webpackCompilationHash":"3dbca7d2a804a07d5194","result":{"data":{"markdownRemark":{"id":"e36d26ce-008e-5da7-843d-b4be5cb6014f","html":"<p>I had to make some events such as <code class=\"language-text\">keyup</code> and <code class=\"language-text\">click</code> for my Miniter. <br>\nI used <code class=\"language-text\">addEventListner</code> on certain elements in order to give events to them so that they may do what I want them to do.</p>\n<h1 id=\"1-keyup-keydown-onkeyup-onkeydown\"><a href=\"#1-keyup-keydown-onkeyup-onkeydown\" aria-label=\"1 keyup keydown onkeyup onkeydown permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. keyup, keydown, onKeyUp, onKeyDown</h1>\n<p>Change the color of a button from gray to blue if all cateroies are filled.<br>\nBelow is the code I wrote to accomplish this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// HTML\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;container&quot;&gt;\n    &lt;img class=&quot;logo&quot; src=&quot;https://upload.wikimedia.org/wikipedia/fr/thumb/c/c8/Twitter_Bird.svg/944px-Twitter_Bird.svg.png&quot;&gt;\n    &lt;header&gt;&lt;b&gt;Log in to Miniter&lt;/b&gt;&lt;/header&gt;\n    &lt;form&gt;\n      &lt;div class=&quot;input-wrap&quot;&gt;\n        &lt;input type=&quot;text&quot; placeholder=&quot;Enter ID&quot; class=&quot;enterId&quot; autocomplete=&quot;username&quot;&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;input-wrap&quot;&gt;\n        &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; class=&quot;enterPassword&quot; autocomplete=&quot;current-password&quot;&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;input-wrap&quot;&gt;\n        &lt;button class=&quot;login-btn&quot;&gt;&lt;b&gt;Log in&lt;/b&gt;&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n    &lt;div class=&quot;input-wrap&quot;&gt;\n      &lt;a href=&quot;./signup.html&quot;&gt;Sign Up for Miniter&lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;script src=&quot;js/login.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// CSS\n.login-btn {\n  border: none;\n  border-radius: 30px;\n  color: white;\n  font-size: 20px;\n  text-align: center;\n  background-color: gray;\n}\n\nbutton:hover, a:hover {\n  cursor: pointer;\n  opacity: 0.7;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// JavaScript\nconst elLoginBtn = document.querySelector(&#39;.login-btn&#39;);\nconst elInputId = document.querySelector(&#39;.enterId&#39;);\nconst elInputPassword = document.querySelector(&#39;.enterPassword&#39;);\n\nconst changeBtnColor = () =&gt; {\n  if(elInputId.value !== &quot;&quot; &amp;&amp; elInputPassword.value !== &quot;&quot;) {\n    elLoginBtn.style.backgroundColor = &quot;#0099ff&quot;;\n  } else {\n    elLoginBtn.style.backgroundColor = &quot;gray&quot;;\n  }\n};\n\nelInputId.addEventListener(&#39;keyup&#39;, changeBtnColor);\nelInputPassword.addEventListener(&#39;keyup&#39;, changeBtnColor);</code></pre></div>\n<p>I used <code class=\"language-text\">document.querySelector()</code> instead of <code class=\"language-text\">document.getElementById()</code> or <code class=\"language-text\">document.getElementsByClassName()</code> for the consistency purpose.</p>\n<p>I also used <code class=\"language-text\">keyup</code> instead of <code class=\"language-text\">keydown</code> since <code class=\"language-text\">keyup</code> triggers an event when you release a key that just pressed. <br>\nI tried using <code class=\"language-text\">keydown</code> first because <code class=\"language-text\">keydown</code> triggers an event when you press down a key.<br> However, it required me to press an extra key in order to trigger the event. I believe that is because when <code class=\"language-text\">keydown</code>is used, the function <code class=\"language-text\">changeBtnColor</code> is executed before a key gets inserted as a value.</p>\n<h1 id=\"2-click-onclick\"><a href=\"#2-click-onclick\" aria-label=\"2 click onclick permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. click, onClick</h1>\n<p>Added a <code class=\"language-text\">click</code> event to generate a tweet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const makeTweetList = (obj) =&gt; {\n  let tweet =\n  `\n    &lt;span class=&quot;user&quot;&gt;${obj.user}&lt;/span&gt;\n    &lt;span class=&quot;date&quot;&gt;${obj.date}&lt;/span&gt;\n    &lt;div class=&quot;content&quot;&gt;${obj.contents}&lt;/div&gt;\n  `\n  return tweet;\n};\n\nconst makeNewTweet = () =&gt; {\n  count++;\n  if (elTextarea.value === &quot;&quot;) {\n    alert(&quot;write your tweet&quot;);\n    event.preventDefault();\n    return;\n  }\n\n  const newTweet = document.createElement(&#39;li&#39;);\n  newTweet.className = &quot;tweet&quot;;\n  let tweetObj = {\n    user: elUserName.innerHTML,\n    date: getDate(),\n    contents: elTextarea.value\n  }\n\n  newTweet.innerHTML = makeTweetList(tweetObj);\n  elTweetList.insertBefore(newTweet, elTweetList.childNodes[0]);\n}\n\nelMakeBtn.addEventListener(&#39;click&#39;, makeNewTweet);</code></pre></div>\n<p>I decided to use <code class=\"language-text\">backtick</code> to create HTML elements and put them directly into the HTML using DOM as shown in the function <code class=\"language-text\">makeTwitList(obj)</code>. <br>\nThe function <code class=\"language-text\">makeTwitList(obj)</code> is called from function <code class=\"language-text\">makeNewTweet()</code> after receiving input values upon <code class=\"language-text\">click</code>. <br>\n<code class=\"language-text\">makeNewTweet()</code> function stores input values into an object and sends the object to <code class=\"language-text\">makeTwitList(obj)</code> as a parameter so that the callback function may require data from the object.</p>\n<p>Then the returned value gets assigned as <code class=\"language-text\">innerHTML</code> of a <code class=\"language-text\">newTweet</code> element. <code class=\"language-text\">insertBefore()</code>was used so that a new tweet may get stacked upon old tweets.</p>\n<h1 id=\"3-eventstoppropagation\"><a href=\"#3-eventstoppropagation\" aria-label=\"3 eventstoppropagation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. event.stopPropagation()</h1>\n<p>I was trying my best—ok I admit not my utmost best— to make it look similar to the actual Twitter. So I added a feature to enlarge the textarea when someone clicks the textarea to make a new tweet and return it to its original size if elsewhere is clicked. Below is my code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//HTML\n\n&lt;div class=&quot;enterNewTweet&quot;&gt;\n  &lt;textarea placeholder=&quot;What&#39;s happening?&quot; class=&quot;newMessage&quot;&gt;&lt;/textarea&gt;\n  &lt;div class=&quot;toolBar&quot;&gt;\n    &lt;button class=&quot;make-btn&quot;&gt;Tweet&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//CSS\n\ntextarea {\n  border-radius: 5px;\n  border: 3px solid #99d6ff;\n  height: 50px;\n  width: 90%;\n  margin: 15px auto;\n  padding: 10px;\n  resize: none;\n  font-size: 20px;\n}\n\ntextarea::placeholder {\n  font-size: 20px;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//JavaScript\n\nconst enlargeTextarea = () =&gt; {\n  event.stopPropagation();\n  elTextarea.style.height = &quot;150px&quot;;\n  elToolBar.style.display = &quot;block&quot;;\n}\n\nelTextarea.addEventListener(&#39;click&#39;, enlargeTextarea);\n\ndocument.addEventListener(&#39;click&#39;, () =&gt; {\n  elTextarea.style.height = &quot;50px&quot;;\n  elToolBar.style.display = &quot;none&quot;;\n});</code></pre></div>\n<p>I added a <code class=\"language-text\">click</code> event to <code class=\"language-text\">document</code> to change the size if any areas rather than the textarea was clicked. And this was a problem <code class=\"language-text\">document</code> includes <code class=\"language-text\">textarea</code> as well. <br>This is where <code class=\"language-text\">event.stopPropagation()</code> comes in. According to MDN, <code class=\"language-text\">event.stopPropagation()</code> prevents further propagation of the current event in the capturing and bubbling phase.<br>\nThis means that when <code class=\"language-text\">textarea</code> is clicked, it stops the current event, which is the event set on <code class=\"language-text\">document</code>, so that the event on <code class=\"language-text\">textarea</code> may take place.</p>","fields":{"slug":"/posts/Miniter-Events/","tagSlugs":["/tag/event/","/tag/javascript/","/tag/html/","/tag/css/","/tag/keyup/","/tag/onclick/","/tag/click/"]},"frontmatter":{"date":"2019-06-06T11:50:32.169Z","description":"How to set events in attempt to make a mini-version of Twitter.","tags":["event","javascript","html","css","keyup","onclick","click"],"title":"Miniter[02] Events"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/Miniter-Events/"}}}