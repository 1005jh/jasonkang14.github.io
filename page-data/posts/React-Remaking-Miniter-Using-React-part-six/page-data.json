{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/React-Remaking-Miniter-Using-React-part-six","webpackCompilationHash":"4c83d13a69aea1e31f8f","result":{"data":{"markdownRemark":{"id":"d6329670-49d3-59dc-b934-23c89554b0f1","html":"<p>I used three HTML form elemements for this proejct.</p>\n<h1 id=\"1-textarea\"><a href=\"#1-textarea\" aria-label=\"1 textarea permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Textarea</h1>\n<p>A textarea component looks like this;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;;\n\nconst Textarea = props =&gt; {\n    return (\n        &lt;textarea\n            value={props.value}\n            className={props.className}\n            placeholder={props.placeholder}\n            onChange={props.handleInput}\n        /&gt;\n    );\n}\n\nexport default Textarea;</code></pre></div>\n<p><code class=\"language-text\">value</code> is to handle inputs to the text area <br>\n<code class=\"language-text\">className</code> is to apply CSS<br>\n<code class=\"language-text\">placeholder</code> is for placeholder<br>\n<code class=\"language-text\">onChange</code> is to use <code class=\"language-text\">setState()</code> method to change the state of <code class=\"language-text\">value</code><br>\nSince Textarea does not need a constructor, I used a function format in order to define the component. Passing props allows me to omit <code class=\"language-text\">this</code>, which normally comes in front of <code class=\"language-text\">props</code>, making the code slightly more efficient.</p>\n<p>The parent component of the textarea code is below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">handleInputChange = (event) =&gt; {\n        this.setState ({\n            value: event.target.value\n        })\n    }\n\n...\n\n&lt;Textarea\n    className=&quot;newMessage&quot;\n    placeholder=&quot;What&#39;s happening?&quot;\n    value={this.state.value}\n    handleInput={this.handleInputChange}\n/&gt;</code></pre></div>\n<p>When an input is made into the textarea, it runs <code class=\"language-text\">handleInputchange()</code> and changes the state of <code class=\"language-text\">value</code>, which will be used as contents for a tweet.</p>\n<h1 id=\"2-input\"><a href=\"#2-input\" aria-label=\"2 input permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Input</h1>\n<p>This is used for id and password section.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;;\n\nconst Input = props =&gt; {\n    return (\n        &lt;input\n            className={props.className}\n            type={props.type}\n            name={props.name}\n            placeholder={props.placeholder}\n            autoComplete={props.autoComplete}\n            onChange={props.changeInput}\n        /&gt;\n    );\n}\n\nexport default Input;</code></pre></div>\n<p>the only thing that is different is <code class=\"language-text\">type</code> since an <code class=\"language-text\">input</code>element can be of different types. <br>\nalso added <code class=\"language-text\">autoComplete</code> upon the advice of Chrome brower.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;form&gt;\n    &lt;Input\n    type=&quot;text&quot;\n    placeholder=&quot;Enter ID&quot;\n    className=&quot;enterId&quot;\n    name=&quot;userId&quot;\n    autoComplete=&quot;username&quot;\n    changeInput={this.handleChange}\n    /&gt;\n\n    &lt;Input\n    type=&quot;password&quot;\n    name=&quot;password&quot;\n    placeholder=&quot;Password&quot;\n    className=&quot;enterPassword&quot;\n    autocomplete=&quot;current-password&quot;\n    changeInput={this.handleChange}\n    /&gt;\n&lt;/form&gt;</code></pre></div>\n<p>very similar to <code class=\"language-text\">textarea</code>, it takes an <code class=\"language-text\">onChange</code> attribute to run <code class=\"language-text\">handleChange()</code> so that input value to the <code class=\"language-text\">input</code> elements can be used to change the <code class=\"language-text\">state</code> of value</p>\n<h1 id=\"3-button\"><a href=\"#3-button\" aria-label=\"3 button permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Button</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;;\n\nconst Button = props =&gt; {\n    return (\n        &lt;button\n            className={props.className}\n            name={props.name}\n            onClick={props.btnClicked}\n        &gt;\n            {props.innerHTML}\n        &lt;/button&gt;\n    );\n}\n\nexport default Button;</code></pre></div>\n<p><code class=\"language-text\">button</code> elements have an <code class=\"language-text\">onClick</code> event to take care of it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Button\n    className=&quot;make-btn&quot;\n    name={`${this.state.mode === &quot;generate&quot; ? &quot;makeTweetBtn&quot; : &quot;updateTweetBtn&quot;}`}\n    innerHTML={`${this.state.mode === &quot;generate&quot; ? &quot;Tweet&quot; : &quot;Update&quot;}`}\n    btnClicked={this.state.mode === &quot;generate&quot; ? this.generateNewTweet : this.updateTweet}\n/&gt;</code></pre></div>\n<p>Each tweet also has an <code class=\"language-text\">edit</code> button. Therefore, when the <code class=\"language-text\">edit</code> button is clicked, it changes the generate button into an edit button, which is why the conditional operator was used.</p>","fields":{"slug":"/posts/React-Remaking-Miniter-Using-React-part-six","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-06-27T19:56:37.121Z","description":"Remaking Miniter Using React","tags":["react"],"title":"React[06]Remaking Miniter Using React VI - Forms"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/React-Remaking-Miniter-Using-React-part-six"}}}