{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/How-to-implement-a-login-decorator","webpackCompilationHash":"7b28d0350729aa5f5ee7","result":{"data":{"markdownRemark":{"id":"0032a838-dbe1-54ab-8e45-0eb4085d5839","html":"<p>The definition of decorator is a function that must execute before executing a function. Therefore, a login decorator is used where user authorization is necessary. For example, when you look up a registered-member-only event, you must be logged in, which is supposed to be done via a login decorator.</p>\n<p>The code is like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json\nimport jwt\n\nfrom django.http          import JsonResponse\nfrom .models              import Account\nfrom db_settings          import jwt_key\nfrom lunch_buddy.settings import JWT_ALGORITHM\ndef login_decorator(func):\n\n    def login_wrapper(self, request, *args, **kwargs):\n        token = request.headers[&quot;Authorization&quot;]\n\n        check_auth = jwt.decode(token, jwt_key, JWT_ALGORITHM)\n\n        if Account.objects.filter(pk = check_auth[&quot;id&quot;]).exists():\n            request.user = Account.objects.get(pk = check_auth[&quot;id&quot;])\n            return func(self, request, *args, **kwargs)\n\n        return JsonResponse({\n            &quot;error_code&quot;: &quot;INVALID_LOGIN&quot;\n        }, status=400)\n\n    return login_wrapper</code></pre></div>\n<p>Decorators could be “nested” into multiple layers depending on how you want to use it. In this case, I did not need much nesting.</p>\n<p>The basic logic of a login decorator is checking whether the user is a registered user or not by using a token, which is supposed to be given out by a server you have developed.</p>\n<ol>\n<li>Receive a token from <code class=\"language-text\">request headers</code></li>\n<li><code class=\"language-text\">Decode</code> using a <code class=\"language-text\">jwt</code> method</li>\n<li>Check if he or she has been registered.</li>\n</ol>\n<p>One thing that I find very clever is the use of a <code class=\"language-text\">primary key</code> to distinguish different users as you save the data to the database. As you use the token to see if a user with such <code class=\"language-text\">primary key</code> exists, you give the user authorizaion/authentication to access a page which requires a login.</p>","fields":{"slug":"/posts/How-to-implement-a-login-decorator","tagSlugs":["/tag/login/","/tag/decorator/"]},"frontmatter":{"date":"2019-07-11T20:27:37.121Z","description":"How to implement a login decorator","tags":["login","decorator"],"title":"Login Decorator"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/How-to-implement-a-login-decorator"}}}