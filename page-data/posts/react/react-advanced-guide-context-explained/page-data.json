{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/react-advanced-guide-context-explained","webpackCompilationHash":"f7d08762b766a9c33e41","result":{"data":{"markdownRemark":{"id":"123b3281-9604-5f7f-8bda-8a538a7e46ab","html":"<h2 id=\"this-post-is-a-summarized-version-of-react-doc\"><a href=\"#this-post-is-a-summarized-version-of-react-doc\" aria-label=\"this post is a summarized version of react doc permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>This post is a summarized version of <a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react doc</a></h2>\n<ol>\n<li>\n<p>When to use it\nAccording to the official React docs, <code class=\"language-text\">Context</code> is designed to share data that can be considered “global” for a tree of React components.</p>\n<ul>\n<li>you use <code class=\"language-text\">Context</code> when you have to pass <code class=\"language-text\">props</code> to a grandchild-of-a-grandchild-of-a-grandchild component</li>\n<li>so <code class=\"language-text\">Context</code> can be used instead of <code class=\"language-text\">Redux</code> or <code class=\"language-text\">MobX</code> unless you are familiar with them or you choose to use an outside library. I am familiar with <code class=\"language-text\">MobX</code>, so I tried my best to compare the two, so hope that helps.</li>\n<li>If you don’t use <code class=\"language-text\">Context</code> when you pass down <code class=\"language-text\">props</code> to a deeply nexted component, you can just create a separate component for the specific <code class=\"language-text\">props</code> instead. So make sure that using <code class=\"language-text\">Context</code> is more efficient than any other methods that you can think of.</li>\n</ul>\n</li>\n<li>\n<p>How to use it\n<code class=\"language-text\">const MyContext = React.createContext(defaultValue);</code></p>\n<ul>\n<li>This creates a <code class=\"language-text\">Context</code> object. And when React renders, the object will read the current context value from the closest matching <code class=\"language-text\">Provider</code> above it in the tree.</li>\n<li>This is like an <code class=\"language-text\">observable</code> in <code class=\"language-text\">MobX</code>. The value/props that could be changed depending on events and its changes should be monitored globally.</li>\n<li>The <code class=\"language-text\">defaultValue</code> argument is only used when a component does not have a matching <code class=\"language-text\">Provider</code> above it in the tree. So <code class=\"language-text\">defaultValue</code> does not have to be set/determined all the time.</li>\n</ul>\n<p><code class=\"language-text\">&lt;MyContext.Provider value={/* some value */}&gt;</code></p>\n<ul>\n<li>Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.</li>\n<li>so I think <code class=\"language-text\">Provider</code> is something like a <code class=\"language-text\">Redux</code> or <code class=\"language-text\">MobX</code> store that handles events associated with such changes.</li>\n<li><code class=\"language-text\">Provider</code> accepts a <code class=\"language-text\">value</code> props and can provide such values to many consumers. This is similar to how many components can access change of <code class=\"language-text\">props</code> or <code class=\"language-text\">states</code> in a <code class=\"language-text\">Redux/MobX</code> store.</li>\n</ul>\n<p><code class=\"language-text\">Class.contextType</code></p>\n<ul>\n<li>lets you consume the nearest current value of that Context type using this.context.</li>\n<li>in <code class=\"language-text\">MobX</code>, you can determine the type of <code class=\"language-text\">observable</code> when you declare it for the first time. I think this is similar to that.</li>\n<li>this is associated with <code class=\"language-text\">lifecycle</code> methods, but not to sure how to use it. I think I would have to use it myself in my code to fully understand it.</li>\n</ul>\n<p><code class=\"language-text\">Context.Consumer</code></p>\n<ul>\n<li>A React component that subscribes to context changes. This lets you subscribe to a context within a function component.</li>\n<li>this is like an <code class=\"language-text\">observer</code> in <code class=\"language-text\">MobX</code>. <code class=\"language-text\">Consumer</code> pretty much represents a component</li>\n<li><code class=\"language-text\">Consumer</code> detects change of <code class=\"language-text\">props</code> in <code class=\"language-text\">Provider</code> and have <code class=\"language-text\">React</code> render again.</li>\n</ul>\n</li>\n</ol>","fields":{"slug":"/posts/react/react-advanced-guide-context-explained","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-08-27T22:27:37.121Z","description":"React Context Explained","tags":["react"],"title":"React - Context Explained"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react/react-advanced-guide-context-explained"}}}