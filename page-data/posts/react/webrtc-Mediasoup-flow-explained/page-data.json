{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/webrtc-Mediasoup-flow-explained","webpackCompilationHash":"990088a467561384169d","result":{"data":{"markdownRemark":{"id":"77ecf469-273b-5be6-aa7f-86fe260a50b2","html":"<h3 id=\"mediasoup-is-an-sfuselective-forwarding-unit-which-receives-audio-and-video-streams-from-endpoints-and-relays-them-to-everyone-else\"><a href=\"#mediasoup-is-an-sfuselective-forwarding-unit-which-receives-audio-and-video-streams-from-endpoints-and-relays-them-to-everyone-else\" aria-label=\"mediasoup is an sfuselective forwarding unit which receives audio and video streams from endpoints and relays them to everyone else permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mediasoup is an SFU(Selective Forwarding Unit) which receives audio and video streams from endpoints and relays them to everyone else</h3>\n<h4 id=\"some-of-code-examples-are-mine-and-others-are-from-mediasoup-demo\"><a href=\"#some-of-code-examples-are-mine-and-others-are-from-mediasoup-demo\" aria-label=\"some of code examples are mine and others are from mediasoup demo permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Some of code examples are mine, and others are from <a href=\"https://https://github.com/versatica/mediasoup-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mediasoup-demo</a></h4>\n<ol>\n<li>\n<p>Device Loading</p>\n<ul>\n<li>device loading requires routerRtpCapabilities, which must be retrieved via a Mediasoup server</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//server.js\n\nconst rtpCapabilities = mediasoupRouter.rtpCapabilities();</code></pre></div>\n<ul>\n<li>or it could be like below according to a demo.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//server.js\n\nreturn mediasoupRouter.rtpCapabilities</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//client.js\n\n    device = new mediasoupClient.Device({ Handler: &quot;ReactNative&quot; });\n        await device.load({ routerRtpCapabilities });\n        console.log(&quot;device loaded: &quot;, device);\n\n        if (device.canProduce(&quot;audio&quot;)) {\n            this.produce();\n        }</code></pre></div>\n<ul>\n<li>This is what a device looks like when it’s succesfully loaded\n<img src=\"https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/69357284_10219663912889269_8411179144062173184_o.jpg?_nc_cat=108&#x26;_nc_oc=AQnCgsV5iFz3uHOq6rw8QZ33wdk0mDWECQieZm_SYbv2mbIq6HKivgQChGidEGcDiHU&#x26;_nc_ht=scontent-icn1-1.xx&#x26;oh=6f04e6fc083582a0c1aeca5edce97100&#x26;oe=5DCCFBF9\" alt=\"loaded device\"></li>\n<li>\n<p>Creating Transports</p>\n<ul>\n<li>you gotta create a <code class=\"language-text\">sendTransport</code> and a <code class=\"language-text\">recvTransport</code></li>\n<li>transports are used to send/receive media. and they are created before wishing to send/receive media</li>\n<li>first you create a <code class=\"language-text\">sendTransport</code> to send media\n<code class=\"language-text\">createWebRtcTransport { forceTcp: false, producing: true, consuming: false }</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const transportInfo = await this._protoo.request(\n     &#39;createWebRtcTransport&#39;,\n     {\n       forceTcp: this._forceTcp,\n       producing: true,\n       consuming: false,\n       sctpCapabilities: this._useDataChannel\n         ? this._mediasoupDevice.sctpCapabilities\n         : undefined,\n     },\n   );\n\nconst {\n   id,\n   iceParameters,\n   iceCandidates,\n   dtlsParameters,\n   sctpParameters,\n} = transportInfo;\n\nthis._sendTransport = this._mediasoupDevice.createSendTransport(\n   {\n    id,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n   },\n);</code></pre></div>\n<ul>\n<li>set up <code class=\"language-text\">connect</code> and <code class=\"language-text\">produce</code> events for <code class=\"language-text\">sendTransport</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.sendTransport.on(&quot;connect&quot;, ({ dtlsParameters })  =&gt; {\n                console.log(&quot;send connect triggered&quot;);\n                socket.emit(&quot;connectWebRTCTransport&quot;, {\n                    transportId: sendTransport.id,\n                    dtlsParameters: dtlsParameters\n                })\n            })\n\n            this.sendTransport.on(&quot;produce&quot;, async ({ producer}) =&gt; {\n                console.log(&quot;send produce triggered&quot;);\n                socket.emit(&quot;produce&quot;, {\n                    transportId: sendTransport.id,\n                    kind: &quot;audio&quot;,\n                    rtpParameters: producer.rtpParameters,\n                    appData: producer.appData\n                })\n            })</code></pre></div>\n<ul>\n<li>you don’t have to wait for a signal from another producer before creating a <code class=\"language-text\">recvTransport</code>. just do it right away.</li>\n</ul>\n<p><code class=\"language-text\">createWebRtcTransport { forceTcp: false, producing: false, consuming: true }</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const transportInfo = await this._protoo.request(\n       &#39;createWebRtcTransport&#39;,\n       {\n         forceTcp: this._forceTcp,\n         producing: false,\n         consuming: true,\n         sctpCapabilities: this._useDataChannel\n           ? this._mediasoupDevice.sctpCapabilities\n           : undefined,\n       },\n     );\n\n     const {\n       id,\n       iceParameters,\n       iceCandidates,\n       dtlsParameters,\n       sctpParameters,\n     } = transportInfo;\n\n     this._recvTransport = this._mediasoupDevice.createRecvTransport(\n       {\n         id,\n         iceParameters,\n         iceCandidates,\n         dtlsParameters,\n         sctpParameters,\n       },\n     );</code></pre></div>","fields":{"slug":"/posts/react/webrtc-Mediasoup-flow-explained","tagSlugs":["/tag/webrtc/","/tag/reactnative/","/tag/mediasoup/"]},"frontmatter":{"date":"2019-08-20T22:27:37.121Z","description":"Mediasoup Flow explained","tags":["webrtc","reactnative","mediasoup"],"title":"WebRTC[03] - Mediasoup Flow Explained"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react/webrtc-Mediasoup-flow-explained"}}}