{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/immerjs-and-its-benefits","webpackCompilationHash":"f5b7725ad6df8bc2c031","result":{"data":{"markdownRemark":{"id":"c06b396e-78f5-545a-888a-b370557ab17a","html":"<h1 id=\"tldr\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<p>You don’t have to <code class=\"language-text\">slice()</code> your array in order to <code class=\"language-text\">setState()</code> or <code class=\"language-text\">useState()</code></p>\n<h1 id=\"explanation\"><a href=\"#explanation\" aria-label=\"explanation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explanation</h1>\n<p>According to the <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official document</a>, <code class=\"language-text\">Immer</code> allows you to apply all the changes to a temporary <strong>draftState</strong>, which is a <code class=\"language-text\">proxy</code> of the <strong>currentState</strong>. When all the mutations to immutable states are completed, <code class=\"language-text\">Immer</code> produces the <strong>nextState</strong> based on the mutations to the <strong>draftState</strong></p>\n<p>From this explanation, I feel like what it is saying is this. When you have an array as a state, in order for you to change such state, you have to create a temp state using the <code class=\"language-text\">slice()</code> method, and then mutate the <strong>sliced array</strong> and then apply the changes using <code class=\"language-text\">setState()</code> or <code class=\"language-text\">useState()</code>. However, if you use <code class=\"language-text\">Immer</code>, you don’t have to do this because <code class=\"language-text\">Immer</code> will allow you to use <strong>draftState</strong> instead of the <strong>sliced array</strong></p>\n<p>By looking at <a href=\"https://immerjs.github.io/immer/docs/produce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">producer</a>, I think I am right</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import produce from &quot;immer&quot;\n\nconst baseState = [\n    {\n        todo: &quot;Learn typescript&quot;,\n        done: true\n    },\n    {\n        todo: &quot;Try immer&quot;,\n        done: false\n    }\n]\n\nconst nextState = produce(baseState, draftState =&gt; {\n    draftState.push({todo: &quot;Tweet about it&quot;})\n    draftState[1].done = true\n})</code></pre></div>\n<p>by using the <code class=\"language-text\">draftState</code> provided by the <code class=\"language-text\">producer</code>, instead of <code class=\"language-text\">slicing</code> your array, or the <code class=\"language-text\">baseState</code>, you can just push the new item to the array. Like the example below from the <a href=\"https://immerjs.github.io/immer/docs/example-setstate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official document</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">onBirthDayClick2 = () =&gt; {\n    this.setState(\n        produce(draft =&gt; {\n            draft.user.age += 1\n        })\n    )\n}</code></pre></div>","fields":{"slug":"/posts/react/immerjs-and-its-benefits","tagSlugs":["/tag/react/","/tag/immerjs/"]},"frontmatter":{"date":"2020-01-15T23:27:37.121Z","description":"Basics of ImmerJS explained with its benefits","tags":["react","immerjs"],"title":"React - ImmerJS and Its Benefits"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react/immerjs-and-its-benefits"}}}