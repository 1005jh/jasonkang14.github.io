{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/using-set-as-a-state","webpackCompilationHash":"4f2de5ecdbdb358752e7","result":{"data":{"markdownRemark":{"id":"9d195bb6-074a-50cb-b3c9-99c02f651bba","html":"<p>I got an interview question, which asked me to create a shopping cart where a user can add or remove an item. And when an item is added to a cart, I was supposed to put a checkmark to the item.</p>\n<p>I first tried to implement this by using a <code class=\"language-text\">Boolean</code> state like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">consturctor() {\n    super()\n\n    this.state = {\n        addedToCart: false\n    }\n}</code></pre></div>\n<p>However, when I did this, every single item got a checkmark, so I decided to use an <code class=\"language-text\">array</code> and add an index of the item to the array when an item is added to the cart, and put a checkmark to the items of which index exists in the array like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">consturctor() {\n    super()\n\n    this.state = {\n        addedToCart: []\n    }\n}</code></pre></div>\n<p>But I realized that the values in the array could not be repeated. There is no repeated item in the list of items. so I decided to use a <code class=\"language-text\">set</code> instead of an <code class=\"language-text\">array</code> for efficiency.</p>\n<p>You can use a <code class=\"language-text\">set</code> when…</p>\n<ol>\n<li>there is no duplicate in your data—or when you try to remove duplicates</li>\n<li>a fast look-up is required.</li>\n<li>the order of data does not matter.</li>\n</ol>\n<p>I thought my case suits all three. There were only 12 items, so maybe a fast look-up was not required, but it was an interview question, so I kinda wanted to show off that I know my stuff. And this is how I did it;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">constructor() {\n    super();\n\n    this.state = {\n      productInCart: new Set(),\n    };\n  }</code></pre></div>\n<p>I set a <code class=\"language-text\">set</code> as a state like above, and updated, or <code class=\"language-text\">setState</code> likd below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">handleProductClick = idx =&gt; {\n    if (!this.state.productInCart.has(idx)) {\n        this.addToCart(idx);\n    } else {\n        this.removeFromCart(idx);\n    }\n};\n\naddToCart = idx =&gt; {\n    this.setState(({ productInCart }) =&gt; ({\n        productInCart: new Set(productInCart).add(idx)\n    }));\n};\n\nremoveFromCart = idx =&gt; {\n    const updateCart = new Set(this.state.productInCart);\n    updateCart.delete(idx);\n    this.setState({\n        productInCart: updateCart\n    });\n};</code></pre></div>\n<p>When you add an item to a <code class=\"language-text\">set</code>, you can just add it directly to the current state. However, when you remove an item from a <code class=\"language-text\">set</code>, you have to declare a separate variable like you would do with an array like <code class=\"language-text\">const tempArray = this.state.array.slice()</code>, and then delete an item from the set and <code class=\"language-text\">this.setState</code> in order to update.</p>","fields":{"slug":"/posts/react/using-set-as-a-state","tagSlugs":["/tag/react/","/tag/set/","/tag/array/"]},"frontmatter":{"date":"2019-07-16T17:27:37.121Z","description":"How to use a 'set' as a state and update the state","tags":["react","set","array"],"title":"React - Using Set as a State"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react/using-set-as-a-state"}}}