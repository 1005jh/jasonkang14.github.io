{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/React-Remaking-Miniter-Using-React-part-two","webpackCompilationHash":"3fd62f5ba3fe440b083d","result":{"data":{"markdownRemark":{"id":"bace785a-8879-5db1-b124-b2ac7c26934e","html":"<p>React app consists of multiple <code class=\"language-text\">components</code> and they transfer imformation in the format of <code class=\"language-text\">props</code> (<code class=\"language-text\">props</code> stands for properties). To be exact, a parent component transfers its infomration to its children as <code class=\"language-text\">props</code></p>\n<h1 id=\"1-function-and-class\"><a href=\"#1-function-and-class\" aria-label=\"1 function and class permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Function and Class</h1>\n<p>you can write a function to define a component</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}</code></pre></div>\n<p>you can also use an ES6 class to define a component</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Welcome extends React.Component {\n  render() {\n    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\n  }\n}</code></pre></div>\n<p>From my own understanding, it is better to use an ES6 class when you define a component, because it allows you to use <code class=\"language-text\">constructor()</code> method to set <code class=\"language-text\">state</code>, which is a topic to discuss later</p>\n<h1 id=\"2-composing-components\"><a href=\"#2-composing-components\" aria-label=\"2 composing components permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Composing Components</h1>\n<p>Components can refer to other components in their input, which allows us to re-use the same component for different purposes. For example, a single button component can be used for log-in, sign-up, and main-tweet pages.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Welcome name=&quot;Sara&quot; /&gt;\n      &lt;Welcome name=&quot;Cahal&quot; /&gt;\n      &lt;Welcome name=&quot;Edite&quot; /&gt;\n    &lt;/div&gt;\n  );\n}\n\nReactDOM.render(\n  &lt;App /&gt;,\n  document.getElementById(&#39;root&#39;)\n);</code></pre></div>\n<p>In the code above, you can see that the <code class=\"language-text\">App</code> component refers to <code class=\"language-text\">Welcome</code> component.<br>\nYou can maximize the use of children components to simplify a parent component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// parnet component\nfunction Comment(props) {\n  return (\n    &lt;div className=&quot;Comment&quot;&gt;\n      &lt;div className=&quot;UserInfo&quot;&gt;\n        &lt;img className=&quot;Avatar&quot;\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        /&gt;\n        &lt;div className=&quot;UserInfo-name&quot;&gt;\n          {props.author.name}\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div className=&quot;Comment-text&quot;&gt;\n        {props.text}\n      &lt;/div&gt;\n      &lt;div className=&quot;Comment-date&quot;&gt;\n        {formatDate(props.date)}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>\n<p>The above parent component is really long. But you can simplify it by using children component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// child component called Avatar\nfunction Avatar(props) {\n  return (\n    &lt;img className=&quot;Avatar&quot;\n      src={props.user.avatarUrl}\n      alt={props.user.name}\n    /&gt;\n\n  );\n}\n\n// parent component re-written\nfunction Comment(props) {\n  return (\n    &lt;div className=&quot;Comment&quot;&gt;\n      &lt;div className=&quot;UserInfo&quot;&gt;\n        &lt;Avatar user={props.author} /&gt;\n        &lt;div className=&quot;UserInfo-name&quot;&gt;\n          {props.author.name}\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div className=&quot;Comment-text&quot;&gt;\n        {props.text}\n      &lt;/div&gt;\n      &lt;div className=&quot;Comment-date&quot;&gt;\n        {formatDate(props.date)}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>","fields":{"slug":"/posts/React-Remaking-Miniter-Using-React-part-two","tagSlugs":["/tag/react/","/tag/css/","/tag/javascript/"]},"frontmatter":{"date":"2019-06-23T14:56:37.121Z","description":"Remaking Miniter Using React","tags":["react","css","javascript"],"title":"React[02] Remaking Miniter Using React II - Components and Props"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/React-Remaking-Miniter-Using-React-part-two"}}}