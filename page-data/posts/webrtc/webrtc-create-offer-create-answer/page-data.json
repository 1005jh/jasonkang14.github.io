{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/webrtc/webrtc-create-offer-create-answer","webpackCompilationHash":"7119cf2e70ed4f19ec21","result":{"data":{"markdownRemark":{"id":"37c87a45-6418-5c71-a097-b38871b7d426","html":"<h2 id=\"this-post-is-about-using-webrtc-in-react-native\"><a href=\"#this-post-is-about-using-webrtc-in-react-native\" aria-label=\"this post is about using webrtc in react native permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>This post is about using WebRTC in React Native.</h2>\n<p>make sure to install <code class=\"language-text\">react-native-webrtc</code> versions 1.75 or above <br>\n<code class=\"language-text\">npm install --save react-native-webrtc</code></p>\n<p>And then you have to import. <br>\n<code class=\"language-text\">import { RTCPeerConnection } from &#39;react-native-webrtc&#39;</code></p>\n<p>Now create a caller</p>\n<p><code class=\"language-text\">const caller = new RTCPeerConnection()</code></p>\n<p>Now the caller has to <code class=\"language-text\">createOffer()</code> with <code class=\"language-text\">offerOptions</code>.\n<code class=\"language-text\">offerOptions</code> represent which source of data you are going to offer: either audio or video, or could be both.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const offerOptions = {\n  offerToReceiveAudio: 1,\n  offerToReceiveVideo: 0,\n  voiceActivityDetection: true\n};</code></pre></div>\n<p>Using the created <code class=\"language-text\">offer</code>, the caller must set his/her <code class=\"language-text\">localDescription</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">caller.createOffer(offerOptions)\n  .then(async (desc) =&gt; {\n    await caller.setLocalDescription(desc);</code></pre></div>\n<p>Then the caller sends this <code class=\"language-text\">localDescription</code> to a callee, which is another <code class=\"language-text\">RTCPeerConnection</code>. <br>\n<code class=\"language-text\">const callee = new RTCPeerConnection()</code><br></p>\n<p>Then the callee uses the <code class=\"language-text\">localDescription</code> from the caller to set the callee’s <code class=\"language-text\">remoteDescription</code>. After setting the <code class=\"language-text\">remoteDescription</code>, the callee now <code class=\"language-text\">createAnswer()</code> and uses the answer to set the callee’s <code class=\"language-text\">localDescription</code>.</p>\n<p>The callee then sends the <code class=\"language-text\">localDescription</code> to the caller so that the caller can use the callee’s <code class=\"language-text\">localDescription</code> to set the caller’s <code class=\"language-text\">remoteDescription</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">callee.setRemoteDescription(desc)\n  .then(() =&gt; {\n    return callee.createAnswer()\n      .then(async (desc) =&gt; {\n        await callee.setLocalDescription(desc)</code></pre></div>\n<p>The caller receives the callee’s <code class=\"language-text\">localDescription</code> and uses the <code class=\"language-text\">localDescription</code> to set the caller’s <code class=\"language-text\">remoteDescription</code></p>\n<p><code class=\"language-text\">caller.setRemoteDescription(desc)</code></p>\n<p>Then the caller and callee needs to change their Interactive Connectivity Establishment(ICE) information in order to build connection. It is managed using an eventhandler, which I will talk about in a later post.</p>","fields":{"slug":"/posts/webrtc/webrtc-create-offer-create-answer","tagSlugs":["/tag/webrtc/"]},"frontmatter":{"date":"2019-08-16T17:27:37.121Z","description":"WebRTC flow explained","tags":["webrtc"],"title":"WebRTC Flow[01] - createOffer() and createAnswer()"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/webrtc/webrtc-create-offer-create-answer"}}}