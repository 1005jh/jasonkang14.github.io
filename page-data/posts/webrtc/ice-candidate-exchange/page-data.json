{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/webrtc/ice-candidate-exchange","webpackCompilationHash":"7b28d0350729aa5f5ee7","result":{"data":{"markdownRemark":{"id":"31844956-815e-5656-b9a3-ff2a1c6b9a1a","html":"<p>Simply put, ICE candidate exchange is simply a negotiation between to peers to see which ICE candidates—or an ICE candidate pair—to use in order to establish a WebRTC connection.</p>\n<p>An ICE candidate is an object that looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  candidate: &quot;candidate:2322976989 1 tcp 1518280447 IPADDRESS PORT typ host tcptype passive generation 0 ufrag UXEY network-id 1 network-cost 10&quot;\n  sdpMLineIndex: 0\n  sdpMid: &quot;audio&quot;\n}</code></pre></div>\n<p>Before negotiating ICE candidates, a peer must gather candidate addresses where candidate is a transport address, which is a combination of IP address and port for a particular transport protocol.</p>\n<p>There are three types of candidates: host, server-reflexive, and relayed. There is also a peer-reflexive candidate, but I will talk about it in a later post.</p>\n<p>Host candidates are obtained from physical or logical netowrk interfaces such as public internet or a private network. Host candidates can be easily understood as the one for which its IP address is the actual, direct IP address of a remote peer. like something you would retrieve from a local computer.</p>\n<p>Server-reflexive candidates are obtained from either a STUN or TURN server. The IP of a server-reflexive candidate indicates an intermediary address to represent the candidate’s peer anonymously.</p>\n<p>Relayed candidates only from a TURN server. Their IP addresses are addresses the TURN server uses to forward the media between two peers.</p>\n<p>ICE candidate exchange requires connectivity checks through which the two peers decide wich ICE candidate to use to communicate with each other. Each peer creates a list of candidates based on their priorities and share the lists and performs connectivity checks as they go down the list.</p>\n<p>The steps could be summarized like below;</p>\n<ol>\n<li>Sort the candidate pairs in priority order.</li>\n<li>Send checks on each candidate pair in priority order.</li>\n<li>Acknowledge checks received from the other agent.</li>\n</ol>\n<p>When the checks are complete, the two candidates form a candidate pair through wich the two peers communicate by sending media through the pair.</p>","fields":{"slug":"/posts/webrtc/ice-candidate-exchange","tagSlugs":["/tag/webrtc/","/tag/ice/","/tag/icecandidate/"]},"frontmatter":{"date":"2019-09-08T19:27:37.121Z","description":"How ICE candidate exchange works in WebRTC flow","tags":["webrtc","ice","icecandidate"],"title":"WebRTC[04] ICE Candidate Exchange"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/webrtc/ice-candidate-exchange"}}}