{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/Async-and-Await-in-JavaScript","webpackCompilationHash":"3fd62f5ba3fe440b083d","result":{"data":{"markdownRemark":{"id":"61e1789e-1b13-5bde-aa37-ca8dfcbb2dd4","html":"<p><code class=\"language-text\">Async/Await</code> is a syntax to use <code class=\"language-text\">promise</code>. I find it easier to use than <code class=\"language-text\">then</code>, and your code looks somewhat more straight-forward if you use <code class=\"language-text\">async/await</code>.</p>\n<p>if you don’t <code class=\"language-text\">await</code>, your <code class=\"language-text\">async</code> function will return a <code class=\"language-text\">promise</code> instead of the value you expected by calling a function/method. And you can only <code class=\"language-text\">await</code> inside an <code class=\"language-text\">async</code> function because it is used for asynchronous programming.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getTrack = async () =&gt; {\n    const audioStream = await mediaDevices.getUserMedia({ audio: true });\n    const audioTrack = audioStream.getAudioTracks()[0];\n}</code></pre></div>\n<p>in the code above, I am <code class=\"language-text\">awaiting</code> for the result of <code class=\"language-text\">mediaDevices.getUserMedia({ audio: true })</code> in order to use the return value of the method. If I don’t <code class=\"language-text\">await</code> for it, I get a promise instead of the value that I want. And if I were to use <code class=\"language-text\">console.log</code> to check the value assigned to <code class=\"language-text\">audioStream</code>, it will be undefined.</p>\n<p>If you use the conventional <code class=\"language-text\">.then</code> method, the code above is equivalent to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getTrack = () =&gt; {\n    mediaDevifes.getUserMedia({ audio: true })\n    .then(audioStream =&gt; {\n        const audioTrack = audioStream.getAudioTracks()[0];\n    })\n}</code></pre></div>\n<p>If you were to only think about <code class=\"language-text\">.then</code>, <code class=\"language-text\">async/await</code> could be just merely a change of syntax, but <code class=\"language-text\">async/await</code> is a lot more useful since it allows you to use a <code class=\"language-text\">promise</code>.</p>","fields":{"slug":"/posts/javascript/Async-and-Await-in-JavaScript","tagSlugs":["/tag/javascript/","/tag/sync/","/tag/async/","/tag/await/","/tag/promise/"]},"frontmatter":{"date":"2019-08-22T18:27:37.121Z","description":"Async/Await in JavaScript Explained","tags":["javascript","sync","async","await","promise"],"title":"Async/Await in JavaScript"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript/Async-and-Await-in-JavaScript"}}}