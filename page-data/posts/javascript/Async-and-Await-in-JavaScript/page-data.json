{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/Async-and-Await-in-JavaScript","webpackCompilationHash":"f7d08762b766a9c33e41","result":{"data":{"markdownRemark":{"id":"e50f81d0-3f8d-537b-af03-63be2b8c613f","html":"<p><code class=\"language-text\">Async/Await</code> is a syntax to use <code class=\"language-text\">promise</code>. I find it easier to use than <code class=\"language-text\">then</code>, and your code looks somewhat more straight-forward if you use <code class=\"language-text\">async/await</code>.</p>\n<p>if you don’t <code class=\"language-text\">await</code>, your <code class=\"language-text\">async</code> function will return a <code class=\"language-text\">promise</code> instead of the value you expected by calling a function/method. And you can only <code class=\"language-text\">await</code> inside an <code class=\"language-text\">async</code> function because it is used for asynchronous programming.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTrack</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> audioStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> audio<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> audioTrack <span class=\"token operator\">=</span> audioStream<span class=\"token punctuation\">.</span><span class=\"token function\">getAudioTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>in the code above, I am <code class=\"language-text\">awaiting</code> for the result of <code class=\"language-text\">mediaDevices.getUserMedia({ audio: true })</code> in order to use the return value of the method. If I don’t <code class=\"language-text\">await</code> for it, I get a promise instead of the value that I want. And if I were to use <code class=\"language-text\">console.log</code> to check the value assigned to <code class=\"language-text\">audioStream</code>, it will be undefined.</p>\n<p>If you use the conventional <code class=\"language-text\">.then</code> method, the code above is equivalent to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTrack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mediaDevifes<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> audio<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">audioStream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> audioTrack <span class=\"token operator\">=</span> audioStream<span class=\"token punctuation\">.</span><span class=\"token function\">getAudioTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you were to only think about <code class=\"language-text\">.then</code>, <code class=\"language-text\">async/await</code> could be just merely a change of syntax, but <code class=\"language-text\">async/await</code> is a lot more useful since it allows you to use a <code class=\"language-text\">promise</code>.</p>","fields":{"slug":"/posts/javascript/Async-and-Await-in-JavaScript","tagSlugs":["/tag/javascript/","/tag/promise/"]},"frontmatter":{"date":"2019-08-22T18:27:37.121Z","description":"Async/Await in JavaScript Explained","tags":["javascript","promise"],"title":"Async/Await in JavaScript"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript/Async-and-Await-in-JavaScript"}}}