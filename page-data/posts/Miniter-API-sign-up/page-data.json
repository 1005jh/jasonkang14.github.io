{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Miniter-API-sign-up","webpackCompilationHash":"90a170b79a6eaa73b1b2","result":{"data":{"markdownRemark":{"id":"91c677ab-42ab-52c6-be6c-ed16181e413c","html":"<p>Even though I finished a tutorial on djangoproject.com, it was still a struggle to even start an assignment/project on back-end because I have never done it before. One of my colleagues who had some experience with back-end development went ahead of me. Looking at his endproduct gave me an idea of what I am suppsoed to do.</p>\n<h1 id=\"1-virtual-environment-with-miniconda\"><a href=\"#1-virtual-environment-with-miniconda\" aria-label=\"1 virtual environment with miniconda permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Virtual Environment with Miniconda</h1>\n<p>I used Miniconda to create a virtual environment to do my back-end project. Detailed instruction how to install Miniconda is <a href=\"https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/20/conda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a><br></p>\n<p>Virtual environment helps to keep dependencies required by different projects especially you have to use different versions of python or django for each project.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#create a virtual environment\nconda create -n environment_name python=python_version anaconda\n\n#activate a virtual environment\nsource activate environment_name\n\n#deactivate the virtual environment\nsource deactivate\n\n#remove the virtual environment if no longer needed\nconda remove -n environment_name -all</code></pre></div>\n<h1 id=\"2-understanding-different-py-files\"><a href=\"#2-understanding-different-py-files\" aria-label=\"2 understanding different py files permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Understanding different “.py” files</h1>\n<p>I got to understan what each <code class=\"language-text\">.py</code> file does by working on this project.\n<code class=\"language-text\">manage.py</code>: a command-line utility. you can run different command lines such as makemigrations, migrate, shell, and runserver (these are pretty much all I had to use until I ran into a problem, which I will explain later in this post)<br>\n<code class=\"language-text\">settings.py</code>: settings/configurations for this Django project<br>\n<code class=\"language-text\">urls.py</code>: the URL declaration for the project<br>\n<code class=\"language-text\">models.py</code>: define each model that this Django project needs. model is like class in python which helps with creating objects<br>\n<code class=\"language-text\">views.py</code>: takes a web request and returns a web response<br></p>\n<h1 id=\"3-making-objects\"><a href=\"#3-making-objects\" aria-label=\"3 making objects permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Making objects</h1>\n<p>You can use either <code class=\"language-text\">python manage.py shell</code> command or create an object direclty from the <code class=\"language-text\">admin</code> page. Objects are created according to how class is defined in <code class=\"language-text\">models.py</code>I tried both ways since I am only working on the back-end side right now.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## models.py\n\ndef user_list(request):\n    user_list = []\n    for user in  User.objects.all():\n        user_list.append({\n            &#39;user_text&#39;: user.user_text,\n            &#39;name&#39;: user.name,\n            &#39;date&#39;: user.date,\n            &#39;content&#39;: user.content,\n            &#39;password&#39;: user.password,\n        })\n    return JsonResponse(user_list, safe=False)\n\n## views.py\n\ndef user_list(request):\n    user_list = []\n    for user in  User.objects.all():\n        user_list.append({\n            &#39;user_text&#39;: user.user_text,\n            &#39;name&#39;: user.name,\n            &#39;date&#39;: user.date,\n            &#39;content&#39;: user.content,\n            &#39;password&#39;: user.password,\n        })\n    return JsonResponse(user_list, safe=False)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python manage.py shell\n\nfrom api.models import User  # importing the class created/written in models.py\n\nuser = User(user_text=&quot;jkang14&quot;, name=&quot;jason&quot;, ..., content=&quot;first tweet&quot;, password=&quot;firstpassword&quot;)    # assign attributes as needed\n\nuser.save()      # save above information as an object, which gets appended to a list</code></pre></div>\n<h1 id=\"4-changing-attributes\"><a href=\"#4-changing-attributes\" aria-label=\"4 changing attributes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Changing attributes</h1>\n<p>I ran into a problem when I added a password attribute to the User class. I created an object before adding the attribute, so the table already had some data. When I tried to migrate after changing my model, I kept running into an error that the password attribute needs a default value. even after I set a default value(default=‘password’), I kept getting the error message.</p>\n<p>I Googled—like any other developers would do—and found out that if I delete the migration diretory, I can easily migrate it again. It looked like I had succeeded, but I couldn’t create a new object using either method that I described in part 3.</p>\n<p>And that was because it was still checked as migrated even though I deleted the file. I had to clear the migration story using zsh in order to migrate again by using the command below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ python manage.py migrate --fake api zero</code></pre></div>\n<p>This cleared the history, so I was able to migrate the new model and then create objects.\n<br>\n<br>\n<img src=\"https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/64883356_10219120716429697_6822158836451770368_n.jpg?_nc_cat=104&#x26;_nc_oc=AQm6ELBNSklVU2Qjf_pb8Tv8-4SP-k644FGRMw0rSWbhSmnofAqpiJFmDq93yChdVww&#x26;_nc_ht=scontent-hkg3-1.xx&#x26;oh=59628082c617465d129b0554cddf7ead&#x26;oe=5D855E32\" alt=\"api at the moment\">\n<br>\nThis is what I can see in my screen right now. Will work on it more tomorrow and see how it works.</p>","fields":{"slug":"/posts/Miniter-API-sign-up","tagSlugs":["/tag/python/","/tag/django/","/tag/api/"]},"frontmatter":{"date":"2019-06-18T22:36:37.121Z","description":"Making an API for the Miniter project with Django without using the REST framework.","tags":["python","django","api"],"title":"Miniter[05]Making an API Using Django without REST framework I"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/Miniter-API-sign-up"}}}