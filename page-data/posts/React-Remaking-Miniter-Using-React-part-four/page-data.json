{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/React-Remaking-Miniter-Using-React-part-four","webpackCompilationHash":"f77f954adcf779fa233d","result":{"data":{"markdownRemark":{"id":"ae91c3ee-6a0d-5628-bf8c-fd038a1194f7","html":"<p>React event handlers are slighlty different from HTML event handlers</p>\n<h1 id=\"1-react-events-are-named-using-camelcase-and-pass-a-function-as-the-event-handler-using-jsx\"><a href=\"#1-react-events-are-named-using-camelcase-and-pass-a-function-as-the-event-handler-using-jsx\" aria-label=\"1 react events are named using camelcase and pass a function as the event handler using jsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. React events are named using camelCase and pass a function as the event handler using JSX</h1>\n<p>notice the difference below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//HTML\n&lt;button onclick=&quot;activateLasers()&quot;&gt;\n  Activate Lasers\n&lt;/button&gt;\n\n//React\n&lt;button onClick={activateLasers}&gt;\n  Activate Lasers\n&lt;/button&gt;</code></pre></div>\n<h1 id=\"2-call-eventpreventdefault-explicitly-to-prevent-default-behavior\"><a href=\"#2-call-eventpreventdefault-explicitly-to-prevent-default-behavior\" aria-label=\"2 call eventpreventdefault explicitly to prevent default behavior permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Call event.preventDefault() explicitly to prevent default behavior</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log(&#39;The link was clicked.&#39;);\n  }\n\n  return (\n    &lt;a href=&quot;#&quot; onClick={handleClick}&gt;\n      Click me\n    &lt;/a&gt;\n  );\n}</code></pre></div>\n<h1 id=\"3-binding-this\"><a href=\"#3-binding-this\" aria-label=\"3 binding this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. binding <code class=\"language-text\">this</code></h1>\n<p>since event handlers are added as a method on a class, binding is required in order to make <code class=\"language-text\">this</code>work in callback functions. Otherwise, when a callback function receives <code class=\"language-text\">this</code>, the <code class=\"language-text\">this</code> will be <code class=\"language-text\">window</code> instead of the class to which the method belongs.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state =&gt; ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      &lt;button onClick={this.handleClick}&gt;\n        {this.state.isToggleOn ? &#39;ON&#39; : &#39;OFF&#39;}\n      &lt;/button&gt;\n    );\n  }\n}\n\nReactDOM.render(\n  &lt;Toggle /&gt;,\n  document.getElementById(&#39;root&#39;)\n);</code></pre></div>\n<p>if you build a habit of writing the method in an ES6 format, binding is not necessary.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//ES6 example I\nclass LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.\n  // Warning: this is *experimental* syntax.\n  handleClick = () =&gt; {\n    console.log(&#39;this is:&#39;, this);\n  }\n\n  render() {\n    return (\n      &lt;button onClick={this.handleClick}&gt;\n        Click me\n      &lt;/button&gt;\n    );\n  }\n}\n\n//ES6 exmample II\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log(&#39;this is:&#39;, this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick\n    return (\n      &lt;button onClick={(e) =&gt; this.handleClick(e)}&gt;\n        Click me\n      &lt;/button&gt;\n    );\n  }\n}</code></pre></div>\n<p>However, the problem with the above syntax is that a different callback is created each time <code class=\"language-text\">LoggingButton</code> renders. If this callback is passed as a prop to lower components, it might do an extra re-rendering, which would decrease the efficiency of your code. So binding is recommended.</p>\n<h1 id=\"4-passing-arguments-to-event-handlers\"><a href=\"#4-passing-arguments-to-event-handlers\" aria-label=\"4 passing arguments to event handlers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Passing arguments to event handlers</h1>\n<p>Either way is fine</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button onClick={(e) =&gt; this.deleteRow(id, e)}&gt;Delete Row&lt;/button&gt;\n&lt;button onClick={this.deleteRow.bind(this, id)}&gt;Delete Row&lt;/button&gt;</code></pre></div>","fields":{"slug":"/posts/React-Remaking-Miniter-Using-React-part-four","tagSlugs":["/tag/react/","/tag/css/","/tag/javascript/"]},"frontmatter":{"date":"2019-06-25T17:56:37.121Z","description":"Remaking Miniter Using React","tags":["react","css","javascript"],"title":"React[04]Remaking Miniter Using React IV - Handling Events"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/React-Remaking-Miniter-Using-React-part-four"}}}