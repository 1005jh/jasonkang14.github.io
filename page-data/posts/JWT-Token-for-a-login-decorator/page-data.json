{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/JWT-Token-for-a-login-decorator","webpackCompilationHash":"48bd45191fec93802d5f","result":{"data":{"markdownRemark":{"id":"d7ebc17d-79b8-5f03-bb92-fe5898c0ca22","html":"<p>Using a <code class=\"language-text\">JWT</code> token for a <code class=\"language-text\">login decorator</code>is similar to checking hashed password. You just have to use a method to <code class=\"language-text\">decode</code> the token to see if a <code class=\"language-text\">payload</code> or <code class=\"language-text\">key</code> you used to <code class=\"language-text\">encode</code> your token is retrieved.</p>\n<p><code class=\"language-text\">jwt.decode(encoded_jwt, &#39;secret&#39;, algorithms=[&#39;HS256&#39;])</code></p>\n<p>This is all that is to it, and it is really simple.\nBut the problem that I ran into while writing this was that I messed up the order of positional arguments and kept giving the <code class=\"language-text\">encoded_jwt</code> as the second argument.</p>\n<p>I tried so hard to look this up on <code class=\"language-text\">StackOverflow</code>, but couldn’t find anyone who made a stupid mistake like I did. So I fixed my code like below, and it is now working as a <code class=\"language-text\">login decorator</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json\nimport jwt\nimport db_settings\n\nfrom django.http import JsonResponse\n\ndef login_decorator(func):\n\n    def login_wrapper(self, request, *args, **kwargs):\n        token = request.headers[&quot;Authentication&quot;]\n\n        team_name = &quot;team_babKKUNG&quot;\n        key       = db_settings.LUNCHBUDDYDATABASES[&quot;jwt&quot;][&quot;KEY&quot;]\n        algorithm = &#39;HS256&#39;\n\n        check_auth = jwt.decode(token, key, algorithm)\n\n        if check_auth[&quot;iss&quot;] == team_name:\n            return func(self, request, *args, **kwargs)\n\n        else :\n            return JsonResponse({&quot;message&quot;: &quot;승인되지 않은 사용자입니다.&quot;})\n\n    return login_wrapper</code></pre></div>","fields":{"slug":"/posts/JWT-Token-for-a-login-decorator","tagSlugs":["/tag/bcrypt/","/tag/python/","/tag/django/","/tag/jwt/","/tag/decorator/"]},"frontmatter":{"date":"2019-07-05T19:27:37.121Z","description":"Implementing Authentication using JWT","tags":["bcrypt","python","django","jwt","decorator"],"title":"JWT Token for a Login Decorator"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/JWT-Token-for-a-login-decorator"}}}