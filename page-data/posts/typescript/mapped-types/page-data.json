{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript/mapped-types","webpackCompilationHash":"7a56979ddaa04d0e0b7d","result":{"data":{"markdownRemark":{"id":"a714080a-36e1-55b8-b6d0-34321c680e04","html":"<p>Mapped types allow you to map each property in a type in the same way. Think about the <code class=\"language-text\">map</code> function which you can use with a JavaScript array. By using the <code class=\"language-text\">map</code> function, you are doing the same task to each propertiesâ€”like multiplying all of them by the factor of 3.</p>\n<p>By <code class=\"language-text\">mapping</code> your type, you can make all propeties of type <code class=\"language-text\">readonly</code> or <code class=\"language-text\">optional</code>.</p>\n<p>In old format, you would do something like below if you want to make each property optional or readonly;</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// optional</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CartItem</span> <span class=\"token punctuation\">{</span>\n  totalPrice<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  rewardPoints<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  id<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// readonly</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CartItem</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> totalPrice<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> rewardPoints<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> count<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With <strong>mapped types</strong>, you can do it like below. <code class=\"language-text\">T</code> represents Type/Interface and <code class=\"language-text\">P</code> properties</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> ReadOnly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And use the mapped type like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> CartItemPartial <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>CartItem<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> ReadonlyCartItem <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>CartItem<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can add members using an intersection type and a mapped type together</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> PartialWithNewMember<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> newMember<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Keys <span class=\"token operator\">=</span> <span class=\"token string\">\"option1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"option2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Flags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> Keys<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/typescript/mapped-types","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2020-01-03T13:27:37.121Z","description":"TypeScript, mapped types explained","tags":["typescript"],"title":"TypeScript - Mapped Types"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/typescript/mapped-types"}}}