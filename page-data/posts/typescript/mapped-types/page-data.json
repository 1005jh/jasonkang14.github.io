{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript/mapped-types","webpackCompilationHash":"9907854c30defd3fefcc","result":{"data":{"markdownRemark":{"id":"939ebc83-baeb-505b-a731-9094b7f66413","html":"<p>Mapped types allow you to map each property in a type in the same way. Think about the <code class=\"language-text\">map</code> function which you can use with a JavaScript array. By using the <code class=\"language-text\">map</code> function, you are doing the same task to each propertiesâ€”like multiplying all of them by the factor of 3.</p>\n<p>By <code class=\"language-text\">mapping</code> your type, you can make all propeties of type <code class=\"language-text\">readonly</code> or <code class=\"language-text\">optional</code>.</p>\n<p>In old format, you would do something like below if you want to make each property optional or readonly;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// optional\ninterface CartItem {\n    totalPrice?: number\n    rewardPoints?: number\n    id?: number\n    count?: number\n}\n\n// readonly\ninterface CartItem {\n    readonly totalPrice: number\n    readonly rewardPoints: number\n    readonly id: number\n    readonly count: number\n}</code></pre></div>\n<p>With <strong>mapped types</strong>, you can do it like below. <code class=\"language-text\">T</code> represents Type/Interface and <code class=\"language-text\">P</code> properties</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type ReadOnly&lt;T&gt; = {\n    readonly [P in keyof T]: T[P]\n}\n\ntype Partial&lt;T&gt; = {\n    [P in keyof T]?: T[P]\n}</code></pre></div>\n<p>And use the mapped type like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type CartItemPartial = Partial&lt;CartItem&gt;\ntype ReadonlyCartItem = Readonly&lt;CartItem&gt;</code></pre></div>\n<p>You can add members using an intersection type and a mapped type together</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type PartialWithNewMember&lt;T&gt; = {\n    [P in keyof T]&gt; : T[P];\n} &amp; { newMember: boolean}\n\ntype Keys = &quot;option1&quot; | &quot;option2&quot;;\ntype Flags = { [K in Keys]: boolean };</code></pre></div>","fields":{"slug":"/posts/typescript/mapped-types","tagSlugs":["/tag/typescript/","/tag/type/","/tag/mapped/"]},"frontmatter":{"date":"2020-01-03T13:27:37.121Z","description":"TypeScript, mapped types explained","tags":["typescript","type","mapped"],"title":"TypeScript - Mapped Types"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/typescript/mapped-types"}}}