{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript/conditional-types","webpackCompilationHash":"7e4880a7e00b88d315d3","result":{"data":{"markdownRemark":{"id":"0def7dac-d09b-5a1c-b424-dac119c70af0","html":"<p><strong>This is a summary of the <a href=\"https://typesriptlang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official document</a></strong></p>\n<p>Conditional types are very self-explanatory. Depending on its condition, the type can be either one or the other.</p>\n<p><code class=\"language-text\">T extends U ? X: Y</code></p>\n<p>T is assignable to U the type is X, otherwise the type is Y.</p>\n<p>This could be written like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface Foo {\n  propA: boolean;\n  propB: boolean;\n}\n\ndeclare function f&lt;T&gt;(x: T): T extends Foo ? string : number;\n\nfunction foo&lt;U&gt;(x: U) {\n  // Has type &#39;U extends Foo ? string : number&#39;\n  let a = f(x);\n\n  // This assignment is allowed though!\n  let b: string | number = a;\n}</code></pre></div>\n<p>In the code above, the variable <code class=\"language-text\">a</code> has a conditional type. However no type has been assigned to it. When another piece of code ends up calling foo, it will substitute in U with some other type, and TypeScript will re-evaluate the conditional type, deciding whether it can actually pick a branch.</p>","fields":{"slug":"/posts/typescript/conditional-types","tagSlugs":["/tag/typescript/","/tag/type/","/tag/conditional/"]},"frontmatter":{"date":"2020-01-04T13:27:37.121Z","description":"TypeScript, conditional types explained","tags":["typescript","type","conditional"],"title":"TypeScript - Conditional Types"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/typescript/conditional-types"}}}