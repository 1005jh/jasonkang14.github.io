{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript/conditional-types","webpackCompilationHash":"d6cce922851fe0da636d","result":{"data":{"markdownRemark":{"id":"0def7dac-d09b-5a1c-b424-dac119c70af0","html":"<p><strong>This is a summary of the <a href=\"https://typesriptlang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official document</a></strong></p>\n<p>Conditional types are very self-explanatory. Depending on its condition, the type can be either one or the other.</p>\n<p><code class=\"language-text\">T extends U ? X: Y</code></p>\n<p>A conditional type T is either X, or, Y, or deferred depending on one or more type variables. The type of T depends on whether the type system has enough information to conclude that T is always assignable to U.</p>\n<p>Look at the example below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">declare function f&lt;T extends boolean&gt;(x: T): T extends true ? string : number;\n\nlet x = f(Math.random() &lt; 0.5 )</code></pre></div>\n<p>If I were to examine the code above, type T could be either <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, or deferred. And it depends on whether the type system has enough information to conclude that T is always assignable to <code class=\"language-text\">true</code> in this case.</p>\n<p>if <code class=\"language-text\">Math.random()</code> is a number less than 0.5, the type T is <code class=\"language-text\">number</code>.</p>","fields":{"slug":"/posts/typescript/conditional-types","tagSlugs":["/tag/typescript/","/tag/type/","/tag/conditional/"]},"frontmatter":{"date":"2020-01-04T13:27:37.121Z","description":"TypeScript, conditional types explained","tags":["typescript","type","conditional"],"title":"TypeScript - Conditional Types"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/typescript/conditional-types"}}}