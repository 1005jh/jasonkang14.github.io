{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript/different-types-of-typescript","webpackCompilationHash":"d6cce922851fe0da636d","result":{"data":{"markdownRemark":{"id":"01e44268-d217-5db9-993d-77ecb9a77334","html":"<ol>\n<li>Array</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const values: number[] = [1, 2, 3];\nconst values2: Array&lt;number&gt; = [1, 2, 3];\nvalues.push(&#39;a&#39;);      // TypeError</code></pre></div>\n<p>You cannot push a string into an array declared as an array of numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const data: [string, number] = [msg, size];\ndata[0].substr(1);\ndata[1].substr(1); // TypeError</code></pre></div>\n<p>You cannot use a string method on a number.</p>\n<ol start=\"2\">\n<li>null vs undefined</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let v1: undefined = undefined;\nlet v2: null = null;\nv1 = 123; // TypeError\n\nlet v3: number | undefined = undefined;\nv3 = 123;</code></pre></div>\n<p>You cannot assign a number to a variable of undefined type.\n<code class=\"language-text\">undefined</code> and <code class=\"language-text\">null</code> can be used with other types to declare a variable as a union type, which is used with <code class=\"language-text\">|</code>.</p>\n<ol start=\"3\">\n<li>Literal type</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let v1: 10 | 20 | 30;\nv1 = 10;\nv1 = 15; // TypeError\n\nlet v2: &#39;police&#39; | &#39;firefighter&#39;\nlet v2 = &#39;doctor&#39; // TypeError</code></pre></div>\n<p>When you declare a variable with a certain value, the value becomes its literal type. <code class=\"language-text\">v1</code> can be 10, 20, or 30, and <code class=\"language-text\">v2</code> can be only either ‘police’ or ‘firefighter’</p>\n<ol start=\"4\">\n<li>any type\nany can be anything. it could be either a number or a string. Any type also could be a function. If you are trying to use TypeScript to change codes which have been written in JavaScript, it is helpful to use <code class=\"language-text\">any</code> type. But if you use it too much, it defeats the purpose of using TypeScript.</li>\n<li>void vs never\nIf a function does not return anything, it could be declared <code class=\"language-text\">void</code>. And if a function stops due to an exception or does not stop due to an infitie loop, it can be declared <code class=\"language-text\">never</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function f1(): void {\n    console.log(&#39;hello&#39;)    // this function does not return anything\n}\n\nfunction f2(): never {\n    throw new Error(&#39;some error&#39;);   // this function stops due to an exception/error\n}\n\nfunction f3(): never {\n    while (true) {\n        ...          // this function has an infinite loop\n    }\n}</code></pre></div>\n<ol start=\"6\">\n<li>Object</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let v: obejct;\nv = {\n    name: &#39;abc;\n};\n\nconsole.log(v.prop1);   // TypeError</code></pre></div>\n<p>Since there is no information about the object property, it throws a TypeError. If you want to declare a type with information about properties included, you have to use interface, which will be explained later.</p>\n<ol start=\"7\">\n<li>Intersection Type and Union Type\nIntersection Type is declared with <code class=\"language-text\">&amp;</code> and Union Type is declared with <code class=\"language-text\">|</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let v1: (1 | 3 | 5) &amp; (3 | 5 | 7);\nv1 = 3;\nv1 = 1; // TypeError</code></pre></div>\n<p><code class=\"language-text\">v1</code> can be either 3 or 5 and nothing else.</p>\n<ol start=\"8\">\n<li>Giving a nickname to a type</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Width = number | string;\nlet width: Width;\nwidth = 100;\nwidth = &#39;100px&#39;;</code></pre></div>\n<p>You are assigning <code class=\"language-text\">number | string</code> to a type variable <code class=\"language-text\">Width</code>. As a variable <code class=\"language-text\">width</code> is declared with the type of <code class=\"language-text\">Width</code>, the variable can be either number or string.</p>\n<ol start=\"9\">\n<li>enum type</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enum Fruit {\n    Apple,\n    Banana,\n    Orange,\n}\n\nconst v1: Fruit = Fruit.Apple;\nconst v2: Fruit.Apple | Fruit.Banana = Fruit.Banana;</code></pre></div>\n<p>You declare Fruit by using <code class=\"language-text\">enum</code> type. <code class=\"language-text\">v1</code> has the type of <code class=\"language-text\">Fruit</code> and has been assigned with the value <code class=\"language-text\">Fruit.Apple</code>, and <code class=\"language-text\">v2</code> has the type of <code class=\"language-text\">Fruit.Apple</code>. I think</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enum Fruit {\n    Apple,\n    Banana = 5,\n    Orange,\n}\nconsole.log(Fruit.Apple, Fruit.Banana, Fruit.Orange); // 0, 5, 6</code></pre></div>\n<p>If you do not assign anything to an element of <code class=\"language-text\">enum</code> type, <code class=\"language-text\">0/zero</code> is automatically assigned to it. And if you assign a number to an element, the next element gets a number which is greater than the number assigned to the previous element—unless you declare it otherwise.</p>\n<p>When you compile an <code class=\"language-text\">enum</code> type variable;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var Fruit;\n(function(Fruit) {\n    Fruit[(Fruit[&#39;Apple&#39;] = 0)] = &#39;Apple&#39;;\n    Fruit[(Fruit[&#39;Banana&#39;] = 5)] = &#39;Banana&#39;;\n    Fruit[(Fruit[&#39;Orange&#39;] = 6)] = &#39;Orange&#39;;\n})(Fruit || (Fruit = {}));\nconsole.log(Fruit.Apple, Fruit.Banana, Fruit.Orange); // 0, 5, 6</code></pre></div>\n<p>the <code class=\"language-text\">enum</code> type exists as an object, and each element is mapped bi-directionally with the key and value.</p>\n<p>If you use it for run-time;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enum Fruit {\n    Apple,\n    Banana = 5,\n    Orange,\n}\n\nconsole.log(Fruit.Banana); // 5\nconsole.log(Fruit[&#39;Banana&#39;]); // 5\nconsole.log(Fruit[5]); // Banana     &lt;&lt; bi-directional mapping</code></pre></div>\n<p>But if you assign a string to an element of an <code class=\"language-text\">enum</code> type, it is uni-directionally mapped since the same string could be assigned to different elements.</p>\n<ol start=\"10\">\n<li>Function type</li>\n</ol>\n<p>In order to declare a function, you need types of parameters and returns. You can declare types of parameters and returns using a colon(:)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getInfoText(name: string, age: number): string {\n    const nameText = name.substr(0, 10);\n    const ageText = age &gt;= 35 ? &#39;senior&#39; : &#39;junior&#39;;\n    return `name: ${nameText}, age: ${ageText}`;\n}\n\nconst v1: string = getInfoText(&#39;mike&#39;, 23);\nconst v2: string = getInfoText(&#39;mile&#39;, &#39;23&#39;); // TypeError\nconst v3: number = getInfoText(&#39;mike&#39;, 23); // TypeError</code></pre></div>\n<p>the types of parameters are declared inside parenthesis, and the type of return is declared right before the curly brackets;</p>\n<p>You can declare the above function like this as well;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getInfoText: (name: string, age: number) =&gt; string = function (name, age) {\n    ...\n}</code></pre></div>\n<p>You can declare an optional parameter using a question mark like below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getInfoText(name: string, age:number, language?: string): string {\n    const nameText = name.substr(0, 10);\n    const ageText = age &gt;= 35 ? &#39;senior&#39; : &#39;junior&#39;;\n    const languageTet = language ? language.substr(0,10) : &#39;&#39;;\n    return `name: ${nameText}, age: ${ageText}, lanauge: ${languageText}`;\n}\ngetInfoText(&#39;mike&#39;, 23, &#39;ko&#39;);\ngetInfoText(&#39;mile&#39;, &#39;23&#39;); //\ngetInfoText(&#39;mike&#39;, 23, 123); // TypeError</code></pre></div>\n<p>The second case does not throw a TypeError since <code class=\"language-text\">language</code> is an optional variable. However, the third case throws a TypeError since the type of <code class=\"language-text\">language</code> has to be a string if it is used.</p>\n<p>You can also assign <code class=\"language-text\">undefined</code> buy using <code class=\"language-text\">union</code> type.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getInfoText(\n    name: string,\n    language: string | undefined,\n    age: number,\n): string {\n    ...\n}\n\ngetInfoText(&#39;mike&#39;, undefined, 23);</code></pre></div>\n<p>This does not throw a TypeError, but its usability and readability is extremely low. You can pre-assign a value to a parameter like you would do in Python. I won’t write about that here</p>\n<p>You can assign <code class=\"language-text\">this</code> type of a function as the first parameter of a function like below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getParam(this:string, index: number): string {\n    const params = this.splt(&#39;,&#39;); // TypeError\n}</code></pre></div>\n<p>The code above throws a TypeError since the type of this has been declared as string. If you do not declare the type of <code class=\"language-text\">this</code>, it would not have thrown a TypeError. And <code class=\"language-text\">index</code> here is the first parameter since <code class=\"language-text\">this</code> type is not a parameter.</p>\n<p>You use <code class=\"language-text\">interface</code> when you add a method to a primitive type like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface String {\n    getParam(this: string, index: number): string;\n}\n\nString.prototype.getParam = getParam;\nconsole.log(&#39;asdf, 1234, ok &#39;.gerParam(1));</code></pre></div>\n<p>You are adding <code class=\"language-text\">getParam</code> method to a primitive type <code class=\"language-text\">String</code> by using <code class=\"language-text\">interface</code></p>\n<ol start=\"11\">\n<li>Function Overload: declaring multiple types at once</li>\n</ol>\n<p>Since JavaScript is a Dynamically Typed Language, one functioncan have different parameter types and return types. In TypeScript, you can use function overload to declare multiple types within a single function.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function add(x: number | string, y: number | string): number | string {\n    if (typeof x === &#39;number&#39; &amp;&amp; typeof y === &#39;number&#39;) {\n        return x + y;\n    } else {\n        const result = Number(x) + Number(y);\n        return result.toString();\n    }\n}\n\nconst v1: number = add(1,2); // TypeError\nconsole.log(add(1, &#39;2&#39;));</code></pre></div>\n<p><code class=\"language-text\">const v1</code> throws a TypeError even though both parameters and return are numbers. This is because the type of the function was not declared specifically. This is how you are supposed to declare a function using <code class=\"language-text\">function overload</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functino add(x: number, y: number): number;\nfunction add(x: string, y: string): string;\nfunction add(x: number | string, y: number | string): number | string {\n    ...\n}</code></pre></div>\n<p>Basically you are declaring a function with all the possible options</p>","fields":{"slug":"/posts/typescript/different-types-of-typescript","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2019-11-07T21:27:37.121Z","description":"Types that you can declare while using TypeScript","tags":["typescript"],"title":"TypeScript - Different Types of TypeScript"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/typescript/different-types-of-typescript"}}}