{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/JWT-Token-returned-upon-login","webpackCompilationHash":"c90b07d29949c5c40757","result":{"data":{"markdownRemark":{"id":"e5b68cf0-e067-5228-9451-6e87221b3323","html":"<p><code class=\"language-text\">JWT</code> is a token that a server hands out to a user so that a user and server just exchanges the token instead of logging in every time you switch a page. After sending a <code class=\"language-text\">JWT</code> token to a user, you use a <code class=\"language-text\">login decorator</code> to check if he or she has an authentication to access a webpage.</p>\n<p>Apparently, thereâ€™s a <code class=\"language-text\">JWT</code> directly associated with <code class=\"language-text\">django</code>, but I used <code class=\"language-text\">PyJWT</code> instead.</p>\n<p>so first install <code class=\"language-text\">pyjwt</code>\n<code class=\"language-text\">pip install pyjwt</code></p>\n<p>This is the how you <code class=\"language-text\">encode</code> using <code class=\"language-text\">JWT</code>:\n<code class=\"language-text\">encoded_jwt = jwt.encode({&#39;some&#39;: &#39;payload&#39;}, &#39;secret&#39;, algorithm=&#39;HS256&#39;)</code></p>\n<ol>\n<li><code class=\"language-text\">payload</code> is some information that you want to send</li>\n<li><code class=\"language-text\">secret</code> is a key that you use when you encode</li>\n<li><code class=\"language-text\">algorithm</code> is how you want to encode your token</li>\n</ol>\n<p>So simple. It is so easy to encode, but I faced so many errors while implementing this. But the most important thing is that you have to <code class=\"language-text\">decode</code> your <code class=\"language-text\">JWT</code> token before sending it to a user.</p>\n<p>My first code was something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if bcrypt.checkpw(login_password.encode(&quot;utf-8&quot;), registered_password.encode(&quot;utf-8&quot;)):\n    payload = {\n        &quot;iss&quot;: &quot;team_babKKUNG&quot;,\n    }\n\n    key = db_settings.LUNCHBUDDYDATABASES[&quot;jwt&quot;][&quot;KEY&quot;]\n    algorithm = &#39;HS256&#39;\n\n    jwt_token = jwt.encode(payload, key, algorithm)\n    return JsonResponse({&quot;token&quot;: jwt_token})</code></pre></div>\n<p>And below is the error that I got:\n<code class=\"language-text\">Object of type bytes is not JSON serializable</code>,\nwhich is very straight forward. you have to decode it like this in order to avoid the error and successfully.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if bcrypt.checkpw(login_password.encode(&quot;utf-8&quot;), registered_password.encode(&quot;utf-8&quot;)):\n    payload = {\n        &quot;iss&quot;: &quot;team_babKKUNG&quot;,\n    }\n\n    key = db_settings.LUNCHBUDDYDATABASES[&quot;jwt&quot;][&quot;KEY&quot;]\n    algorithm = &#39;HS256&#39;\n\n    jwt_token = jwt.encode(payload, key, algorithm)\n\n    return JsonResponse({&quot;token&quot;: jwt_token.decode(&quot;utf-8&quot;)})</code></pre></div>","fields":{"slug":"/posts/JWT-Token-returned-upon-login","tagSlugs":["/tag/bcrypt/","/tag/python/","/tag/django/","/tag/jwt/"]},"frontmatter":{"date":"2019-07-04T23:27:37.121Z","description":"Implementing Authentication using JWT","tags":["bcrypt","python","django","jwt"],"title":"JWT Token Returned upon Login"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/JWT-Token-returned-upon-login"}}}