{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/DjangoApp Database Models","webpackCompilationHash":"9483a58d072124439c1f","result":{"data":{"markdownRemark":{"id":"5ad9dda4-158a-5ecf-8e87-57fc5e82f72a","html":"<h1 id=\"1-database-setup\"><a href=\"#1-database-setup\" aria-label=\"1 database setup permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Database setup</h1>\n<p><code class=\"language-text\">mysite/settings.py</code>: a normal Python module with module-level variables representing Django settings.</p>\n<p><code class=\"language-text\">INSTALLED_APPS</code>: holds the name of all Django applications that are activated in this Django instance</p>\n<p><code class=\"language-text\">migrate</code>: looks at the <code class=\"language-text\">INSTALLED_APPS</code> setting and creates any necessary database tables according to the database settings in <code class=\"language-text\">mysite/settings.py</code> file and the database migrations shipped with the app.</p>\n<h1 id=\"2-creating-models\"><a href=\"#2-creating-models\" aria-label=\"2 creating models permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Creating models</h1>\n<p>models: database layout. contains the essential fields and behaviors of the data you’re storing</p>\n<ul>\n<li><b>Question</b> has a question and a publication date</li>\n<li><b>Choice</b> has two fields: the text of the choice and a vote tally</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## polls/models.py\n\nfrom django.db import models\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(&#39;date published&#39;)\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)</code></pre></div>\n<p>Each model is represented by a class that subclasses <code class=\"language-text\">django.db.models.Model</code><br></p>\n<ul>\n<li><code class=\"language-text\">Field</code> instance such as <code class=\"language-text\">question_text</code> is the field’s name</li>\n<li>Some <code class=\"language-text\">Field</code> classes have required arguments like <code class=\"language-text\">max_length</code> for <code class=\"language-text\">CharField</code></li>\n<li><code class=\"language-text\">Fields</code> also have optional arguments like <code class=\"language-text\">default</code> for <code class=\"language-text\">IntegerField</code></li>\n<li>\n<p>a relationship is defined: <code class=\"language-text\">ForeignKey</code> tells that each <code class=\"language-text\">Choice</code> is related to a single <code class=\"language-text\">Question</code></p>\n<ul>\n<li>many-to-one, many-to-many, one-to-one</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"3-activating-models\"><a href=\"#3-activating-models\" aria-label=\"3 activating models permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Activating models</h1>\n<p>Gotta tell the project that an app is installed.</p>\n<ul>\n<li>add a reference to its configuration class in the <code class=\"language-text\">INSTALLED_APPS</code> setting.</li>\n<li>get the name of the class written in <code class=\"language-text\">polls/apps.py</code> file and add it to <code class=\"language-text\">INSTALLED_APPS</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python3 manage.py makemigrations polls</code></pre></div>\n<p><code class=\"language-text\">makemigrations</code> command makes Django realize that some changes have been made to your models and stores the changes as a migration.\n<b>Migrations</b>are how Django stores changes to models—they are just files on disk.\n<code class=\"language-text\">sqlmigrate</code> command takes migration names and returns their SQL</p>\n<ul>\n<li>Table names are automatically generated by combining the name of the apps(<b>polls</b>) and the lowercase name of the model(<b>question</b> and <b>choice</b>)</li>\n<li>Primary keys are added automatically, which can be overridden.</li>\n<li>Django appends <code class=\"language-text\">_id</code> to the foreign key field name by convention, which could be overridden</li>\n<li>The foreign key relationship is made explicit by a <code class=\"language-text\">FOREIGN KEY</code> constraint</li>\n</ul>\n<p><code class=\"language-text\">makemigrations</code> command does not actually run the migration. <code class=\"language-text\">migrate</code> command needs to be used.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python3 manage.py migrate</code></pre></div>\n<p><code class=\"language-text\">migrate</code> command</p>\n<ol>\n<li>takes all the migrations that haven’t been applied and runs them against the database.</li>\n<li>allows you to change your models over time without the need to delete database/tables and to make new ones</li>\n<li>upgrades database live without losing data</li>\n</ol>\n<h2 id=\"three-steps-guide-to-making-model-changes\"><a href=\"#three-steps-guide-to-making-model-changes\" aria-label=\"three steps guide to making model changes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Three steps guide to making model changes</h2>\n<ol>\n<li>change your models in <code class=\"language-text\">modles.py</code></li>\n<li><code class=\"language-text\">python3 manage.py makemigrations</code> to create migrations for those changes (changes in models)</li>\n<li><code class=\"language-text\">python3 manage.py migrate</code> to apply those changes to the database</li>\n</ol>","fields":{"slug":"/posts/DjangoApp Database Models","tagSlugs":["/tag/python/","/tag/django/"]},"frontmatter":{"date":"2019-06-17T15:31:37.121Z","description":"Following a Django tutorial on djangoproject.com to create a django app.","tags":["Python","Django"],"title":"Django App[02] Database, Models"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/DjangoApp Database Models"}}}