{"componentChunkName":"component---src-templates-post-template-js","path":"/typescript/index-types-explained","webpackCompilationHash":"1facbb75b243381fa13a","result":{"data":{"markdownRemark":{"id":"f0da5c3f-0972-5b00-8d46-1895b72e366b","html":"<p>It is easier to understand by looking at the code directly.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function pluck&lt;T, K extends keyof T&gt;(o: T, propertyNames: K[]): T[K][] {\n  return propertyNames.map(n =&gt; o[n]);\n}\n\ninterface Car {\n    manufacturer: string;\n    model: string;\n    year: number;\n}\n\nlet taxi: Car = {\n    manufacturer: &#39;Toyota&#39;,\n    model: &#39;Camry&#39;,\n    year: 2014\n};\n\nlet makeAndModel: string[] = pluck(taxi, [&#39;manufacturer&#39;, &#39;model&#39;]);\n\nlet modelYear = pluck(taxi, [&#39;model&#39;, &#39;year&#39;])</code></pre></div>\n<p>An object called <code class=\"language-text\">taxi</code> has an interface called <code class=\"language-text\">Car</code>. And there is a function <code class=\"language-text\">pluck</code>, which checks if the object has items in an array as its property.</p>\n<p>If you look at <code class=\"language-text\">(o: T, propertyNames: K[])</code> this section right here, the first argument is an object, which is <code class=\"language-text\">taxi</code> in this case, and the second argument is an array of strings, which are properties of the object.</p>\n<p>If you add another property like <code class=\"language-text\">owner: string</code> to the Car interface, the type <code class=\"language-text\">keyof Car</code>, or <code class=\"language-text\">keyof T</code> in this case, is automatically updated as well.</p>\n<p>The second operator is <code class=\"language-text\">T[K]</code>, which is the <strong>indexed access operator</strong>. Here <code class=\"language-text\">T</code> represents the object, and <code class=\"language-text\">K</code> represents <code class=\"language-text\">keyof T</code>, so the <code class=\"language-text\">pluck</code> function can be re-written like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function pluck&lt;T, K extends keyof T&gt;(o: T, propertyName: K): T[K] {\n    return o[propertyName]; // o[propertyName] is of type T[K]\n}</code></pre></div>","fields":{"slug":"/typescript/index-types-explained","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2020-04-12T19:53:37.121Z","description":"Explaning Index Types in TypeScript","tags":["typescript"],"title":"TypeScript - Index Types"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/index-types-explained"}}}