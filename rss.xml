<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Byeongjin Jason Kang]]></title><description><![CDATA[Developer, seeking opportunities.]]></description><link>https://jasonkang14.github.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 04 Jun 2020 14:58:37 GMT</lastBuildDate><item><title><![CDATA[Django - Query Set API]]></title><description><![CDATA[Methods you can use to make queries in Django]]></description><link>https://jasonkang14.github.io/django/query-set-api</link><guid isPermaLink="false">https://jasonkang14.github.io/django/query-set-api</guid><pubDate>Tue, 02 Jun 2020 15:53:37 GMT</pubDate><content:encoded>&lt;h3 id=&quot;exclude&quot;&gt;&lt;a href=&quot;#exclude&quot; aria-label=&quot;exclude permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;exclude()&lt;/h3&gt;
&lt;p&gt;very straight forward. you can exclude multiple properties using a comma like below
&lt;code class=&quot;language-text&quot;&gt;Entry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3), headline=&amp;#39;Hello&amp;#39;)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;order_by&quot;&gt;&lt;a href=&quot;#order_by&quot; aria-label=&quot;order_by permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;order_by()&lt;/h3&gt;
&lt;p&gt;getting a query set in an ascending or a descending order. &lt;code class=&quot;language-text&quot;&gt;order_by(id)&lt;/code&gt; will give you a query set in an ascending order, and &lt;code class=&quot;language-text&quot;&gt;order_by(-id)&lt;/code&gt; in which you use a negative sign will give you a query set in a descending order.&lt;/p&gt;
&lt;p&gt;You can add multiple parameters using a comma like below as well.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;order_by(-id, headline)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the case above, your query set will be organized in a descending order of id, and then in an ascending order of headline afterwards.&lt;/p&gt;
&lt;p&gt;You can also use a double underscore &lt;strong&gt;(__)&lt;/strong&gt; if you want to query by joining a table&lt;/p&gt;
&lt;p&gt;There are also expressions like &lt;code class=&quot;language-text&quot;&gt;asc()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;desc()&lt;/code&gt; of which roles are very straight forward. These two methods are helpful because they allow you to have &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; values at the beginning of your query set or at the end of your query set by using &lt;strong&gt;nulls_first&lt;/strong&gt; or &lt;strong&gt;nulls_last&lt;/strong&gt; arguments.&lt;/p&gt;
&lt;h3 id=&quot;reverse-and-distinct&quot;&gt;&lt;a href=&quot;#reverse-and-distinct&quot; aria-label=&quot;reverse and distinct permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;reverse() and distinct()&lt;/h3&gt;
&lt;p&gt;straight forward. &lt;strong&gt;reverse()&lt;/strong&gt; does not take any argument, but &lt;strong&gt;distinct()&lt;/strong&gt; does.&lt;/p&gt;
&lt;h3 id=&quot;values&quot;&gt;&lt;a href=&quot;#values&quot; aria-label=&quot;values permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;values()&lt;/h3&gt;
&lt;p&gt;probaly the one that is used the most. you can get a queryset of dictionaries. arguments are optional in which the entire row will be retrieved. But you can also add arguments if you want specific columns from the queryset. You can use a comma if you want to get multiple values from the query set.&lt;/p&gt;
&lt;h3 id=&quot;values_lst&quot;&gt;&lt;a href=&quot;#values_lst&quot; aria-label=&quot;values_lst permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;values_lst()&lt;/h3&gt;
&lt;p&gt;you get a query set of tuples instead of dictionaries. if you add the &lt;code class=&quot;language-text&quot;&gt;flat=True&lt;/code&gt; argument, you get a dictionary in which all the tuples are concated. if you add the &lt;code class=&quot;language-text&quot;&gt;named=True&lt;/code&gt; argument, you get named tuples instead.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - When Query Sets Are Evaluated]]></title><description><![CDATA[Django does not access the database every single time you make a query]]></description><link>https://jasonkang14.github.io/django/when-query-sets-are-evaluated</link><guid isPermaLink="false">https://jasonkang14.github.io/django/when-query-sets-are-evaluated</guid><pubDate>Sun, 31 May 2020 22:53:37 GMT</pubDate><content:encoded>&lt;p&gt;Let’s say you have this code in your django backend;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;q = Entry.objects.filter(headline__startswith=&amp;quot;What&amp;quot;)
q = q.filter(pub_date__lte=datetime.date.today())
q = q.exclude(body_text__icontains=&amp;quot;food&amp;quot;)
print(q)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks like you are accessing your database three times by using the code above. However, according to the offcial document of Django, Django access the database only once, at the last line &lt;code class=&quot;language-text&quot;&gt;print(q)&lt;/code&gt; because &lt;strong&gt;the results of a queryset aren’t fetched from the database until you **ask&lt;/strong&gt; for them**. Which means that you are asking for the data when you are trying to &lt;code class=&quot;language-text&quot;&gt;print&lt;/code&gt; it.&lt;/p&gt;
&lt;p&gt;There are some methods that you can use to have Django access the database. Some common ones are default python methods like &lt;code class=&quot;language-text&quot;&gt;repr()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;len()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;list()&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;bool()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I am going to write about QuerySet APIs in a later post&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - Query with Filter and Get]]></title><description><![CDATA[How to make a query in Django using filter abd get]]></description><link>https://jasonkang14.github.io/django/query-with-filter-and-get</link><guid isPermaLink="false">https://jasonkang14.github.io/django/query-with-filter-and-get</guid><pubDate>Mon, 25 May 2020 19:53:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt; is used when there are likely to be more than one query sets. It something like this&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;User.objects.filter(join_date__year=2020)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This query will give you all the users who has signed up for your server in the year of 2020. Your query is supposed to look like below;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;User.objects.all().filter(join_date__year=2020)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, your &lt;strong&gt;Manager&lt;/strong&gt; class allows your query to be shorter&lt;/p&gt;
&lt;p&gt;You can also add a condition to &lt;code class=&quot;language-text&quot;&gt;exclude&lt;/code&gt; certain data like below;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;User.objects.filter(join_date__year=2020).exclude(join_date__month=5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By using this, you are excluding all the users who have signed up in May.&lt;/p&gt;
&lt;p&gt;There are some methods that you can find in the django official doc. In case of filtering by number, you can use &lt;code class=&quot;language-text&quot;&gt;count__gte=30&lt;/code&gt;, which is equivalent to count greater than 30, and also &lt;code class=&quot;language-text&quot;&gt;count__lte=30&lt;/code&gt;, which would be coult less than 30.&lt;/p&gt;
&lt;p&gt;In the case of filtering by string, you can use &lt;code class=&quot;language-text&quot;&gt;headline__startswith=&amp;quot;what&amp;quot;&lt;/code&gt;, which is straight forward, and I believe there is also &lt;code class=&quot;language-text&quot;&gt;headline__endswith=&amp;quot;what&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And you would use &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; when you expect to receive only one query set. For example, if you added &lt;code class=&quot;language-text&quot;&gt;unique=True&lt;/code&gt; to an email field, you would query your user like this;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;User.objects.get(email=&amp;#39;test@email.com&amp;#39;)&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native with Styled Component]]></title><description><![CDATA[How to set up a React Native project with Styled Components]]></description><link>https://jasonkang14.github.io/react-native/how-to-set-up-styled-component</link><guid isPermaLink="false">https://jasonkang14.github.io/react-native/how-to-set-up-styled-component</guid><pubDate>Wed, 20 May 2020 21:53:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://styled-components.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Styled-Components&lt;/a&gt; is now a pretty big deal as CSS in JS has caught more attentions from web developers worldwide. I find this pretty helpful especially I might have to build a web page using React and an app using React Native. If I were to use the conventional &lt;code class=&quot;language-text&quot;&gt;StyleSheet&lt;/code&gt; for my React Native project, I would have to create a completely new css file in order to handle all the designs for my React project. So I decided to use &lt;strong&gt;styled-components&lt;/strong&gt; in order to save myself some time.&lt;/p&gt;
&lt;h2 id=&quot;1-init-your-react-native-project&quot;&gt;&lt;a href=&quot;#1-init-your-react-native-project&quot; aria-label=&quot;1 init your react native project permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Init your react-native project&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npx react-native init AwesomeTSProject --template react-native-template-typescript&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is what you would do if you were to init your project with the most recent react-native version. But I had to use 0.60.2 for my project. In that case you can do it like this.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npx react-native init AwesomeTSProject --version 0.60.2 --template react-native-template-typescript&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-install-styled-components&quot;&gt;&lt;a href=&quot;#2-install-styled-components&quot; aria-label=&quot;2 install styled components permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Install Styled Components&lt;/h2&gt;
&lt;p&gt;You have to install both the regular one and the one that supports type if you were to use TypeScript
&lt;code class=&quot;language-text&quot;&gt;yarn add styled-components @types/styled-components&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-implement-your-style-using-styled-components&quot;&gt;&lt;a href=&quot;#3-implement-your-style-using-styled-components&quot; aria-label=&quot;3 implement your style using styled components permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Implement your style using styled-components&lt;/h2&gt;
&lt;p&gt;The regular &lt;code class=&quot;language-text&quot;&gt;styled-components&lt;/code&gt; library supports a web project like React. In order to apply styled-components for your React Native project, you have to import your components from &lt;code class=&quot;language-text&quot;&gt;styled-components/native&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import styled from &amp;#39;styled-components/native&amp;#39;;

const StyledView = styled.View`
  ${props =&amp;gt;
    props.class === &amp;#39;mainOtherText&amp;#39; &amp;amp;&amp;amp;
    `
      padding-top: 104
      padding-bottom: 22
      padding-right:${props.paddingRight}
      padding-left:${props.paddingLeft}
    `}
  ${props =&amp;gt;
    props.class === undefined &amp;amp;&amp;amp;
    `
      flex-direction: ${props.flexDirection || &amp;#39;column&amp;#39;}
      background-color: ${props.backgroundColor || &amp;#39;transparent&amp;#39;}
      margin-vertical: ${props.marginVertical || 0}
      margin-horizontal: ${props.marginHorizontal || 0};
      padding-vertical: ${props.paddingVertical || 0};
      padding-horizontal: ${props.paddingHorizontal || 0};
      padding-top: ${props.paddingTop || 0}
      padding-bottom: ${props.paddingBottom || 0}
    `}
`;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have actually integrated TypeScript into my project. I will write about using TypeScript with styled-components in a later post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git - allow-unrelated-histories]]></title><description><![CDATA[How to fix an error when you try to merge unrelated branches]]></description><link>https://jasonkang14.github.io/git/allow-unrelated-histories</link><guid isPermaLink="false">https://jasonkang14.github.io/git/allow-unrelated-histories</guid><pubDate>Thu, 14 May 2020 21:53:37 GMT</pubDate><content:encoded>&lt;p&gt;To be honest with you, you should never face such problem, but I did. When I try to make my very first pull request to the develop branch, I faced an error saying, &lt;code class=&quot;language-text&quot;&gt;refusing to merge unrelated histories&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But honestly, how are they do they not share any commit histories in common? They share the same repository for sure, when whenever I push my work to the remote branch, it has been working completely fine. But when I tried to make a PR to the develop branch, I failed due to &lt;code class=&quot;language-text&quot;&gt;unrelated histories&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem was somewhat easy to solve for me in this case since all the works had been done in the feature branch. So honestly all that the develop branch had was its initial settings, so I could easily overwrite the develop branch using the &lt;code class=&quot;language-text&quot;&gt;--allow-unrelated-histories&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;It literally allows you to merge unrelated histories. I was able to merge the develop branch to the feature branch and then successfully make a PR. Another option could be a &lt;code class=&quot;language-text&quot;&gt;rebase&lt;/code&gt;, which I did not try because I was not ready to rebase over 500 commits before making a PR. Hopefully, you will manage your work well so that you won’t have to face such problem.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - Custom Authentication]]></title><description><![CDATA[How to create a custom user model and authentication method in Django]]></description><link>https://jasonkang14.github.io/django/django-custom-authentication</link><guid isPermaLink="false">https://jasonkang14.github.io/django/django-custom-authentication</guid><pubDate>Tue, 12 May 2020 21:53:37 GMT</pubDate><content:encoded>&lt;h3 id=&quot;djangos-official-documentation-about-customizing-authentication-can-be-found-here&quot;&gt;&lt;a href=&quot;#djangos-official-documentation-about-customizing-authentication-can-be-found-here&quot; aria-label=&quot;djangos official documentation about customizing authentication can be found here permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Django’s official documentation about customizing authentication can be found &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/topics/auth/customizing/#customizing-authentication-in-django&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to create custom authentication, you have to create a model. You can extend the existing &lt;strong&gt;User&lt;/strong&gt; model from &lt;code class=&quot;language-text&quot;&gt;django.contrib.auth.models&lt;/code&gt; and create an one-to-one relationship with your model and the default &lt;strong&gt;User&lt;/strong&gt; model. However, I cannot assure this because I ahve not done it myself, but I believe this would create an extra table in your database. So I have decided to substitute a custom &lt;strong&gt;User&lt;/strong&gt; model by using &lt;strong&gt;AbstractUser&lt;/strong&gt; from &lt;code class=&quot;language-text&quot;&gt;django.contrib.auth.models&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class User(AbstractUser):
    nickname      = models.CharField(max_length=15, unique=True)
    phone         = models.CharField(max_length=15, default=&amp;quot;010-1234-1234&amp;quot;, unique=True)
    date_of_birth = models.DateField()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;birthday&lt;/code&gt; could be a better name for the field, but I just decided to go with &lt;code class=&quot;language-text&quot;&gt;date_of_birth&lt;/code&gt;. Unless you create a completely new model for your &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;, the default &lt;strong&gt;User&lt;/strong&gt; object has some primary attributes like &lt;strong&gt;username&lt;/strong&gt;, &lt;strong&gt;password&lt;/strong&gt;, &lt;strong&gt;email&lt;/strong&gt;, &lt;strong&gt;first_name&lt;/strong&gt;, and &lt;strong&gt;last_name&lt;/strong&gt;. The model also has some other attributes like &lt;strong&gt;is_superuser&lt;/strong&gt;, &lt;strong&gt;is_staff&lt;/strong&gt;, and so on.&lt;/p&gt;
&lt;p&gt;Now you have to authenticate this user via a sign up request. I decided to go with a class view because I wanted to use a &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; request for sign up to check if a user with the same username, nickname, and/or email already exists.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import json

from django.http         import JsonResponse, HttpResponse
from django.views        import View
from django.contrib.auth import authenticate, login

from .models             import *                                 ## I take Align very seriously

class SignupView(View):
    def post(self, request):
        new_user_info = json.loads(request.body)
        req_username  = new_user_info[&amp;#39;username&amp;#39;]
        req_phone     = new_user_info[&amp;#39;phone&amp;#39;]
        req_email     = new_user_info[&amp;#39;email&amp;#39;]

        if User.objects.filter(username=req_username).exists():
            return JsonResponse({
                &amp;#39;message&amp;#39;: &amp;#39;USERNAME_ALREADY_EXISTS&amp;#39;
            }, status=409)

        elif User.objects.filter(phone=req_phone).exists():
            return JsonResponse({
                &amp;#39;message&amp;#39;: &amp;#39;PHONE_NUMBER_ALREADY_EXISTS&amp;#39;
            }, status=409)

        elif User.objects.filter(email=req_email).exists():
            return JsonResponse({
                &amp;#39;message&amp;#39;: &amp;#39;EMAIL_ALREADY_EXISTS&amp;#39;
            }, status=409)

        else:
            new_user = User.objects.create_user(
                username      = req_username,
                phone         = req_phone,
                email         = req_email,
                first_name    = new_user_info[&amp;#39;first_name&amp;#39;],
                last_name     = new_user_info[&amp;#39;last_name&amp;#39;],
                password      = new_user_info[&amp;#39;password&amp;#39;],
                nickname      = new_user_info[&amp;#39;nickname&amp;#39;],
                date_of_birth = new_user_info[&amp;#39;dateOfBirth&amp;#39;],
                height        = new_user_info[&amp;#39;height&amp;#39;],
                body_type     = new_user_info[&amp;#39;bodyType&amp;#39;],
                occupation    = new_user_info[&amp;#39;occupation&amp;#39;],
            )

            new_user = authenticate(username=req_username, password=new_user_info[&amp;#39;password&amp;#39;])

            return HttpResponse(status=200)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I used 409 status if a user with same info already exists because &lt;code class=&quot;language-text&quot;&gt;409 Conflict&lt;/code&gt; is used in situations &lt;strong&gt;where it is iexpected that the user might be able to resolve the conflict and resubmit the request&lt;/strong&gt;. Since the user can enter a new username, nickname, and/or email to resolve the &lt;strong&gt;conflict&lt;/strong&gt; I used 409 as the status code.&lt;/p&gt;
&lt;p&gt;After creating a user by using &lt;code class=&quot;language-text&quot;&gt;User.objects.create_user&lt;/code&gt;, you have to &lt;strong&gt;authenticate&lt;/strong&gt; the user via &lt;code class=&quot;language-text&quot;&gt;new_user = authenticate(username=req_username, password=new_user_info[&amp;#39;password&amp;#39;])&lt;/code&gt; in order to set the password. I will write about login in a later post&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - Views, Class vs Function]]></title><description><![CDATA[Explaining the difference between function-based view and class-based view]]></description><link>https://jasonkang14.github.io/django/django-views-function-vs-class-comparison</link><guid isPermaLink="false">https://jasonkang14.github.io/django/django-views-function-vs-class-comparison</guid><pubDate>Mon, 11 May 2020 23:53:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;function-based-view&quot;&gt;&lt;a href=&quot;#function-based-view&quot; aria-label=&quot;function based view permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function-Based View&lt;/h2&gt;
&lt;p&gt;Django originally had only funcion-based view, which takes a &lt;code class=&quot;language-text&quot;&gt;request&lt;/code&gt; object as an argument and returns a &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; object. I will write about those objects in a later post.&lt;/p&gt;
&lt;p&gt;The returned &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; object is usually a &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; object, which is a built-in django shortcut which can return a django template with some messages. The advantage of using a function-based view is that you know exactly what you are getting since you have to write out every single case that you are dealing with. However, it is also the downside of a function-based view is that you have to write code over and over again in order to handle every single exception. For a single login view, you might have to write out 30 lines to handle a wrong username, a wrong password, and a wrong username and wrong password, and if you have more than two fields for your login for some reason, the view would have to be a lot longer to handle every possible case.&lt;/p&gt;
&lt;h2 id=&quot;class-based-view&quot;&gt;&lt;a href=&quot;#class-based-view&quot; aria-label=&quot;class based view permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class-Based View&lt;/h2&gt;
&lt;p&gt;Class-based views were added in order to make views more concise. Since they are more concise, you now have to have a better understanding of underlying inheritance structure as the class inherits &lt;code class=&quot;language-text&quot;&gt;django.views.View&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Class-based views are Python classes, which has to classmethods of &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt;, or &lt;code class=&quot;language-text&quot;&gt;patch&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;delete&lt;/code&gt; can be also used depending on the type of API you are trying to create. And it is also easier to reuse your code when you are using class-based views. And this is the reason why class-based views were created in the first place. &lt;strong&gt;Class-based views were created in order to prevent developers from repeating their codes over and over again&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This image shows what type of views to use;
&lt;img src=&quot;https://github.com/jasonkang14/jasonkang14.github.io/static/media/class_vs_function_views.jpeg&quot; alt=&quot;what_view_to_choose&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;pros-and-cons&quot;&gt;&lt;a href=&quot;#pros-and-cons&quot; aria-label=&quot;pros and cons permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pros and Cons&lt;/h3&gt;
&lt;p&gt;Function-based views might have longer codes, but they are more straight-foward compared to class-based views. Class-based views might be more difficult to read since the codes would not be as explicit, however, you can reuse your code over and over again especially if you are using built-in generic class based views.&lt;/p&gt;
&lt;p&gt;Generic Class-Based Views seem to be the best option if you can fully understand the structure of the code. I will write about it in a later post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - Models Meta Options Part II]]></title><description><![CDATA[Django models: what you can do with Meta options]]></description><link>https://jasonkang14.github.io/django/django-models-meta-class-part-two</link><guid isPermaLink="false">https://jasonkang14.github.io/django/django-models-meta-class-part-two</guid><pubDate>Sat, 02 May 2020 18:53:37 GMT</pubDate><content:encoded>&lt;h4 id=&quot;9-permissions&quot;&gt;&lt;a href=&quot;#9-permissions&quot; aria-label=&quot;9 permissions permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. permissions&lt;/h4&gt;
&lt;p&gt;Extra permissions to enter into the permissions table when creating a model. Add, change, delete, and view permissions are automatically created for each model. This has to be a tuple like (&lt;code class=&quot;language-text&quot;&gt;permission_code&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;human_readable_permission_name&lt;/code&gt;)&lt;/p&gt;
&lt;h4 id=&quot;10-proxy&quot;&gt;&lt;a href=&quot;#10-proxy&quot; aria-label=&quot;10 proxy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. proxy&lt;/h4&gt;
&lt;p&gt;if &lt;code class=&quot;language-text&quot;&gt;proxy=True&lt;/code&gt;, this model is a proxy model. I will write about a proxy model later.&lt;/p&gt;
&lt;h4 id=&quot;11-constraints&quot;&gt;&lt;a href=&quot;#11-constraints&quot; aria-label=&quot;11 constraints permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. constraints&lt;/h4&gt;
&lt;p&gt;List of constratins you want to define on the model. like an age limit.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Customer(models.Model):
    age = models.IntegerField()

    class Meta:
        constraints = [
            models.CheckConstraint(check=models.Q(age__gte=18), name=&amp;#39;age_gte_18&amp;#39;),
        ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will write about constraints in a later post as well.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - Models Meta Options]]></title><description><![CDATA[Django models: what you can do with Meta options]]></description><link>https://jasonkang14.github.io/django/django-models-meta-class</link><guid isPermaLink="false">https://jasonkang14.github.io/django/django-models-meta-class</guid><pubDate>Thu, 30 Apr 2020 12:53:37 GMT</pubDate><content:encoded>&lt;p&gt;According to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/topics/db/models/#meta-options&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official document&lt;/a&gt;, the &lt;code class=&quot;language-text&quot;&gt;Meta&lt;/code&gt; class in a Django model is &lt;strong&gt;anything that is not a field&lt;/strong&gt;. One example I provided was &lt;code class=&quot;language-text&quot;&gt;db_table&lt;/code&gt;, which allows you to decide the name of the table instead of using the default &lt;code class=&quot;language-text&quot;&gt;myapp_modelname&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below are some examples;&lt;/p&gt;
&lt;h4 id=&quot;1-abstract&quot;&gt;&lt;a href=&quot;#1-abstract&quot; aria-label=&quot;1 abstract permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. abstract&lt;/h4&gt;
&lt;p&gt;If you set &lt;code class=&quot;language-text&quot;&gt;abstract=True&lt;/code&gt;, this model will be an &lt;strong&gt;abstract base class&lt;/strong&gt;, which can be used as a model to inherit.&lt;/p&gt;
&lt;h4 id=&quot;2-app_label&quot;&gt;&lt;a href=&quot;#2-app_label&quot; aria-label=&quot;2 app_label permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. app_label&lt;/h4&gt;
&lt;p&gt;Can be used when the model is declared outside an app declared in &lt;code class=&quot;language-text&quot;&gt;INSTALLED_APPS&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;. However, I don’t see when I would use this.&lt;/p&gt;
&lt;h4 id=&quot;3-db_tablespace&quot;&gt;&lt;a href=&quot;#3-db_tablespace&quot; aria-label=&quot;3 db_tablespace permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. db_tablespace&lt;/h4&gt;
&lt;p&gt;Default is &lt;code class=&quot;language-text&quot;&gt;DEFAULT_TABLESPACE&lt;/code&gt; setting in &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;, which is an empty string, but you can change it according to your needs. I will write a post about talespace later.&lt;/p&gt;
&lt;h4 id=&quot;4-defaultrelatedname&quot;&gt;&lt;a href=&quot;#4-defaultrelatedname&quot; aria-label=&quot;4 defaultrelatedname permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. default&lt;em&gt;related&lt;/em&gt;name&lt;/h4&gt;
&lt;p&gt;The default value for this is &lt;strong&gt;&amp;#x3C;model&lt;em&gt;name&gt;\&lt;/em&gt;set&lt;/strong&gt; as in &lt;code class=&quot;language-text&quot;&gt;membership_set&lt;/code&gt; in the post where through relationship was declared. This option also sets the &lt;code class=&quot;language-text&quot;&gt;related_query_name&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;5-getlatestby&quot;&gt;&lt;a href=&quot;#5-getlatestby&quot; aria-label=&quot;5 getlatestby permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. get&lt;em&gt;latest&lt;/em&gt;by&lt;/h4&gt;
&lt;p&gt;The name of a field or a list of field names in a model. This is usually &lt;code class=&quot;language-text&quot;&gt;DateField&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;DateTimeField&lt;/code&gt;, or &lt;code class=&quot;language-text&quot;&gt;IntegerField&lt;/code&gt;, which can be ordered numerically. This specifies the default fields to use in &lt;code class=&quot;language-text&quot;&gt;manager&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;latest()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;earliest()&lt;/code&gt; methods.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# Latest by ascending order_date.
get_latest_by = &amp;quot;order_date&amp;quot;

# Latest by priority descending, order_date ascending.
get_latest_by = [&amp;#39;-priority&amp;#39;, &amp;#39;order_date&amp;#39;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;6-managed&quot;&gt;&lt;a href=&quot;#6-managed&quot; aria-label=&quot;6 managed permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. managed&lt;/h4&gt;
&lt;p&gt;The default is &lt;code class=&quot;language-text&quot;&gt;True&lt;/code&gt;, however, if set &lt;code class=&quot;language-text&quot;&gt;False&lt;/code&gt;, django does not perform any table creation or deletion operations in this model. This is useful when this model represents an existing table or a database view that has been created by some other means. I think this would come in handy when you are migrating a project build with PHP to Django.&lt;/p&gt;
&lt;h4 id=&quot;7-orderwithrespect_to&quot;&gt;&lt;a href=&quot;#7-orderwithrespect_to&quot; aria-label=&quot;7 orderwithrespect_to permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. order&lt;em&gt;with&lt;/em&gt;respect_to&lt;/h4&gt;
&lt;p&gt;Declaring that you would like to order your jmodel with respect to aa field, ususally a &lt;code class=&quot;language-text&quot;&gt;ForeignKey&lt;/code&gt; like the example below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Question(models.Model):
    text = models.TextField()
    # ...

class Answer(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    # ...

    class Meta:
        order_with_respect_to = &amp;#39;question&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;8-ordering&quot;&gt;&lt;a href=&quot;#8-ordering&quot; aria-label=&quot;8 ordering permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. ordering&lt;/h4&gt;
&lt;p&gt;The default ordering for the example. Either a tuple or list of strings and?or query expressions. &lt;code class=&quot;language-text&quot;&gt;ordering = [&amp;#39;pub_date&amp;#39;]&lt;/code&gt;, or &lt;code class=&quot;language-text&quot;&gt;ordering = [&amp;#39;-pub_date&amp;#39;]&lt;/code&gt; if you ant a descending order. You can also use query expressions like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ordering = [F(&amp;#39;author&amp;#39;).asc(nulls_last=True)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You want to order it by a model called &lt;code class=&quot;language-text&quot;&gt;author&lt;/code&gt; in an ascending order while making null values sort last.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - Relationships Explained]]></title><description><![CDATA[Django models: relationships like Many-to-One, Many-to-Many, and One-to-One explained]]></description><link>https://jasonkang14.github.io/django/django-relationships-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/django/django-relationships-explained</guid><pubDate>Sat, 25 Apr 2020 12:53:37 GMT</pubDate><content:encoded>&lt;h3 id=&quot;many-to-one-relationships&quot;&gt;&lt;a href=&quot;#many-to-one-relationships&quot; aria-label=&quot;many to one relationships permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Many-to-One Relationships&lt;/h3&gt;
&lt;p&gt;In order to define a many-to-one relationship, you can use &lt;code class=&quot;language-text&quot;&gt;django.db.models.ForeignKey&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Manufacturer(models.Model):
    company = models.CharField(max_length=25)

class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)
    name         = models.CharField(max_length=25)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You just have to add the name of the model as an argument to the field. Make sure that the model you are referencing in your &lt;code class=&quot;language-text&quot;&gt;ForienKey&lt;/code&gt; field is delcared before. If you are creating a relationship on a model that has not yet been defined, you have to use the name of the model instead of the model object itself like below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Car(models.Model):
    manufacturer = models.ForeignKey(&amp;#39;Manufacturer&amp;#39;, on_delete=models.CASCADE)
    name         = models.CharField(max_length=25)

class Manufacturer(models.Model):
    company = models.CharField(max_length=25)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to create a recursive relationship, which is an object that has a many-to-one relationship with itself, you can use &lt;code class=&quot;language-text&quot;&gt;models.ForeignKey(&amp;#39;self&amp;#39;, on_delete=models.CASCADE)&lt;/code&gt;. An example that I have found is when an employee supervies multiple employees. An employee has a many-to-one relatiponship with multiple employees.&lt;/p&gt;
&lt;h3 id=&quot;many-to-many-relationships&quot;&gt;&lt;a href=&quot;#many-to-many-relationships&quot; aria-label=&quot;many to many relationships permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Many-to-Many Relationships&lt;/h3&gt;
&lt;p&gt;In order to define a many-to-one relationship, you can use &lt;code class=&quot;language-text&quot;&gt;ManyToManyField&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Topping(models.Model):
    name = models.CharField(max_length=25)

class Pizza(models.Model):
    toppings = models.ManyToManyField(Topping)
    name     = models.CharField(max_length=25)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like you would do with &lt;code class=&quot;language-text&quot;&gt;ForeignKey&lt;/code&gt;, you can create recursive relationships and relationships to models not yet defined.&lt;/p&gt;
&lt;p&gt;Sometimes, you might want to use an extra table in order to describe the relationship between two models by using the &lt;code class=&quot;language-text&quot;&gt;through&lt;/code&gt; argument like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=128)

    def __str__(self):
        return self.name

class Group(models.Model):
    name    = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, through=&amp;#39;Membership&amp;#39;)

    def __str__(self):
        return self.name

class Membership(models.Model):
    person        = models.ForeignKey(Person, on_delete=models.CASCADE)
    group         = models.ForeignKey(Group, on_delete=models.CASCADE)
    date_joined   = models.DateField()
    invite_reason = models.CharField(max_length=64)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Group&lt;/code&gt; model has a many-to-many relationship with the &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; model through a model called &lt;code class=&quot;language-text&quot;&gt;Membership&lt;/code&gt; which has many-to-one relationships with both &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Group&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use &lt;code class=&quot;language-text&quot;&gt;add()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;create()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;set()&lt;/code&gt; to create relationships as long as you specify &lt;code class=&quot;language-text&quot;&gt;through_defulats&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;beatles.members.add(john, through_defaults={&amp;#39;date_joined&amp;#39;: date(1960, 8, 1)})
beatles.members.create(name=&amp;quot;George Harrison&amp;quot;, through_defaults={&amp;#39;date_joined&amp;#39;: date(1960, 8, 1)})
beatles.members.set([john, paul, ringo, george], through_defaults={&amp;#39;date_joined&amp;#39;: date(1960, 8, 1)})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you call &lt;code class=&quot;language-text&quot;&gt;remove()&lt;/code&gt;, all intermediate model instances related to the model will be removed. If you call &lt;code class=&quot;language-text&quot;&gt;clear()&lt;/code&gt;, all many-to-many relationships for an instance will be deleted.&lt;/p&gt;
&lt;p&gt;f&lt;code class=&quot;language-text&quot;&gt;{modelname}_set&lt;/code&gt; like &lt;code class=&quot;language-text&quot;&gt;membership_set&lt;/code&gt; can be used in order to mane a query on &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; model&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ringos_membership = ringo.membership_set.get(group=beatles)
ringos_membership.date_joined   #  datetime.date(1962, 8, 16)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;one-to-one-relationships&quot;&gt;&lt;a href=&quot;#one-to-one-relationships&quot; aria-label=&quot;one to one relationships permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;One-to-One Relationships&lt;/h3&gt;
&lt;p&gt;In order to define a many-to-one relationship, you can use &lt;code class=&quot;language-text&quot;&gt;OneToOneField&lt;/code&gt;. This is very straight-forward. Like you would do with &lt;code class=&quot;language-text&quot;&gt;ForeignKey&lt;/code&gt;, you can create recursive relationships and relationships to models not yet defined. This is somewhat similar to inheritance, which is inheriting a previously declared model like a normal python class.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class CommonInfo(models.Model):
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()

    class Meta:
        abstract = True

class Student(CommonInfo):
    home_group = models.CharField(max_length=5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the &lt;code class=&quot;language-text&quot;&gt;Student&lt;/code&gt; model has three fields: &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;age&lt;/strong&gt;, and &lt;strong&gt;home_group&lt;/strong&gt;. And the &lt;code class=&quot;language-text&quot;&gt;CommonInfo&lt;/code&gt; class cannot be used as a normal Django model since it is an abstract base class.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django - Models Explained]]></title><description><![CDATA[Django models explained]]></description><link>https://jasonkang14.github.io/django/django-models-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/django/django-models-explained</guid><pubDate>Sun, 19 Apr 2020 22:53:37 GMT</pubDate><content:encoded>&lt;p&gt;I am trying to go through the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official documentation&lt;/a&gt; of Django and read through every aspect of it in order to build a server using Django. The first section is Models&lt;/p&gt;
&lt;h2 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;A Django model becomes a table and its rows in your database.&lt;/p&gt;
&lt;h2 id=&quot;explanation&quot;&gt;&lt;a href=&quot;#explanation&quot; aria-label=&quot;explanation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Each model is a Python class that subclasses &lt;code class=&quot;language-text&quot;&gt;django.db.models.Model&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You have just created a &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; model with fields name &lt;code class=&quot;language-text&quot;&gt;first_name&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;last_name&lt;/code&gt;. If you use a database, &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; is your table, and &lt;code class=&quot;language-text&quot;&gt;first_name&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;last_name&lt;/code&gt; are its rows. And an &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; is added automatically as a primary key for your convenience.&lt;/p&gt;
&lt;p&gt;But the name of the table becomes &lt;code class=&quot;language-text&quot;&gt;myapp_person&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;person&lt;/code&gt;. If you want to want a table called &lt;code class=&quot;language-text&quot;&gt;person&lt;/code&gt; instead, you can write your model like this by using a &lt;code class=&quot;language-text&quot;&gt;Meta&lt;/code&gt; class.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

    class Meta:
        db_table = &amp;#39;person&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After creating a model, you have to make migrations with &lt;code class=&quot;language-text&quot;&gt;manage.py makemigrations&lt;/code&gt; and then &lt;code class=&quot;language-text&quot;&gt;manage.py migrate&lt;/code&gt;. The first command creates migration files which declares what you have done with your &lt;code class=&quot;language-text&quot;&gt;models.py&lt;/code&gt; like creating a table and rows or alternating rows. And the next command applies the changes to your database.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Fields&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each field takes a certain set of field-specific arguments. Some fields requires certain arguments while others do not. I feel like it is not really worth memorizing those, so you can find the information &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/fields/#model-field-types&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Certain arguments may come to you as you write more codes. For example, a &lt;code class=&quot;language-text&quot;&gt;CharField&lt;/code&gt; requires an &lt;code class=&quot;language-text&quot;&gt;max_length&lt;/code&gt; argument. If you add &lt;code class=&quot;language-text&quot;&gt;null=True&lt;/code&gt; as an argument to a field, Django will store empty values as &lt;code class=&quot;language-text&quot;&gt;NULL&lt;/code&gt;. If you add &lt;code class=&quot;language-text&quot;&gt;blank=True&lt;/code&gt; as an argument to a field, Django will store an empty value instead of using &lt;code class=&quot;language-text&quot;&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is also an argument called &lt;code class=&quot;language-text&quot;&gt;choices&lt;/code&gt;, which is a sequence of 2-tuples. Check the example below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Person(models.Model):
    SHIRT_SIZES = (
        (&amp;#39;S&amp;#39;, &amp;#39;Small&amp;#39;),
        (&amp;#39;M&amp;#39;, &amp;#39;Medium&amp;#39;),
        (&amp;#39;L&amp;#39;, &amp;#39;Large&amp;#39;),
    )
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you make a query to a &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; class, &lt;code class=&quot;language-text&quot;&gt;person.shirt_size&lt;/code&gt; would give you S, M, or an L. If you call a function like &lt;code class=&quot;language-text&quot;&gt;person.get_shirt_size_display()&lt;/code&gt;, yow would get Small, Medium, or Large.&lt;/p&gt;
&lt;p&gt;You can also use enumeration classes like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import models

class Runner(models.Model):
    MedalType = models.TextChoices(&amp;#39;MedalType&amp;#39;, &amp;#39;GOLD, SILVER, BRONZE&amp;#39;)
    name = models.CharField(max_length=60)
    medal = models.CharField(blank=True, choices=MedalType.choices, max_length=10)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is an argument called &lt;code class=&quot;language-text&quot;&gt;verbose_name&lt;/code&gt;, which is automatically generated if you do not specify. I think you can use this as for your reference for you to help other developers what you were trying to do with this field.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TypeScript - Index Types]]></title><description><![CDATA[Explaning Index Types in TypeScript]]></description><link>https://jasonkang14.github.io/typescript/index-types-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/typescript/index-types-explained</guid><pubDate>Sun, 12 Apr 2020 19:53:37 GMT</pubDate><content:encoded>&lt;p&gt;It is easier to understand by looking at the code directly.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function pluck&amp;lt;T, K extends keyof T&amp;gt;(o: T, propertyNames: K[]): T[K][] {
  return propertyNames.map(n =&amp;gt; o[n]);
}

interface Car {
    manufacturer: string;
    model: string;
    year: number;
}

let taxi: Car = {
    manufacturer: &amp;#39;Toyota&amp;#39;,
    model: &amp;#39;Camry&amp;#39;,
    year: 2014
};

let makeAndModel: string[] = pluck(taxi, [&amp;#39;manufacturer&amp;#39;, &amp;#39;model&amp;#39;]);

let modelYear = pluck(taxi, [&amp;#39;model&amp;#39;, &amp;#39;year&amp;#39;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An object called &lt;code class=&quot;language-text&quot;&gt;taxi&lt;/code&gt; has an interface called &lt;code class=&quot;language-text&quot;&gt;Car&lt;/code&gt;. And there is a function &lt;code class=&quot;language-text&quot;&gt;pluck&lt;/code&gt;, which checks if the object has items in an array as its property.&lt;/p&gt;
&lt;p&gt;If you look at &lt;code class=&quot;language-text&quot;&gt;(o: T, propertyNames: K[])&lt;/code&gt; this section right here, the first argument is an object, which is &lt;code class=&quot;language-text&quot;&gt;taxi&lt;/code&gt; in this case, and the second argument is an array of strings, which are properties of the object.&lt;/p&gt;
&lt;p&gt;If you add another property like &lt;code class=&quot;language-text&quot;&gt;owner: string&lt;/code&gt; to the Car interface, the type &lt;code class=&quot;language-text&quot;&gt;keyof Car&lt;/code&gt;, or &lt;code class=&quot;language-text&quot;&gt;keyof T&lt;/code&gt; in this case, is automatically updated as well.&lt;/p&gt;
&lt;p&gt;The second operator is &lt;code class=&quot;language-text&quot;&gt;T[K]&lt;/code&gt;, which is the &lt;strong&gt;indexed access operator&lt;/strong&gt;. Here &lt;code class=&quot;language-text&quot;&gt;T&lt;/code&gt; represents the object, and &lt;code class=&quot;language-text&quot;&gt;K&lt;/code&gt; represents &lt;code class=&quot;language-text&quot;&gt;keyof T&lt;/code&gt;, so the &lt;code class=&quot;language-text&quot;&gt;pluck&lt;/code&gt; function can be re-written like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function pluck&amp;lt;T, K extends keyof T&amp;gt;(o: T, propertyName: K): T[K] {
    return o[propertyName]; // o[propertyName] is of type T[K]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TypeScript - Classes]]></title><description><![CDATA[Explaning classes in TypeScript]]></description><link>https://jasonkang14.github.io/typescript/classes-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/typescript/classes-explained</guid><pubDate>Tue, 07 Apr 2020 19:53:37 GMT</pubDate><content:encoded>&lt;p&gt;Classes are a programming property used in Objected Oriented Programming. In TypeScript, you can use a &lt;code class=&quot;language-text&quot;&gt;Class&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;Interface&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Student {
    fullName: string;
    constructor(public firstName: string, public middleInitial: string, public lastName: string) {
        this.fullName = firstName + &amp;quot; &amp;quot; + middleInitial + &amp;quot; &amp;quot; + lastName;
    }
}

interface Person {
    firstName: string;
    lastName: string;
}

function greeter(person: Person) {
    return &amp;quot;Hello, &amp;quot; + person.firstName + &amp;quot; &amp;quot; + person.lastName;
}

let user = new Student(&amp;quot;Jane&amp;quot;, &amp;quot;M.&amp;quot;, &amp;quot;User&amp;quot;);

document.body.textContent = greeter(user);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First you declare a class called &lt;code class=&quot;language-text&quot;&gt;Student&lt;/code&gt;. In its constructor, it takes arguments like &lt;code class=&quot;language-text&quot;&gt;firstName&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;middleInitial&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;lastName&lt;/code&gt;. The use of &lt;code class=&quot;language-text&quot;&gt;public&lt;/code&gt; on arguments indicate that you can create properties with that name.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; interface, which is the type of an argument for the function &lt;code class=&quot;language-text&quot;&gt;greeter&lt;/code&gt;, declares the types of &lt;code class=&quot;language-text&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;lastName&lt;/code&gt;. Thus ensuring the created &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt; object has the types that can be used for the &lt;code class=&quot;language-text&quot;&gt;greeter&lt;/code&gt; function.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Functional Programming with React [2]]]></title><description><![CDATA[Understanding how functional programming works with React]]></description><link>https://jasonkang14.github.io/react/functional-programming-with-react-part-two</link><guid isPermaLink="false">https://jasonkang14.github.io/react/functional-programming-with-react-part-two</guid><pubDate>Mon, 30 Mar 2020 12:53:37 GMT</pubDate><content:encoded>&lt;p&gt;Now I have a general understanding about functional prograamming, I am going to talk about why understanding functional programming is import when working on a React project.&lt;/p&gt;
&lt;h3 id=&quot;react-component&quot;&gt;&lt;a href=&quot;#react-component&quot; aria-label=&quot;react component permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Similar to a pure function which has a return value, a &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; component must have an output via &lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A component is like a function with returns an output based on its input like a pure function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React components are pure components, but more importantly, the &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; function inside a react componenet must be a pure function which always returns the same output if the input, which is &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; in this case, is the same.&lt;/p&gt;
&lt;h3 id=&quot;react-props&quot;&gt;&lt;a href=&quot;#react-props&quot; aria-label=&quot;react props permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React Props&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;React props are immutable&lt;/li&gt;
&lt;li&gt;Since React props are the input arguments of a component, their immutability avoids side effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In functional programming, functions are not supposed to change its input values. Similarly, a React component cannot change its props&lt;/p&gt;
&lt;h3 id=&quot;higher-order-components&quot;&gt;&lt;a href=&quot;#higher-order-components&quot; aria-label=&quot;higher order components permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Higher Order Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Higher Order Components(HOC) in React is similar to Higher Order Function in functional prograaming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a higher order function takes an argument and returns a function, a higher order component takes an arguments and returns a component. Simple examples are &lt;code class=&quot;language-text&quot;&gt;withRouter&lt;/code&gt; in React-router, which is used in order to transfer a user to another webpage, or &lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt; in Redux, which connects a React component to a Redux store.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Functional Programming with React [1]]]></title><description><![CDATA[Understanding basic concepts of functional programming]]></description><link>https://jasonkang14.github.io/react/functional-programming-with-react-part-one</link><guid isPermaLink="false">https://jasonkang14.github.io/react/functional-programming-with-react-part-one</guid><pubDate>Sun, 22 Mar 2020 12:53:37 GMT</pubDate><content:encoded>&lt;p&gt;On the very first page of &lt;a href=&quot;https://reactjs.org&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;reactjs.org&lt;/a&gt;, it says that &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; is &lt;strong&gt;declarative&lt;/strong&gt;, which is a major property of Functional codes.&lt;/p&gt;
&lt;p&gt;Before talking about why functional programming is important when building a project with &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt;, I want to talk about some basic concepts of functional programming.&lt;/p&gt;
&lt;h3 id=&quot;pure-function&quot;&gt;&lt;a href=&quot;#pure-function&quot; aria-label=&quot;pure function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pure Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A pure function always returns the same output if the same inputs are given.&lt;/li&gt;
&lt;li&gt;This means that a pure function does not have any side effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to understand the definition of a pure function, you need to understand what side effects are. A side effect is anything that is observable other than the return value of the function such as &lt;code class=&quot;language-text&quot;&gt;console.log()&lt;/code&gt; as it allows you to observe a state change even when the value is not the return value of a function.&lt;/p&gt;
&lt;h3 id=&quot;shared-state&quot;&gt;&lt;a href=&quot;#shared-state&quot; aria-label=&quot;shared state permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Shared State&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Shared state is any variable, object, or memory space that exists in a shared scope, or as a property of an object being passed between scopes.&lt;/li&gt;
&lt;li&gt;Shared state must be avoided in functional programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Share states could be helpful if you need to pass values to different components—like &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; in React. This is dangerous especially when the order of function execution is critical. If function B gets called before function A when a variable in function B must be updated via function A before its execution, it would lead you to a bug.&lt;/p&gt;
&lt;p&gt;By avoiding shared state, &lt;strong&gt;the timing and order of function calls do not change the result of calling the function&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;immutability&quot;&gt;&lt;a href=&quot;#immutability&quot; aria-label=&quot;immutability permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Immutability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;An immutable object is an object that cannot be modified after it is created while a mutable object can be modified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be honest, I do not completely understand why this is important with Functional Programming, but apparently the data flow of your project gets messy. I believe this is related to how a &lt;code class=&quot;language-text&quot;&gt;React state&lt;/code&gt; must be treated as &lt;strong&gt;immutable&lt;/strong&gt;. And a &lt;code class=&quot;language-text&quot;&gt;React prop&lt;/code&gt; is literally &lt;strong&gt;immutable&lt;/strong&gt;. This means that you cannot directly change a state in a React project without using &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;higher-order-function&quot;&gt;&lt;a href=&quot;#higher-order-function&quot; aria-label=&quot;higher order function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Higher Order Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Functional programming tends to reuse a common set of functional utilities to process data&lt;/li&gt;
&lt;li&gt;This is related to Higher Order Component in React, which can be reused, or used to wrap another components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A higher order function is a function whith takes a function as an argument and returns a function, or both the argument and a function.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native - How to make an Android native module]]></title><description><![CDATA[How to make an Android native module for a React-Native project]]></description><link>https://jasonkang14.github.io/react-native/how-to-make-an-android-native-module</link><guid isPermaLink="false">https://jasonkang14.github.io/react-native/how-to-make-an-android-native-module</guid><pubDate>Sun, 15 Mar 2020 22:53:37 GMT</pubDate><content:encoded>&lt;h3 id=&quot;this-is-following-an-example-from-the-official-document-with-some-of-my-personal-input&quot;&gt;&lt;a href=&quot;#this-is-following-an-example-from-the-official-document-with-some-of-my-personal-input&quot; aria-label=&quot;this is following an example from the official document with some of my personal input permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This is following an example from the &lt;a href=&quot;https://reactnative.dev/docs/native-modules-android&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official document&lt;/a&gt; with some of my personal input&lt;/h3&gt;
&lt;p&gt;Before creating a native module for a react-native project, you have to understand how react-native works for an Android app. A general tree is defined in &lt;code class=&quot;language-text&quot;&gt;AndroidManifest.xml&lt;/code&gt; like I have posted. And how the app actually works or how it is composed is declared in &lt;code class=&quot;language-text&quot;&gt;MainApplication.java&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There are two default &lt;code class=&quot;language-text&quot;&gt;java&lt;/code&gt; files in a react-native project. One is &lt;code class=&quot;language-text&quot;&gt;MainApplication.java&lt;/code&gt;, which I am going to use in order to add a native module, and the ohter is &lt;code class=&quot;language-text&quot;&gt;MainActivity.java&lt;/code&gt;, which you rarely deal with throughout your project. The only thing declared in &lt;code class=&quot;language-text&quot;&gt;MainActivity.java&lt;/code&gt; is the name of your project like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;package com.your-app-name;

import com.facebook.react.ReactActivity;

public class MainActivity extends ReactActivity {

  /**
   * Returns the name of the main component registered from JavaScript. This is used to schedule
   * rendering of the component.
   */
  @Override
  protected String getMainComponentName() {
    return &amp;quot;your-app-name&amp;quot;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And everything else is declared in &lt;code class=&quot;language-text&quot;&gt;MainApplication.java&lt;/code&gt;. When you create a native module of your own, you have to pay attention to this section right here;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    @Override
    protected List&amp;lt;ReactPackage&amp;gt; getPackages() {
        @SuppressWarnings(&amp;quot;UnnecessaryLocalVariable&amp;quot;)
        List&amp;lt;ReactPackage&amp;gt; packages = new PackageList(this).getPackages();

        // packages.add(new MyReactNativePackage());  // &amp;lt;-- this is where you are going to add your module
        return packages;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Technically, you are not adding a module to &lt;code class=&quot;language-text&quot;&gt;MainApplication.java&lt;/code&gt;. You are adding a &lt;code class=&quot;language-text&quot;&gt;package&lt;/code&gt; which includes a &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;MainApplication.java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, you create your module like this. The below example is directly from the &lt;a href=&quot;https://reactnative.dev/docs/native-modules-android&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official website&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// ToastModule.java

package com.your-app-name;

import android.widget.Toast;

import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;

import java.util.Map;
import java.util.HashMap;

public class ToastModule extends ReactContextBaseJavaModule {
// a native module is a Java class that extends ReactContextBaseJavaModule

  private static ReactApplicationContext reactContext;

  private static final String DURATION_SHORT_KEY = &amp;quot;SHORT&amp;quot;;
  private static final String DURATION_LONG_KEY = &amp;quot;LONG&amp;quot;;

  ToastModule(ReactApplicationContext context) {
    super(context);
    reactContext = context;
  }

  @Override
  public String getName() { // a ReactContextBaseJavaModule requires this method to be implemented
    return &amp;quot;ToastExample&amp;quot;; // this string represents the name of the NativeModule that you are creating
  }                        // therefore, you can access this module through React.NativeModules.ToastExample

  @Override
  public Map&amp;lt;String, Object&amp;gt; getConstants() {     // this is optional
    final Map&amp;lt;String, Object&amp;gt; constants = new HashMap&amp;lt;&amp;gt;();
    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);
    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);
    return constants;
  }

  @ReactMethod   // this decorator allows you to access this Java method with JavaScript. You will see what I mean later
  public void show(String message, int duration) {
    Toast.makeText(getReactApplicationContext(), message, duration).show();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have to create a &lt;code class=&quot;language-text&quot;&gt;package&lt;/code&gt; to register your &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// CustomToastPackage.java

package com.your-app-name;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CustomToastPackage implements ReactPackage {

  @Override
  public List&amp;lt;ViewManager&amp;gt; createViewManagers(ReactApplicationContext reactContext) {
    return Collections.emptyList();
  }

  @Override
  public List&amp;lt;NativeModule&amp;gt; createNativeModules(
                              ReactApplicationContext reactContext) {
    List&amp;lt;NativeModule&amp;gt; modules = new ArrayList&amp;lt;&amp;gt;();

    modules.add(new ToastModule(reactContext));  // Your module is added right here

    return modules;
  }

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you add the &lt;code class=&quot;language-text&quot;&gt;package&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;MainApplication.java&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;...
import com.your-app-name.CustomToastPackage; // &amp;lt;-- Add this line with your package name.
...

protected List&amp;lt;ReactPackage&amp;gt; getPackages() {
  @SuppressWarnings(&amp;quot;UnnecessaryLocalVariable&amp;quot;)
  List&amp;lt;ReactPackage&amp;gt; packages = new PackageList(this).getPackages();

  packages.add(new CustomToastPackage()); // &amp;lt;-- Add this line with your package name.
  return packages;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you create a JavaScript file to wrap the native module you have just created, which is &lt;code class=&quot;language-text&quot;&gt;React.NativeModule.ToastExample&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//ToastExample.js

import {NativeModules} from &amp;#39;react-native&amp;#39;;
module.exports = NativeModules.ToastExample;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not in the official document, but you can also do it like this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import {NativeModules} from &amp;#39;react-native&amp;#39;;

const {ToastExample} = NativeModules

export default ToastExample&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can all the &lt;code class=&quot;language-text&quot;&gt;show&lt;/code&gt; method which you have decorated with &lt;code class=&quot;language-text&quot;&gt;ReactMethod&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;ToastModule.java&lt;/code&gt; like this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import ToastExample from &amp;#39;./ToastExample&amp;#39;;

ToastExample.show(&amp;#39;Awesome&amp;#39;, ToastExample.SHORT);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shows a toast with a text &lt;code class=&quot;language-text&quot;&gt;Awesome&lt;/code&gt; when you launch your Android app&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Use Google SMTP]]></title><description><![CDATA[How to use Google SMTP, which is FREE!!]]></description><link>https://jasonkang14.github.io/server/how-to-use-google-smtp</link><guid isPermaLink="false">https://jasonkang14.github.io/server/how-to-use-google-smtp</guid><pubDate>Sun, 08 Mar 2020 22:53:37 GMT</pubDate><content:encoded>&lt;p&gt;I had to create a feature where uses report certain things to me when they find a bug in my app. Instead of making a list of reports via Google Sheet, I thought it would be easier to make them email the information to me so that I can deal with it as soon as I receive the email.&lt;/p&gt;
&lt;p&gt;Google lets you use their SMTP(Simple Mail Transfer Protocol) for free. If you are using Python, you can do it like this .&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import smtplib
import email.mime.text import MIMEText

bug     = &amp;quot;whatever the user has found&amp;quot;
content = f&amp;quot;I have found a bug == {bug}&amp;quot;

message           = MIMEText(content)
message[&amp;#39;Subject] = Bug Report
message[&amp;#39;From&amp;#39;]   = user
message[&amp;#39;To&amp;#39;]     = service_provider

gmail_address  = &amp;#39;your_gmail_account@gmail.com&amp;#39;
gmail_password = &amp;#39;your_gmail_password&amp;#39;

smtp_server = smtplib.SMTP_SSL(&amp;quot;smtp.google.com&amp;quot;, 465)
smtp_server.login(gmail_address, gmail_password)
smtp_server.sendmail(&amp;#39;user_email&amp;#39;, [&amp;#39;service_provider_email&amp;#39;], message.as_string())
smtp_server.quit()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure that the receipient email is set in the form of a python list. You can send emails to multiple users by adding items to the list.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native - AndroidManifest.xml Explained [3]]]></title><description><![CDATA[AndroidManifest.xml permissions explained]]></description><link>https://jasonkang14.github.io/react-native/androidmanifest-xml-explained-permissions</link><guid isPermaLink="false">https://jasonkang14.github.io/react-native/androidmanifest-xml-explained-permissions</guid><pubDate>Sun, 01 Mar 2020 14:53:37 GMT</pubDate><content:encoded>&lt;p&gt;An Android app requests permissions to access sensitive user data or certain system features. Each permission is identified by a unique label. This is because a central design point of the Android security architecture is that no app has permission to perform amy operations that would adversly impact other apps, the operating system, or the user.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Permission&lt;/code&gt; is declared with a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;uses-permission&amp;gt;&lt;/code&gt; tag. A default permission requested in an Android app is
&lt;code class=&quot;language-text&quot;&gt;android.permission.INTERNET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The example above is a &lt;strong&gt;normal&lt;/strong&gt; permission thus granted automatically. However, a &lt;strong&gt;dangerous&lt;/strong&gt; permision like &lt;code class=&quot;language-text&quot;&gt;SEND_SMS&lt;/code&gt; requires an explicit agreement from a user.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native - AndroidManifest.xml Explained [2]]]></title><description><![CDATA[AndroidManifest.xml app components explained]]></description><link>https://jasonkang14.github.io/react-native/androidmanifest-xml-explained-app-components</link><guid isPermaLink="false">https://jasonkang14.github.io/react-native/androidmanifest-xml-explained-app-components</guid><pubDate>Thu, 27 Feb 2020 14:53:37 GMT</pubDate><content:encoded>&lt;p&gt;For each app component like &lt;code class=&quot;language-text&quot;&gt;activity&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt; a corresponding XML element must be declared in the manifest file&lt;/p&gt;
&lt;h1 id=&quot;activities&quot;&gt;&lt;a href=&quot;#activities&quot; aria-label=&quot;activities permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Activities&lt;/h1&gt;
&lt;h3 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;An entry point for interacting with the user. It represents a single screen with a user interface&lt;/p&gt;
&lt;h3 id=&quot;explanation&quot;&gt;&lt;a href=&quot;#explanation&quot; aria-label=&quot;explanation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h3&gt;
&lt;p&gt;An email app can have two different activities: one to read emails, and the other to write an email. The two activities work together to form a cohesive user experience, but each one is independent of the others. Therefore, each activity must be declared separately. You can also add an ativity to access a camera in order to attach a picture or a video.&lt;/p&gt;
&lt;p&gt;What to consider when making an activity&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep track of the current screen to ensure the system runs the process that is hosting the current activity&lt;/li&gt;
&lt;li&gt;Know that stopped activities contain data the user may return to -&gt; store the data&lt;/li&gt;
&lt;li&gt;Help the app handle kill an activity to allow users to return to activities with their previous state restored&lt;/li&gt;
&lt;li&gt;Provide a way for apps to implement user flows betweeen each other&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;services&quot;&gt;&lt;a href=&quot;#services&quot; aria-label=&quot;services permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Services&lt;/h1&gt;
&lt;h3 id=&quot;tldr-1&quot;&gt;&lt;a href=&quot;#tldr-1&quot; aria-label=&quot;tldr 1 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;A general-purpose entry point for keeping an app running in the background&lt;/p&gt;
&lt;h3 id=&quot;explanation-1&quot;&gt;&lt;a href=&quot;#explanation-1&quot; aria-label=&quot;explanation 1 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h3&gt;
&lt;p&gt;Since a &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt; tag is used to run an Android app in the background, a &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt; tag does not provide a user inteface. For example, a &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt; tag may play some music in the background while the user is in a different app. Another component like an &lt;code class=&quot;language-text&quot;&gt;activity&lt;/code&gt; can start the &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt; and let it run or bind to it in order to interact with it.&lt;/p&gt;
&lt;p&gt;Two semantics services tell can tell tye system about how to manage an app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Started services tell the system to keep them running until their work is completed. Could be used to sync some data in the background or play music even after the user leaves the app&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Music playback is something a user is directly aware of&lt;/li&gt;
&lt;li&gt;A regular background service is something tthat a user is unaware of&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bound services run because another app or the system has said that it wants to make use of the service. It is like providing an API for an app to use in the background.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;activating-components&quot;&gt;&lt;a href=&quot;#activating-components&quot; aria-label=&quot;activating components permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Activating Components&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Activities&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;services&lt;/code&gt; are activated by an asynchronous message called an &lt;code class=&quot;language-text&quot;&gt;intent&lt;/code&gt;, which binds individual components to each other at runtime. &lt;code class=&quot;language-text&quot;&gt;Intent&lt;/code&gt; defines the action to perform and may specify the URI of the data to act on. An &lt;code class=&quot;language-text&quot;&gt;intent&lt;/code&gt; may convey a request for an &lt;code class=&quot;language-text&quot;&gt;activity&lt;/code&gt; to show an image or to open a webpage. You can also start an &lt;code class=&quot;language-text&quot;&gt;activity&lt;/code&gt; to receive a result in which case the &lt;code class=&quot;language-text&quot;&gt;activity&lt;/code&gt; also returns the reuslt in an &lt;code class=&quot;language-text&quot;&gt;intent&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;androidmanifestxml&quot;&gt;&lt;a href=&quot;#androidmanifestxml&quot; aria-label=&quot;androidmanifestxml permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AndroidManifest.xml&lt;/h1&gt;
&lt;p&gt;If a &lt;code class=&quot;language-text&quot;&gt;component&lt;/code&gt; is declared in &lt;code class=&quot;language-text&quot;&gt;AndroidManifest.xml&lt;/code&gt; without a specific package name but uses a &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt; instead, it assumes that the app’s package name must be used. An &lt;code class=&quot;language-text&quot;&gt;Intent&lt;/code&gt; object is defined with &lt;code class=&quot;language-text&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/code&gt; element in &lt;code class=&quot;language-text&quot;&gt;AndroidManifext.xml&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native - AndroidManifest.xml Explained [1]]]></title><description><![CDATA[AndroidManifest.xml package explained]]></description><link>https://jasonkang14.github.io/react-native/androidmanifest-xml-explained-package-name</link><guid isPermaLink="false">https://jasonkang14.github.io/react-native/androidmanifest-xml-explained-package-name</guid><pubDate>Thu, 20 Feb 2020 14:53:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;AndroidManifest.xml&lt;/code&gt; describes essential information about an app to the Android build tools&lt;/p&gt;
&lt;h1 id=&quot;explanation&quot;&gt;&lt;a href=&quot;#explanation&quot; aria-label=&quot;explanation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h1&gt;
&lt;p&gt;What a &lt;code class=&quot;language-text&quot;&gt;AndroidManifest.xml&lt;/code&gt; looks like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
  package=&amp;quot;com.voting_frontend&amp;quot;&amp;gt;

    &amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot; /&amp;gt;

    &amp;lt;application
      android:name=&amp;quot;.MainApplication&amp;quot;
      android:label=&amp;quot;@string/app_name&amp;quot;
      android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
      android:roundIcon=&amp;quot;@mipmap/ic_launcher&amp;quot;
      android:allowBackup=&amp;quot;false&amp;quot;
      android:usesCleartextTraffic=&amp;quot;true&amp;quot;
      android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt;
      &amp;lt;activity
        android:name=&amp;quot;.MainActivity&amp;quot;
        android:label=&amp;quot;@string/app_name&amp;quot;
        android:configChanges=&amp;quot;keyboard|keyboardHidden|orientation|screenSize&amp;quot;
        android:windowSoftInputMode=&amp;quot;adjustResize&amp;quot;&amp;gt;
        &amp;lt;intent-filter&amp;gt;
            &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;
            &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
        &amp;lt;/intent-filter&amp;gt;
      &amp;lt;/activity&amp;gt;
      &amp;lt;activity android:name=&amp;quot;com.facebook.react.devsupport.DevSettingsActivity&amp;quot; /&amp;gt;
    &amp;lt;/application&amp;gt;

&amp;lt;/manifest&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;package=&amp;quot;com.voting_frontend&amp;quot;&lt;/code&gt; is the app’s package name. The Android build tools use this to tdetermine the location of code when building an Android project. When packaging the app, the build tools replace this package name with the application ID from the Gradle build files. Google Play Store cannot publish two different apps with a same package name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Android build tools use the app name to create a &lt;code class=&quot;language-text&quot;&gt;R.java&lt;/code&gt; class like &lt;code class=&quot;language-text&quot;&gt;com.voting_frontend.R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The package name is also used for &lt;code class=&quot;language-text&quot;&gt;.MainActivity&lt;/code&gt; like &lt;code class=&quot;language-text&quot;&gt;com.voting_frontend.MainActivity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;so if you change the package name, it will throw off Android build tools when creating the APK&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;package&lt;/code&gt; value is replaced with the &lt;code class=&quot;language-text&quot;&gt;applicationId&lt;/code&gt; value in &lt;code class=&quot;language-text&quot;&gt;android/app/build.gradle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Components&lt;/code&gt; like &lt;code class=&quot;language-text&quot;&gt;activitiy&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;broadcast receiver&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;content provider&lt;/code&gt;. Each component must define basic properties such as the name of its &lt;code class=&quot;language-text&quot;&gt;Kotlin&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;Java&lt;/code&gt; class. The above example defines &lt;code class=&quot;language-text&quot;&gt;MainApplication.java&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;MainActivity.java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;permissions&lt;/code&gt; that the app needs in order to access protected parts of the system&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;hardware&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;software&lt;/code&gt; features the app requires&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[React - Higher Order Component]]></title><description><![CDATA[React higher order component explained]]></description><link>https://jasonkang14.github.io/react/higher-order-component</link><guid isPermaLink="false">https://jasonkang14.github.io/react/higher-order-component</guid><pubDate>Thu, 13 Feb 2020 14:53:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;A higher-order component is a function that takes a component and returns a new component.&lt;/p&gt;
&lt;h1 id=&quot;explanation&quot;&gt;&lt;a href=&quot;#explanation&quot; aria-label=&quot;explanation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h1&gt;
&lt;p&gt;A HOC is a wrapper that wraps a component and returns another component. The wrapper will allow you to use the same code in multiple components so that you don’t have to rewrite same codes—or similar codes—over and over again.&lt;/p&gt;
&lt;p&gt;For example, if you have a component that deals with a blog post with comments and another component with a video with subscriptions, you can reuse your codes for comments for both components without having to write a code for comments for both components. You can reuse your code for comments by wrapping such components. Because comments and subscriptions would have a similar structure.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const BlogWithComments = withComments(
  CommentList,
  (DataSource) =&amp;gt; DataSource.getComments()
);

const VideoWithSubscription = withSubscription(
  Video,
  (DataSource, props) =&amp;gt; DataSource.getVideo(props.id)
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official website&lt;/a&gt;, libraries that allow you to maintain global states like &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt; are somewhat higher order components. You wrap your components with &lt;code class=&quot;language-text&quot;&gt;connect()&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;provider()&lt;/code&gt; so that you can reuse your codes in &lt;code class=&quot;language-text&quot;&gt;store&lt;/code&gt; in various components.&lt;/p&gt;
&lt;p&gt;React also provides &lt;code class=&quot;language-text&quot;&gt;Context API&lt;/code&gt; so that you don’t have to use a third-party library. I will post about &lt;code class=&quot;language-text&quot;&gt;Context-API&lt;/code&gt; after using it in my personal project later on.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React - Reconciliation and Virtual DOM]]></title><description><![CDATA[React reconciliation to improve efficiency]]></description><link>https://jasonkang14.github.io/posts/react/reconciliation-and-virtual-dom</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/react/reconciliation-and-virtual-dom</guid><pubDate>Mon, 20 Jan 2020 13:27:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;React uses Virtual DOM before updating the real DOM, or &lt;strong&gt;reconciles&lt;/strong&gt; in order to maximize efficiency&lt;/p&gt;
&lt;h1 id=&quot;explanation&quot;&gt;&lt;a href=&quot;#explanation&quot; aria-label=&quot;explanation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h1&gt;
&lt;p&gt;React uses &lt;code class=&quot;language-text&quot;&gt;Virtual DOM&lt;/code&gt;, which is easier and faster to manipulate than &lt;code class=&quot;language-text&quot;&gt;Real DOM&lt;/code&gt;. When a state of a component changes, React updates &lt;code class=&quot;language-text&quot;&gt;Virtual DOM&lt;/code&gt; in order to apply such change then &lt;code class=&quot;language-text&quot;&gt;reconciles&lt;/code&gt;, or compares the &lt;code class=&quot;language-text&quot;&gt;Virtual DOM&lt;/code&gt; with the previous &lt;code class=&quot;language-text&quot;&gt;Virtual DOM&lt;/code&gt; and then only the changes are updated to the &lt;code class=&quot;language-text&quot;&gt;Real DOM&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, certain changes call &lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt; on the Real DOM even though the &lt;code class=&quot;language-text&quot;&gt;Virtual DOM&lt;/code&gt; does not reflect such changes due to a side effect. This is where &lt;code class=&quot;language-text&quot;&gt;shouldComponentUPdate()&lt;/code&gt; comes in to check if &lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt; must be called again. However, such operation could be difficult with deep fields.&lt;/p&gt;
&lt;p&gt;But when you use immutable objects like an array as a state, it is difficult to check whether the real DOM should be updated using &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate()&lt;/code&gt; since you have to compare every single element in order to check if the state has been changed. You also have to use methods like &lt;code class=&quot;language-text&quot;&gt;slice()&lt;/code&gt; in order to update such states because arrays are immutable.&lt;/p&gt;
&lt;p&gt;Using native methods like &lt;code class=&quot;language-text&quot;&gt;Array.slice()&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;Object.assign()&lt;/code&gt; is not too bad, however, if the size of such states are big, it would be way to expensive to re-create such states to simply check whether to update components or not.&lt;/p&gt;
&lt;p&gt;This is where &lt;code class=&quot;language-text&quot;&gt;Immer&lt;/code&gt; comes in. By updating the state using &lt;code class=&quot;language-text&quot;&gt;Immer&lt;/code&gt;, you don’t have to re-create your states. And all the changes to &lt;code class=&quot;language-text&quot;&gt;draftState&lt;/code&gt; are applied to &lt;code class=&quot;language-text&quot;&gt;newState&lt;/code&gt; when all the mutations are complete. Therefore, the efficiency would increase as well.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React - ImmerJS and Its Benefits]]></title><description><![CDATA[Basics of ImmerJS explained with its benefits]]></description><link>https://jasonkang14.github.io/posts/react/immerjs-and-its-benefits</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/react/immerjs-and-its-benefits</guid><pubDate>Wed, 15 Jan 2020 23:27:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;You don’t have to &lt;code class=&quot;language-text&quot;&gt;slice()&lt;/code&gt; your array in order to &lt;code class=&quot;language-text&quot;&gt;setState()&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;useState()&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;explanation&quot;&gt;&lt;a href=&quot;#explanation&quot; aria-label=&quot;explanation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h1&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://immerjs.github.io/immer/docs/introduction&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official document&lt;/a&gt;, &lt;code class=&quot;language-text&quot;&gt;Immer&lt;/code&gt; allows you to apply all the changes to a temporary &lt;strong&gt;draftState&lt;/strong&gt;, which is a &lt;code class=&quot;language-text&quot;&gt;proxy&lt;/code&gt; of the &lt;strong&gt;currentState&lt;/strong&gt;. When all the mutations to immutable states are completed, &lt;code class=&quot;language-text&quot;&gt;Immer&lt;/code&gt; produces the &lt;strong&gt;nextState&lt;/strong&gt; based on the mutations to the &lt;strong&gt;draftState&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From this explanation, I feel like what it is saying is this. When you have an array as a state, in order for you to change such state, you have to create a temp state using the &lt;code class=&quot;language-text&quot;&gt;slice()&lt;/code&gt; method, and then mutate the &lt;strong&gt;sliced array&lt;/strong&gt; and then apply the changes using &lt;code class=&quot;language-text&quot;&gt;setState()&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;useState()&lt;/code&gt;. However, if you use &lt;code class=&quot;language-text&quot;&gt;Immer&lt;/code&gt;, you don’t have to do this because &lt;code class=&quot;language-text&quot;&gt;Immer&lt;/code&gt; will allow you to use &lt;strong&gt;draftState&lt;/strong&gt; instead of the &lt;strong&gt;sliced array&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By looking at &lt;a href=&quot;https://immerjs.github.io/immer/docs/produce&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;producer&lt;/a&gt;, I think I am right&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import produce from &amp;quot;immer&amp;quot;

const baseState = [
    {
        todo: &amp;quot;Learn typescript&amp;quot;,
        done: true
    },
    {
        todo: &amp;quot;Try immer&amp;quot;,
        done: false
    }
]

const nextState = produce(baseState, draftState =&amp;gt; {
    draftState.push({todo: &amp;quot;Tweet about it&amp;quot;})
    draftState[1].done = true
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;by using the &lt;code class=&quot;language-text&quot;&gt;draftState&lt;/code&gt; provided by the &lt;code class=&quot;language-text&quot;&gt;producer&lt;/code&gt;, instead of &lt;code class=&quot;language-text&quot;&gt;slicing&lt;/code&gt; your array, or the &lt;code class=&quot;language-text&quot;&gt;baseState&lt;/code&gt;, you can just push the new item to the array. Like the example below from the &lt;a href=&quot;https://immerjs.github.io/immer/docs/example-setstate&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official document&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;onBirthDayClick2 = () =&amp;gt; {
    this.setState(
        produce(draft =&amp;gt; {
            draft.user.age += 1
        })
    )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TypeScript - Conditional Types]]></title><description><![CDATA[TypeScript, conditional types explained]]></description><link>https://jasonkang14.github.io/posts/typescript/conditional-types</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/typescript/conditional-types</guid><pubDate>Sat, 04 Jan 2020 13:27:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;This is a summary of the &lt;a href=&quot;https://typesriptlang.org&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official document&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Conditional types are very self-explanatory. Depending on its condition, the type can be either one or the other.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;T extends U ? X: Y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A conditional type T is either X, or, Y, or deferred depending on one or more type variables. The type of T depends on whether the type system has enough information to conclude that T is always assignable to U.&lt;/p&gt;
&lt;p&gt;Look at the example below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;declare function f&amp;lt;T extends boolean&amp;gt;(x: T): T extends true ? string : number;

let x = f(Math.random() &amp;lt; 0.5 )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I were to examine the code above, type T could be either &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt;, or deferred. And it depends on whether the type system has enough information to conclude that T is always assignable to &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; in this case.&lt;/p&gt;
&lt;p&gt;if &lt;code class=&quot;language-text&quot;&gt;Math.random()&lt;/code&gt; is a number less than 0.5, the type T is &lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TypeScript - Mapped Types]]></title><description><![CDATA[TypeScript, mapped types explained]]></description><link>https://jasonkang14.github.io/posts/typescript/mapped-types</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/typescript/mapped-types</guid><pubDate>Fri, 03 Jan 2020 13:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Mapped types allow you to map each property in a type in the same way. Think about the &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; function which you can use with a JavaScript array. By using the &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; function, you are doing the same task to each properties—like multiplying all of them by the factor of 3.&lt;/p&gt;
&lt;p&gt;By &lt;code class=&quot;language-text&quot;&gt;mapping&lt;/code&gt; your type, you can make all propeties of type &lt;code class=&quot;language-text&quot;&gt;readonly&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;optional&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In old format, you would do something like below if you want to make each property optional or readonly;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// optional
interface CartItem {
    totalPrice?: number
    rewardPoints?: number
    id?: number
    count?: number
}

// readonly
interface CartItem {
    readonly totalPrice: number
    readonly rewardPoints: number
    readonly id: number
    readonly count: number
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;strong&gt;mapped types&lt;/strong&gt;, you can do it like below. &lt;code class=&quot;language-text&quot;&gt;T&lt;/code&gt; represents Type/Interface and &lt;code class=&quot;language-text&quot;&gt;P&lt;/code&gt; properties&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;type ReadOnly&amp;lt;T&amp;gt; = {
    readonly [P in keyof T]: T[P]
}

type Partial&amp;lt;T&amp;gt; = {
    [P in keyof T]?: T[P]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And use the mapped type like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;type CartItemPartial = Partial&amp;lt;CartItem&amp;gt;
type ReadonlyCartItem = Readonly&amp;lt;CartItem&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can add members using an intersection type and a mapped type together&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;type PartialWithNewMember&amp;lt;T&amp;gt; = {
    [P in keyof T]&amp;gt; : T[P];
} &amp;amp; { newMember: boolean}

type Keys = &amp;quot;option1&amp;quot; | &amp;quot;option2&amp;quot;;
type Flags = { [K in Keys]: boolean };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Babel - How to Make a Babel Plugin]]></title><description><![CDATA[Using Babel with TypeScript]]></description><link>https://jasonkang14.github.io/posts/babel/babel-with-typescript</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/babel/babel-with-typescript</guid><pubDate>Sat, 07 Dec 2019 23:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Babel 7 supports TypeScript. Since I am pretty new to web development, I did not fully understand why people were struggling to use Babel with TypeScript. According to what I have found online, Babel did not support type check, which is a key feature of TypeScript. And TypeScript itself could do both compiling and type checking. But now Babel 7 allows TypeScript to compile faster by allowsing the TypeScript compiler to only check types wihtout emitting files&lt;/p&gt;
&lt;p&gt;Install all the necessary plugins:
&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev @babel/preset-typescript @babel/preset-env @babel/plugin-proposal-class-properties @babel/plugin-proposal-object-rest-spread&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Set up &lt;code class=&quot;language-text&quot;&gt;.babelrc&lt;/code&gt; like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;presets&amp;quot;: [
        &amp;quot;@babel/env&amp;quot;,
        &amp;quot;@babel/preset-typescript&amp;quot;
    ],
    &amp;quot;plugins&amp;quot;: [
        &amp;quot;@babel/proposal-class-properties&amp;quot;,
        &amp;quot;@babel/proposal-object-rest-spread&amp;quot;
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a &lt;code class=&quot;language-text&quot;&gt;tsconfig.json&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;compilerOptions&amp;quot;: {
    // Target latest version of ECMAScript.
    &amp;quot;target&amp;quot;: &amp;quot;esnext&amp;quot;,
    // Search under node_modules for non-relative imports.
    &amp;quot;moduleResolution&amp;quot;: &amp;quot;node&amp;quot;,
    // Process &amp;amp; infer types from .js files.
    &amp;quot;allowJs&amp;quot;: true,
    // Don&amp;#39;t emit; allow Babel to transform files.
    &amp;quot;noEmit&amp;quot;: true,
    // Enable strictest settings like strictNullChecks &amp;amp; noImplicitAny.
    &amp;quot;strict&amp;quot;: true,
    // Disallow features that require cross-file information for emit.
    &amp;quot;isolatedModules&amp;quot;: true,
    // Import non-ES modules as default imports.
    &amp;quot;esModuleInterop&amp;quot;: true
  },
  &amp;quot;include&amp;quot;: [
    &amp;quot;src&amp;quot;
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Babel - How to Make a Babel Plugin]]></title><description><![CDATA[How to make a babel plugin]]></description><link>https://jasonkang14.github.io/posts/babel/how-to-make-a-babel-plugin</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/babel/how-to-make-a-babel-plugin</guid><pubDate>Thu, 05 Dec 2019 17:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Babel provides APIs so that anyone can create a preset and plugin of their own.&lt;/p&gt;
&lt;p&gt;Babel plugin changes a code based on AST(Abstract Syntax Tree). Therefore, you have to know the structure of AST in order to create your own plugin&lt;/p&gt;
&lt;p&gt;you can found the full code on &lt;a href=&quot;https://github.com/jasonkang14/babel_practice/tree/master/test-babel-custom-plugin&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic structure of a babel plugin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exports a function with a &lt;code class=&quot;language-text&quot;&gt;types&lt;/code&gt; parameter&lt;/li&gt;
&lt;li&gt;uses the &lt;code class=&quot;language-text&quot;&gt;types&lt;/code&gt; parameter to make a node&lt;/li&gt;
&lt;li&gt;the &lt;code class=&quot;language-text&quot;&gt;types&lt;/code&gt; node is used to check the tyoe of the AST node&lt;/li&gt;
&lt;li&gt;nothing happens if you return an empty object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A babel plugin to remove console.log’s&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this is the structure of the AST of &lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;asdf&amp;#39;)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;console.log code starts with an &lt;code class=&quot;language-text&quot;&gt;ExpressionStatement&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;a code that calls a function or a method is a &lt;code class=&quot;language-text&quot;&gt;CallExpression&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;a &lt;code class=&quot;language-text&quot;&gt;MemberExpression&lt;/code&gt; node inside the &lt;code class=&quot;language-text&quot;&gt;CallExpression&lt;/code&gt; node calls a method&lt;/li&gt;
&lt;li&gt;the &lt;code class=&quot;language-text&quot;&gt;MemberExpression&lt;/code&gt; node has the information about the object and the method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A babel plugin to add console.log’s&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this is the structure of the AST of a simple function&lt;/li&gt;
&lt;li&gt;a code that declares the function is a &lt;code class=&quot;language-text&quot;&gt;FunctionDeclaration&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;the name of the function is the value of &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;all the nodes of the code of the function is inside the body of a &lt;code class=&quot;language-text&quot;&gt;BlockStatement&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;We are trying to add a &lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; at the very beginning of the array&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Babel with React?]]></title><description><![CDATA[How Bable works with React]]></description><link>https://jasonkang14.github.io/posts/babel/what-with-react</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/babel/what-with-react</guid><pubDate>Wed, 04 Dec 2019 17:53:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; uses &lt;code class=&quot;language-text&quot;&gt;JSX&lt;/code&gt;, which is a &lt;strong&gt;XML-like syntax extension for JavaScript, which allows
HTML elements to be written in JavaSCript and to be placed in the DOM.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are used to Vanilla JavaScript, you would write code like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const test = document.createElement(&amp;quot;h1&amp;quot;);
test.innerText = &amp;quot;Hello, World!&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSX allows you to change the above code like this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const test = &amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Babel allow such transformation by transpiling JSX into standard JavaScript code. The code above that you used in order to declare &lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt; is actually like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const test = React.createElement(&amp;quot;h1&amp;quot;, null, &amp;quot;Hello, World!&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; incorporates &lt;code class=&quot;language-text&quot;&gt;Babel&lt;/code&gt; using &lt;code class=&quot;language-text&quot;&gt;Webpack&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;Webpack&lt;/code&gt; is &lt;strong&gt;a package bundler for JavaScript which compiles modules into a single source, which is then rendered in the browser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you write codes with React, you &lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt; child components, which then get &lt;code class=&quot;language-text&quot;&gt;imported&lt;/code&gt; in parent components. This is also an ES6 grammar, which needs to be translated using Babel in order to be used in web browsers.&lt;/p&gt;
&lt;p&gt;When you write components in React, you create separate files for each component. By the hierarchy declared in Webpack, Webpack creates dependency graph, compiles all the files to a single code by removing all the &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt; statements using Babel, and converts JSX into standard JavaScript.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Babel - What is Babel and what does it do?]]></title><description><![CDATA[Basics of Babel and its role in web development]]></description><link>https://jasonkang14.github.io/posts/babel/what-is-babel</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/babel/what-is-babel</guid><pubDate>Tue, 03 Dec 2019 14:53:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Babel allows new features of JavaScript to work with old browsers.&lt;/p&gt;
&lt;h1 id=&quot;explanation&quot;&gt;&lt;a href=&quot;#explanation&quot; aria-label=&quot;explanation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explanation&lt;/h1&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://babeljs.io/docs/en/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official document&lt;/a&gt;, Babel is a &lt;code class=&quot;language-text&quot;&gt;toolchain that is mainly used to convert ECMAScript 2015+&lt;/code&gt; code into a backwards compatible version of JavaScript in current and older browsers or environments.&lt;/p&gt;
&lt;p&gt;For example, if a developer uses an arrow function, Babel transforms the arrow function to its old format so that the arrow function can be compatible with web browsers&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// ES6
[1,2,3].map((n) =&amp;gt; n+1);

// ES5 : Babel-transformed version
[1,2,3].map(function (n) {
    return n+1;
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JavaScript - this, apply, call, bind, arrow function]]></title><description><![CDATA[Basics of JavaScript: this, apply, call, bind, arrow function]]></description><link>https://jasonkang14.github.io/posts/javascript/this-bind-apply-call</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/javascript/this-bind-apply-call</guid><pubDate>Sat, 30 Nov 2019 12:53:37 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; is defined/determined by how a function is called.&lt;/li&gt;
&lt;li&gt;Global Context: &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; refers to the global object (&lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; in browser, &lt;code class=&quot;language-text&quot;&gt;global&lt;/code&gt; in node.js)&lt;/li&gt;
&lt;li&gt;Functional Context:&lt;/li&gt;
&lt;li&gt;if not in &lt;code class=&quot;language-text&quot;&gt;strict mode&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; refers to the global object&lt;/li&gt;
&lt;li&gt;if in &lt;code class=&quot;language-text&quot;&gt;strict mode&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; is undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function f2() {
  &amp;#39;use strict&amp;#39;; // see strict mode
  return this;
}

f2() === undefined; // true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;the above is because function &lt;code class=&quot;language-text&quot;&gt;f2&lt;/code&gt; is called directly. not as a method or a property of the &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;To set the value of this to a particular value when calling a function, use &lt;code class=&quot;language-text&quot;&gt;call()&lt;/code&gt;, or &lt;code class=&quot;language-text&quot;&gt;apply()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt; / &lt;code class=&quot;language-text&quot;&gt;call&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var obj = {a: &amp;#39;Custom&amp;#39;};

var a = &amp;#39;Global&amp;#39;;

function whatsThis() {
  return this.a;
}

whatsThis();          // &amp;#39;Global&amp;#39;
whatsThis.call(obj);  // &amp;#39;Custom&amp;#39;
whatsThis.apply(obj); // &amp;#39;Custom&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if you call a function without &lt;code class=&quot;language-text&quot;&gt;call&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; refers to the &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; object. However, if you call the same function with &lt;code class=&quot;language-text&quot;&gt;call&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt;, you set &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; as the &lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt; with which you are calling the function.&lt;/p&gt;
&lt;p&gt;if the value you are passing with &lt;code class=&quot;language-text&quot;&gt;call&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt; is not an object, the browser will use the internal method &lt;code class=&quot;language-text&quot;&gt;ToObject()&lt;/code&gt; in order to convert it to an object.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you call a function using bind like &lt;code class=&quot;language-text&quot;&gt;foo.bind(someObject)&lt;/code&gt; this is the &lt;code class=&quot;language-text&quot;&gt;someObject&lt;/code&gt; regardless of how the function is being called.&lt;/li&gt;
&lt;li&gt;but you cannot &lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt; more than once.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function f() {
  return this.a;
}

var g = f.bind({a: &amp;#39;azerty&amp;#39;});
console.log(g()); // azerty

var h = g.bind({a: &amp;#39;yoo&amp;#39;}); // bind only works once!
console.log(h()); // azerty&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;
&lt;p&gt;arrow function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you use an arrow function, you don’t have to bind this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[JavaScript - hoisting]]></title><description><![CDATA[JavaScript hoisting]]></description><link>https://jasonkang14.github.io/posts/javascript/hoisting</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/javascript/hoisting</guid><pubDate>Fri, 29 Nov 2019 17:27:37 GMT</pubDate><content:encoded>&lt;p&gt;With JavaScript hoisting, or since JavaScript hoist variables, variables can be used before declaration.&lt;/p&gt;
&lt;p&gt;So even if you call a function, before it is declared, you can still get the same result as when you call the function after its declaration.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sayHello()   // &amp;quot;hello&amp;quot;

function sayHello() {
    console.log(&amp;quot;hello&amp;quot;)
}

sayHello()   // &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So even if you call a function before its declaration, you won’t get undefined.
JavaScript hoist declartaion, but it won’t hoist initialization.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;a = 3;
console.log(a);  //  3
var a;

console.log(b);  // undefined
var b = 3;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TypeScript - Different Types of TypeScript]]></title><description><![CDATA[Types that you can declare while using TypeScript]]></description><link>https://jasonkang14.github.io/posts/typescript/different-types-of-typescript</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/typescript/different-types-of-typescript</guid><pubDate>Thu, 07 Nov 2019 21:27:37 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const values: number[] = [1, 2, 3];
const values2: Array&amp;lt;number&amp;gt; = [1, 2, 3];
values.push(&amp;#39;a&amp;#39;);      // TypeError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You cannot push a string into an array declared as an array of numbers.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const data: [string, number] = [msg, size];
data[0].substr(1);
data[1].substr(1); // TypeError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You cannot use a string method on a number.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;null vs undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let v1: undefined = undefined;
let v2: null = null;
v1 = 123; // TypeError

let v3: number | undefined = undefined;
v3 = 123;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You cannot assign a number to a variable of undefined type.
&lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; can be used with other types to declare a variable as a union type, which is used with &lt;code class=&quot;language-text&quot;&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Literal type&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let v1: 10 | 20 | 30;
v1 = 10;
v1 = 15; // TypeError

let v2: &amp;#39;police&amp;#39; | &amp;#39;firefighter&amp;#39;
let v2 = &amp;#39;doctor&amp;#39; // TypeError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you declare a variable with a certain value, the value becomes its literal type. &lt;code class=&quot;language-text&quot;&gt;v1&lt;/code&gt; can be 10, 20, or 30, and &lt;code class=&quot;language-text&quot;&gt;v2&lt;/code&gt; can be only either ‘police’ or ‘firefighter’&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;any type
any can be anything. it could be either a number or a string. Any type also could be a function. If you are trying to use TypeScript to change codes which have been written in JavaScript, it is helpful to use &lt;code class=&quot;language-text&quot;&gt;any&lt;/code&gt; type. But if you use it too much, it defeats the purpose of using TypeScript.&lt;/li&gt;
&lt;li&gt;void vs never
If a function does not return anything, it could be declared &lt;code class=&quot;language-text&quot;&gt;void&lt;/code&gt;. And if a function stops due to an exception or does not stop due to an infitie loop, it can be declared &lt;code class=&quot;language-text&quot;&gt;never&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function f1(): void {
    console.log(&amp;#39;hello&amp;#39;)    // this function does not return anything
}

function f2(): never {
    throw new Error(&amp;#39;some error&amp;#39;);   // this function stops due to an exception/error
}

function f3(): never {
    while (true) {
        ...          // this function has an infinite loop
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let v: obejct;
v = {
    name: &amp;#39;abc;
};

console.log(v.prop1);   // TypeError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since there is no information about the object property, it throws a TypeError. If you want to declare a type with information about properties included, you have to use interface, which will be explained later.&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Intersection Type and Union Type
Intersection Type is declared with &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&lt;/code&gt; and Union Type is declared with &lt;code class=&quot;language-text&quot;&gt;|&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let v1: (1 | 3 | 5) &amp;amp; (3 | 5 | 7);
v1 = 3;
v1 = 1; // TypeError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;v1&lt;/code&gt; can be either 3 or 5 and nothing else.&lt;/p&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Giving a nickname to a type&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;type Width = number | string;
let width: Width;
width = 100;
width = &amp;#39;100px&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You are assigning &lt;code class=&quot;language-text&quot;&gt;number | string&lt;/code&gt; to a type variable &lt;code class=&quot;language-text&quot;&gt;Width&lt;/code&gt;. As a variable &lt;code class=&quot;language-text&quot;&gt;width&lt;/code&gt; is declared with the type of &lt;code class=&quot;language-text&quot;&gt;Width&lt;/code&gt;, the variable can be either number or string.&lt;/p&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;enum type&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;enum Fruit {
    Apple,
    Banana,
    Orange,
}

const v1: Fruit = Fruit.Apple;
const v2: Fruit.Apple | Fruit.Banana = Fruit.Banana;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You declare Fruit by using &lt;code class=&quot;language-text&quot;&gt;enum&lt;/code&gt; type. &lt;code class=&quot;language-text&quot;&gt;v1&lt;/code&gt; has the type of &lt;code class=&quot;language-text&quot;&gt;Fruit&lt;/code&gt; and has been assigned with the value &lt;code class=&quot;language-text&quot;&gt;Fruit.Apple&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;v2&lt;/code&gt; has the type of &lt;code class=&quot;language-text&quot;&gt;Fruit.Apple&lt;/code&gt;. I think&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;enum Fruit {
    Apple,
    Banana = 5,
    Orange,
}
console.log(Fruit.Apple, Fruit.Banana, Fruit.Orange); // 0, 5, 6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not assign anything to an element of &lt;code class=&quot;language-text&quot;&gt;enum&lt;/code&gt; type, &lt;code class=&quot;language-text&quot;&gt;0/zero&lt;/code&gt; is automatically assigned to it. And if you assign a number to an element, the next element gets a number which is greater than the number assigned to the previous element—unless you declare it otherwise.&lt;/p&gt;
&lt;p&gt;When you compile an &lt;code class=&quot;language-text&quot;&gt;enum&lt;/code&gt; type variable;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var Fruit;
(function(Fruit) {
    Fruit[(Fruit[&amp;#39;Apple&amp;#39;] = 0)] = &amp;#39;Apple&amp;#39;;
    Fruit[(Fruit[&amp;#39;Banana&amp;#39;] = 5)] = &amp;#39;Banana&amp;#39;;
    Fruit[(Fruit[&amp;#39;Orange&amp;#39;] = 6)] = &amp;#39;Orange&amp;#39;;
})(Fruit || (Fruit = {}));
console.log(Fruit.Apple, Fruit.Banana, Fruit.Orange); // 0, 5, 6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the &lt;code class=&quot;language-text&quot;&gt;enum&lt;/code&gt; type exists as an object, and each element is mapped bi-directionally with the key and value.&lt;/p&gt;
&lt;p&gt;If you use it for run-time;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;enum Fruit {
    Apple,
    Banana = 5,
    Orange,
}

console.log(Fruit.Banana); // 5
console.log(Fruit[&amp;#39;Banana&amp;#39;]); // 5
console.log(Fruit[5]); // Banana     &amp;lt;&amp;lt; bi-directional mapping&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you assign a string to an element of an &lt;code class=&quot;language-text&quot;&gt;enum&lt;/code&gt; type, it is uni-directionally mapped since the same string could be assigned to different elements.&lt;/p&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;Function type&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to declare a function, you need types of parameters and returns. You can declare types of parameters and returns using a colon(:)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoText(name: string, age: number): string {
    const nameText = name.substr(0, 10);
    const ageText = age &amp;gt;= 35 ? &amp;#39;senior&amp;#39; : &amp;#39;junior&amp;#39;;
    return `name: ${nameText}, age: ${ageText}`;
}

const v1: string = getInfoText(&amp;#39;mike&amp;#39;, 23);
const v2: string = getInfoText(&amp;#39;mile&amp;#39;, &amp;#39;23&amp;#39;); // TypeError
const v3: number = getInfoText(&amp;#39;mike&amp;#39;, 23); // TypeError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the types of parameters are declared inside parenthesis, and the type of return is declared right before the curly brackets;&lt;/p&gt;
&lt;p&gt;You can declare the above function like this as well;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const getInfoText: (name: string, age: number) =&amp;gt; string = function (name, age) {
    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can declare an optional parameter using a question mark like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoText(name: string, age:number, language?: string): string {
    const nameText = name.substr(0, 10);
    const ageText = age &amp;gt;= 35 ? &amp;#39;senior&amp;#39; : &amp;#39;junior&amp;#39;;
    const languageTet = language ? language.substr(0,10) : &amp;#39;&amp;#39;;
    return `name: ${nameText}, age: ${ageText}, lanauge: ${languageText}`;
}
getInfoText(&amp;#39;mike&amp;#39;, 23, &amp;#39;ko&amp;#39;);
getInfoText(&amp;#39;mile&amp;#39;, &amp;#39;23&amp;#39;); //
getInfoText(&amp;#39;mike&amp;#39;, 23, 123); // TypeError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second case does not throw a TypeError since &lt;code class=&quot;language-text&quot;&gt;language&lt;/code&gt; is an optional variable. However, the third case throws a TypeError since the type of &lt;code class=&quot;language-text&quot;&gt;language&lt;/code&gt; has to be a string if it is used.&lt;/p&gt;
&lt;p&gt;You can also assign &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; buy using &lt;code class=&quot;language-text&quot;&gt;union&lt;/code&gt; type.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoText(
    name: string,
    language: string | undefined,
    age: number,
): string {
    ...
}

getInfoText(&amp;#39;mike&amp;#39;, undefined, 23);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does not throw a TypeError, but its usability and readability is extremely low. You can pre-assign a value to a parameter like you would do in Python. I won’t write about that here&lt;/p&gt;
&lt;p&gt;You can assign &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; type of a function as the first parameter of a function like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getParam(this:string, index: number): string {
    const params = this.splt(&amp;#39;,&amp;#39;); // TypeError
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above throws a TypeError since the type of this has been declared as string. If you do not declare the type of &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;, it would not have thrown a TypeError. And &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt; here is the first parameter since &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; type is not a parameter.&lt;/p&gt;
&lt;p&gt;You use &lt;code class=&quot;language-text&quot;&gt;interface&lt;/code&gt; when you add a method to a primitive type like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;interface String {
    getParam(this: string, index: number): string;
}

String.prototype.getParam = getParam;
console.log(&amp;#39;asdf, 1234, ok &amp;#39;.gerParam(1));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You are adding &lt;code class=&quot;language-text&quot;&gt;getParam&lt;/code&gt; method to a primitive type &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt; by using &lt;code class=&quot;language-text&quot;&gt;interface&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;Function Overload: declaring multiple types at once&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since JavaScript is a Dynamically Typed Language, one functioncan have different parameter types and return types. In TypeScript, you can use function overload to declare multiple types within a single function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function add(x: number | string, y: number | string): number | string {
    if (typeof x === &amp;#39;number&amp;#39; &amp;amp;&amp;amp; typeof y === &amp;#39;number&amp;#39;) {
        return x + y;
    } else {
        const result = Number(x) + Number(y);
        return result.toString();
    }
}

const v1: number = add(1,2); // TypeError
console.log(add(1, &amp;#39;2&amp;#39;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const v1&lt;/code&gt; throws a TypeError even though both parameters and return are numbers. This is because the type of the function was not declared specifically. This is how you are supposed to declare a function using &lt;code class=&quot;language-text&quot;&gt;function overload&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;functino add(x: number, y: number): number;
function add(x: string, y: string): string;
function add(x: number | string, y: number | string): number | string {
    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically you are declaring a function with all the possible options&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TypeScript - What Is TypeScript?]]></title><description><![CDATA[Introducing TypeScript]]></description><link>https://jasonkang14.github.io/posts/typescript/what-is-typescript</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/typescript/what-is-typescript</guid><pubDate>Wed, 06 Nov 2019 21:27:37 GMT</pubDate><content:encoded>&lt;p&gt;TypeScript is a Statically Typed Language which includes all the aspects/properties/functions of JavaScript. TypeScript is developed by Microsoft, and you can use it with &lt;code class=&quot;language-text&quot;&gt;React.js&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Statically Typed Language has a steep learning curve since you have to consider the type of a variable when you declare it. However, it is more efficient if you are working on a pretty big project.&lt;/p&gt;
&lt;p&gt;Statically Typed Lanauge is more efficient, or more productive, because all the codes are linked with one another by type. Therefore, it is easy to move around related codes, which also makes refacrtoring easier.&lt;/p&gt;
&lt;p&gt;Statically Typed Langauge allows you to face erros during compile-time, which means that you can find your error as your codes become executable, before they start running. So you can find the error as you type your code.&lt;/p&gt;
&lt;p&gt;Check out the code below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let v1 = 123;
v1 = &amp;#39;abc&amp;#39;;  // throws an error&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above throws an error since ‘abc’ is not a number. This is the advantage of TypeScript as you find your error during compile-time.&lt;/p&gt;
&lt;p&gt;You can declare a variable with different type options like below as well;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let v1: number | string = 123;
v1 = &amp;#39;abc&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above, &lt;code class=&quot;language-text&quot;&gt;v1&lt;/code&gt; is either a number or a string, so you can assign ‘abc’ to &lt;code class=&quot;language-text&quot;&gt;v1&lt;/code&gt;, and it will not throw an error&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Webpack - Basics]]></title><description><![CDATA[Webpack basics]]></description><link>https://jasonkang14.github.io/posts/webpack/basics</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/webpack/basics</guid><pubDate>Mon, 21 Oct 2019 21:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Webpack is a module bundler— a tool that takes pieces of JavaScript and their dependencies and bundles them into a single file.&lt;/p&gt;
&lt;p&gt;Module represents each resource file, and a bundle represents the final product after running webpack. One bundle is made of many modules.&lt;/p&gt;
&lt;p&gt;Webpack is required since a single-page-application uses a single HTML file which consists of a lot of JavaScript files. Those modules are bundled into a bundle using webpack.&lt;/p&gt;
&lt;p&gt;you can found the full code on &lt;a href=&quot;https://github.com/jasonkang14/babel_practice/tree/master/test-babel-custom-plugin&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Running Webpack
When you run Webpack, a &lt;code class=&quot;language-text&quot;&gt;dist&lt;/code&gt; directory is created where a &lt;code class=&quot;language-text&quot;&gt;main.js&lt;/code&gt; bundle file is created. Below is the basic structure of the bundle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the entire bundle file is an IIFE(Immediately Invoked Function Expression)&lt;/li&gt;
&lt;li&gt;runtime code is what takes care of modules. If you use multiple &lt;code class=&quot;language-text&quot;&gt;entry&lt;/code&gt; files in &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt;, a bundle file created by each &lt;code class=&quot;language-text&quot;&gt;entry&lt;/code&gt; file has a webpack runtime code.&lt;/li&gt;
&lt;li&gt;code that I wrote is used as a parameter of the IIFE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a Loader
A loader is a function that takes a module as an imput and transforms it into a format that you desire. Image files, CSS files, CSV files, or any other files can be modules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there are different types of loaders like &lt;code class=&quot;language-text&quot;&gt;babel-loader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;file-loader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;style-loader&lt;/code&gt; and so on. You have to choose the right type of loaders to deal with the file that you are trying to use.&lt;/li&gt;
&lt;li&gt;if you add an image file to a bundle, you can reduce the number of times that a browser requests for the file by using &lt;code class=&quot;language-text&quot;&gt;url-loader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;url-loader&lt;/code&gt; provides a fallback option which allows other loaders to take care of the file if the file is smaller than its limit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Plugins&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;html-webpack-plugin&lt;/code&gt; is used to update the HTML file automatically when contents are updated.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;clean-webpack-plugin&lt;/code&gt; cleans the &lt;code class=&quot;language-text&quot;&gt;dist&lt;/code&gt; directory each time webpack is ran.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DefinePlugin&lt;/code&gt; is used to replace strings in modules.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ProvidePlugin&lt;/code&gt; automatically adds previously configured modules&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[React Hooks - Rewriting Class Component Using React Hooks]]></title><description><![CDATA[React.js class component and hooks: ]]></description><link>https://jasonkang14.github.io/posts/react/class-component-and-hooks</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/react/class-component-and-hooks</guid><pubDate>Wed, 16 Oct 2019 23:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I have already written about how &lt;code class=&quot;language-text&quot;&gt;componentDidMount&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; could be replaced with &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; in React Hooks in this &lt;a href=&quot;https://jasonkang14.github.io/posts/React-Hooks-useEffect-update-when-you-want&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And instead of declaring &lt;code class=&quot;language-text&quot;&gt;this.state&lt;/code&gt; inside &lt;code class=&quot;language-text&quot;&gt;constructor()&lt;/code&gt;, you can just use &lt;code class=&quot;language-text&quot;&gt;useState()&lt;/code&gt;, which is supposed to be faster as explained in this &lt;a href=&quot;https://jasonkang14.github.io/posts/react/react-hooks-useState-explained-with-examples&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is another hook called &lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt;, which can be used to ensure that a certain function is called only when the component is called for the first time. &lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt; hook is used to remember/store the initial value.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Profile = () =&amp;gt; {
    const [name, setName] = useState(&amp;quot;jason&amp;quot;);
    const isFirstRef = useRef(true);
    if (isFirstRef.current) {
        isFirstRef.current = false;
        callApi();
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the function above, &lt;code class=&quot;language-text&quot;&gt;isFirstRef&lt;/code&gt; is initially set &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;, which is why the if clause works, and then the function &lt;code class=&quot;language-text&quot;&gt;callApi()&lt;/code&gt; gets called when the Profile component is called for the first time. However, after calling &lt;code class=&quot;language-text&quot;&gt;callApi()&lt;/code&gt;, the value of &lt;code class=&quot;language-text&quot;&gt;isFirstRef&lt;/code&gt; changes to &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;, therefore, the if clause does not work if the component gets called again.&lt;/p&gt;
&lt;p&gt;If you need to use the same logic in different components, you can create a custom hook like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// useOnFirstRender.js
const useOnFirstRender = (func) =&amp;gt; {
    const isFirstRef = useRef(true);
    if (isFirstRef.current) {
        isFirstRef.current = false;
        func();
    }
}

// Profile.js

import useOnFirstRender from &amp;#39;path&amp;#39;;

const Profile = () =&amp;gt; {
    const [name, setName] = useState(&amp;quot;jason&amp;quot;);
    useOnFirstRender(callApi);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Changing &lt;code class=&quot;language-text&quot;&gt;getDerivedStateFromProps&lt;/code&gt; is interesting. I posted about &lt;code class=&quot;language-text&quot;&gt;getDerivedStateFromProps&lt;/code&gt; &lt;a href=&quot;https://jasonkang14.github.io/posts/react/react-life-cycle-get-derived-state-from-props-with-mobx&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;. Instead of comparing a newly received props and a previously stored state as you would do in a class component, you can easily do it using &lt;code class=&quot;language-text&quot;&gt;useState()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const SpeedIndicator = ({ speed }) =&amp;gt; {
    const [isFaster, setIsFaster] = useState(false);
    const [prevSpeed, setPrevSpeed] = useState(0);

    if (speed !== prevSpeed) {
        setIsFaster(speed &amp;gt; prevSpeed);
        setPrevSpeed(speed);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The values of &lt;code class=&quot;language-text&quot;&gt;isFaster&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;prevSpeed&lt;/code&gt; changes right away as the state changes. Apprently this is slightly less efficient than using 1&lt;code class=&quot;language-text&quot;&gt;getDerivedStateFromProps&lt;/code&gt;, but it shouldn’t be too bad since it happens before forming DOM.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useDebounce&lt;/code&gt; provides a debounce, which is a higher-order function that returns another function. To be honest, I am not sure why you would use this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const useDebounce = ({ callback, ms, args }) =&amp;gt; {
    useEffect(() =&amp;gt; {
        const id = setTimeout(callback, ms);
        return () =&amp;gt; clearTimeout(id);
    }, args)
}

const Profile = () =&amp;gt; {
    let [name, setName] = useState(&amp;quot;&amp;quot;);
    let [nameTemp, setNameTemp] = useState(&amp;quot;&amp;quot;);
    useDebounce({
        callback: () =&amp;gt; setName(nameTemp),
        ms: 1000,
        args: [nameTemp],
    });
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks like, after a second, the &lt;code class=&quot;language-text&quot;&gt;useDebounce&lt;/code&gt; hook &lt;code class=&quot;language-text&quot;&gt;setName&lt;/code&gt; the &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; state as &lt;code class=&quot;language-text&quot;&gt;nameTemp&lt;/code&gt;. I feel like a custom hook is just creating a separate function that you might use in different components. Personally, I don’t see a point of using a &lt;code class=&quot;language-text&quot;&gt;hook&lt;/code&gt; called &lt;code class=&quot;language-text&quot;&gt;useDebounce&lt;/code&gt; when you can just create a simple function that has &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;. If I get to think otherwise later on, I will post about it as well.&lt;/p&gt;
&lt;p&gt;According to &lt;code class=&quot;language-text&quot;&gt;usehooks.com&lt;/code&gt;: When used in conjunction with useEffect, as we do in the recipe below, you can easily ensure that expensive operations like API calls are not executed too frequently.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useHasMounted&lt;/code&gt; seems useless. and it is not found anywhere.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WebRTC[05] Concluding ICE via Nomination]]></title><description><![CDATA[Concluding ICE via nomination]]></description><link>https://jasonkang14.github.io/posts/webrtc/concluding-ice-via-nomination</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/webrtc/concluding-ice-via-nomination</guid><pubDate>Tue, 10 Sep 2019 16:27:37 GMT</pubDate><content:encoded>&lt;p&gt;After making a candidate pair, the two peers must decide whether to continue or conclude ICE.&lt;/p&gt;
&lt;p&gt;This is done through a process called nomination, which is literally nominating a particular candidate pair as the nominee for a WebRTC communication.&lt;/p&gt;
&lt;p&gt;There are two different types of nomination: regular and aggressive.&lt;/p&gt;
&lt;p&gt;But before talking about nomination, you must know that ICE assigns one of the peers in the role of the controlling agent and the other a controlled agent.&lt;/p&gt;
&lt;p&gt;In regular nomination, the controlling agent lets the connectivity checks continue until one valid candidate pair for each media stream is found. If a valid candidate pair is selected, the controlling agent sends a STUN request with a flag that it will use this pair as the valid candidate pair. If the STUN request succeeds, the selected pair is nominated.&lt;/p&gt;
&lt;p&gt;In aggressive nomination, the controlling agent does the connectivity checks with the flag that this pair will be selected. If such connectivity checks succeeds, the pair is nominated.&lt;/p&gt;
&lt;p&gt;Aggressive nomination tends to be faster than regular nomination, but it gives less flexibility as it selects the pair which passes the connectivity checks with the flag as the nominated pair even if one of the other pairs could be a better option.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to create a hash key for an android project]]></title><description><![CDATA[How to create a hash key for an android project]]></description><link>https://jasonkang14.github.io/posts/android/how-to-create-a-hash-key-for-an-android-project</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/android/how-to-create-a-hash-key-for-an-android-project</guid><pubDate>Mon, 09 Sep 2019 22:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I have been building my project using React Native which allows me to build a native app for both Android and iOS. However, Android requires hash key especially when you try to use SDK to implement things like social login.&lt;/p&gt;
&lt;p&gt;The command is really simple.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android | openssl sha1 -binary | openssl base64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will generate a line with a hash key which I will not print here for a security purpose. You just have to add the value to the field where the hash key is required&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WebRTC[04] ICE Candidate Exchange]]></title><description><![CDATA[How ICE candidate exchange works in WebRTC flow]]></description><link>https://jasonkang14.github.io/posts/webrtc/ice-candidate-exchange</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/webrtc/ice-candidate-exchange</guid><pubDate>Sun, 08 Sep 2019 19:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Simply put, ICE candidate exchange is simply a negotiation between to peers to see which ICE candidates—or an ICE candidate pair—to use in order to establish a WebRTC connection.&lt;/p&gt;
&lt;p&gt;An ICE candidate is an object that looks like this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  candidate: &amp;quot;candidate:2322976989 1 tcp 1518280447 IPADDRESS PORT typ host tcptype passive generation 0 ufrag UXEY network-id 1 network-cost 10&amp;quot;
  sdpMLineIndex: 0
  sdpMid: &amp;quot;audio&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before negotiating ICE candidates, a peer must gather candidate addresses where candidate is a transport address, which is a combination of IP address and port for a particular transport protocol.&lt;/p&gt;
&lt;p&gt;There are three types of candidates: host, server-reflexive, and relayed. There is also a peer-reflexive candidate, but I will talk about it in a later post.&lt;/p&gt;
&lt;p&gt;Host candidates are obtained from physical or logical netowrk interfaces such as public internet or a private network. Host candidates can be easily understood as the one for which its IP address is the actual, direct IP address of a remote peer. like something you would retrieve from a local computer.&lt;/p&gt;
&lt;p&gt;Server-reflexive candidates are obtained from either a STUN or TURN server. The IP of a server-reflexive candidate indicates an intermediary address to represent the candidate’s peer anonymously.&lt;/p&gt;
&lt;p&gt;Relayed candidates only from a TURN server. Their IP addresses are addresses the TURN server uses to forward the media between two peers.&lt;/p&gt;
&lt;p&gt;ICE candidate exchange requires connectivity checks through which the two peers decide wich ICE candidate to use to communicate with each other. Each peer creates a list of candidates based on their priorities and share the lists and performs connectivity checks as they go down the list.&lt;/p&gt;
&lt;p&gt;The steps could be summarized like below;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sort the candidate pairs in priority order.&lt;/li&gt;
&lt;li&gt;Send checks on each candidate pair in priority order.&lt;/li&gt;
&lt;li&gt;Acknowledge checks received from the other agent.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the checks are complete, the two candidates form a candidate pair through wich the two peers communicate by sending media through the pair.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Hooks[useState()] - setState has become easier]]></title><description><![CDATA[How to use the state hook in React]]></description><link>https://jasonkang14.github.io/posts/react/react-hooks-useState-explained-with-examples</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/react/react-hooks-useState-explained-with-examples</guid><pubDate>Sat, 07 Sep 2019 14:27:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; has come out with &lt;code class=&quot;language-text&quot;&gt;hooks&lt;/code&gt; while ago, but it is still not that common to use hooks even though it helps a lot with program performance. I have already written about &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; in a different &lt;a href=&quot;https://jasonkang14.github.io/posts/React-Hooks-useEffect-update-when-you-want&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I personally find &lt;code class=&quot;language-text&quot;&gt;hooks&lt;/code&gt; a lot easier. &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; is a lot easier to use than &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt;. I faced so many infinite loops while trying to use &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt;, so ended up using different lifecycle methods such as &lt;a href=&quot;https://jasonkang14.github.io/posts/react/react-life-cycle-get-derived-state-from-props-with-mobx&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;getDerivedStateFromProps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you change a state in a react component, you have to &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;increasePrice = () =&amp;gt; {
    this.setState({
      priceChange: !this.state.priceChange,
      price: this.state.price + 2000
    });
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By chaning the state of price, I was trying to update the total price that appears in a component.&lt;/p&gt;
&lt;p&gt;If I were to use &lt;code class=&quot;language-text&quot;&gt;useState()&lt;/code&gt; instead, I can change the above method/function like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const [priceChange, setPriceChange] = useState(true);
const [price, setPrice] = useState(0);

increasePrice = () =&amp;gt; {
    setPrieChange(!priceChange)
    setPrice(price + 2000)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The value inside &lt;code class=&quot;language-text&quot;&gt;useState(value)&lt;/code&gt; represents the intial value of the state. By using &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;, there is no need for destructuring, and the code itself becomes a lot more straight-forward. The downside is that if you have a lot of states to manage within a single component, you have to declare all of them like I did in the second example.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React Hooks&lt;/code&gt; allows you to write your React project as a function rather than a class, which could increase the performance exponentially especially if your project is huge. I have actually did the entire project with function components without having to use class.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[위코드 코딩 부트캠프 후기]]></title><description><![CDATA[위코드 코딩부트캠프 후기]]></description><link>https://jasonkang14.github.io/posts/wecode/WeCode-Main-Course-Review</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/wecode/WeCode-Main-Course-Review</guid><pubDate>Thu, 29 Aug 2019 22:27:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;위코드-코딩부트캠프를-수료하고-개발자가-되었다&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EC%BD%94%EB%93%9C-%EC%BD%94%EB%94%A9%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84%EB%A5%BC-%EC%88%98%EB%A3%8C%ED%95%98%EA%B3%A0-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EC%97%88%EB%8B%A4&quot; aria-label=&quot;위코드 코딩부트캠프를 수료하고 개발자가 되었다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.wecode.co.kr&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;위코드&lt;/a&gt; 코딩부트캠프를 수료하고 개발자가 되었다.&lt;/h2&gt;
&lt;h3 id=&quot;위코드는-단순한-교육업체가-아니라-개발자-커뮤니티이다&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EC%BD%94%EB%93%9C%EB%8A%94-%EB%8B%A8%EC%88%9C%ED%95%9C-%EA%B5%90%EC%9C%A1%EC%97%85%EC%B2%B4%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%BB%A4%EB%AE%A4%EB%8B%88%ED%8B%B0%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;위코드는 단순한 교육업체가 아니라 개발자 커뮤니티이다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위코드는 단순한 교육업체가 아니라 개발자 커뮤니티이다.&lt;/h3&gt;
&lt;p&gt;따라서 “공식적인” 교육과정은 8월 23일부로 끝났지만, 위코드 커뮤니티에서의 활동은 12주의 교육기간이 마무리 된 후에도 계속된다. 지난주에 수료한 동기들을 비롯해서 2개월 전에 수료한 1기 수강생 분들도 위코드 스터디에 매주 참여하고 있다.&lt;/p&gt;
&lt;p&gt;멘토분들을 중심으로 스터디가 운영되며, 졸업생들도 스터디를 통해 현업에서의 경험을 나누며 서로의 성장을 돕고있다. 졸업 후에도 위코드 자체 StackOverflow를 활용하면 멘토님들을 비롯한 졸업생/수강생들이 서로 질문에 답해주며 문제해결을 위해 돕는다.&lt;/p&gt;
&lt;h4 id=&quot;위코드에서-배운-것들중-가장-의미있는-것은-동료-개발자들과의-협업이다&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%83%EB%93%A4%EC%A4%91-%EA%B0%80%EC%9E%A5-%EC%9D%98%EB%AF%B8%EC%9E%88%EB%8A%94-%EA%B2%83%EC%9D%80-%EB%8F%99%EB%A3%8C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EA%B3%BC%EC%9D%98-%ED%98%91%EC%97%85%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;위코드에서 배운 것들중 가장 의미있는 것은 동료 개발자들과의 협업이다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위코드에서 배운 것들중 가장 의미있는 것은 동료 개발자들과의 협업이다.&lt;/h4&gt;
&lt;p&gt;매일 Standing Meeting을 통해 각자 진행상황을 공유하고, 오늘은 어떤 일을 할지, 그리고 누가 어떤일을 끝내줘야 내가 다음 기능을 구현할 수 있을지에 대해 나눈다. 여러 개발자와 함께 프로젝트를 진행하다보니 자연스럽게 &lt;code class=&quot;language-text&quot;&gt;Git&lt;/code&gt; 사용에 익숙해졌고, 소통하는 것이 얼마나 중요한지 깨달았다.&lt;/p&gt;
&lt;h3 id=&quot;위코드-강의들은-실무에-바로-적용할-수-있는-기술스택-위주로-되어있다&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EC%BD%94%EB%93%9C-%EA%B0%95%EC%9D%98%EB%93%A4%EC%9D%80-%EC%8B%A4%EB%AC%B4%EC%97%90-%EB%B0%94%EB%A1%9C-%EC%A0%81%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B8%B0%EC%88%A0%EC%8A%A4%ED%83%9D-%EC%9C%84%EC%A3%BC%EB%A1%9C-%EB%90%98%EC%96%B4%EC%9E%88%EB%8B%A4&quot; aria-label=&quot;위코드 강의들은 실무에 바로 적용할 수 있는 기술스택 위주로 되어있다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위코드 강의들은 실무에 바로 적용할 수 있는 기술스택 위주로 되어있다.&lt;/h3&gt;
&lt;p&gt;실제로 2주씩 2개의 프로젝트를 진행하고 9주차에 기업 협업 프로젝트에 참여했을 때, 위코드에서 배운 내용을 바탕으로 바로 실무에 투입되어 개발을 진행할 수 있었다. 위코드에서 과정을 수료하기 전 총 5개의 오퍼를 받았고, 그 중에서 가장 많이 배울 수 있고, 성장 가능성이 높으며, Fit이 제일 잘 맞다고 판단한 회사에서 개발자로 근무하고있다. 이 회사는 위코드 수강기간 중 기업 협업을 진행한 회사인데, 한 달간 같이 생활한 조직에서 계속 일하게 되어 Soft Landing이 가능할 것이라고 생각한다.&lt;/p&gt;
&lt;h3 id=&quot;위코드를-통해-12주만에-개발자가-되었다&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-12%EC%A3%BC%EB%A7%8C%EC%97%90-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EC%97%88%EB%8B%A4&quot; aria-label=&quot;위코드를 통해 12주만에 개발자가 되었다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위코드를 통해 12주만에 개발자가 되었다.&lt;/h3&gt;
&lt;p&gt;사실 처음 위코드를 선택할 때는 고민이 많았다. 2기로 참여를 결정해야 했을 때는 1기 수강생들도 아직 수강중이었기 때문에, 단 한명의 개발자도 배출하지 못한 상태였다. 하지만 LinkedIn에서 확인한 대표님의 이력과 방문 상담을 통해 위코드를 믿고 갈 수 있다고 확신했고, 지금 나는 12주만에 개발자가 되었다. 비록 위코드에서 학습할 때처럼 매일 위코드로 출근하지는 않지만, 앞으로도 지속적으로 위코드 커뮤니티에서 활동하며 개발자로서의 성장을 위해 노력할 예정이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React - Context Explained]]></title><description><![CDATA[React Context Explained]]></description><link>https://jasonkang14.github.io/posts/react/react-advanced-guide-context-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/react/react-advanced-guide-context-explained</guid><pubDate>Tue, 27 Aug 2019 22:27:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;this-post-is-a-summarized-version-of-react-doc&quot;&gt;&lt;a href=&quot;#this-post-is-a-summarized-version-of-react-doc&quot; aria-label=&quot;this post is a summarized version of react doc permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This post is a summarized version of &lt;a href=&quot;https://reactjs.org/docs/context.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;react doc&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When to use it
According to the official React docs, &lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt; is designed to share data that can be considered “global” for a tree of React components.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you use &lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt; when you have to pass &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; to a grandchild-of-a-grandchild-of-a-grandchild component&lt;/li&gt;
&lt;li&gt;so &lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt; can be used instead of &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt; unless you are familiar with them or you choose to use an outside library. I am familiar with &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt;, so I tried my best to compare the two, so hope that helps.&lt;/li&gt;
&lt;li&gt;If you don’t use &lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt; when you pass down &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; to a deeply nexted component, you can just create a separate component for the specific &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; instead. So make sure that using &lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt; is more efficient than any other methods that you can think of.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to use it
&lt;code class=&quot;language-text&quot;&gt;const MyContext = React.createContext(defaultValue);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This creates a &lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt; object. And when React renders, the object will read the current context value from the closest matching &lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt; above it in the tree.&lt;/li&gt;
&lt;li&gt;This is like an &lt;code class=&quot;language-text&quot;&gt;observable&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt;. The value/props that could be changed depending on events and its changes should be monitored globally.&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;defaultValue&lt;/code&gt; argument is only used when a component does not have a matching &lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt; above it in the tree. So &lt;code class=&quot;language-text&quot;&gt;defaultValue&lt;/code&gt; does not have to be set/determined all the time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;MyContext.Provider value={/* some value */}&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.&lt;/li&gt;
&lt;li&gt;so I think &lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt; is something like a &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt; store that handles events associated with such changes.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt; accepts a &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt; props and can provide such values to many consumers. This is similar to how many components can access change of &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;states&lt;/code&gt; in a &lt;code class=&quot;language-text&quot;&gt;Redux/MobX&lt;/code&gt; store.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Class.contextType&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lets you consume the nearest current value of that Context type using this.context.&lt;/li&gt;
&lt;li&gt;in &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt;, you can determine the type of &lt;code class=&quot;language-text&quot;&gt;observable&lt;/code&gt; when you declare it for the first time. I think this is similar to that.&lt;/li&gt;
&lt;li&gt;this is associated with &lt;code class=&quot;language-text&quot;&gt;lifecycle&lt;/code&gt; methods, but not to sure how to use it. I think I would have to use it myself in my code to fully understand it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Context.Consumer&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A React component that subscribes to context changes. This lets you subscribe to a context within a function component.&lt;/li&gt;
&lt;li&gt;this is like an &lt;code class=&quot;language-text&quot;&gt;observer&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;Consumer&lt;/code&gt; pretty much represents a component&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Consumer&lt;/code&gt; detects change of &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt; and have &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; render again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Async/Await in JavaScript]]></title><description><![CDATA[Async/Await in JavaScript Explained]]></description><link>https://jasonkang14.github.io/posts/javascript/Async-and-Await-in-JavaScript</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/javascript/Async-and-Await-in-JavaScript</guid><pubDate>Thu, 22 Aug 2019 18:27:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Async/Await&lt;/code&gt; is a syntax to use &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;. I find it easier to use than &lt;code class=&quot;language-text&quot;&gt;then&lt;/code&gt;, and your code looks somewhat more straight-forward if you use &lt;code class=&quot;language-text&quot;&gt;async/await&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;if you don’t &lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt;, your &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; function will return a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; instead of the value you expected by calling a function/method. And you can only &lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt; inside an &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; function because it is used for asynchronous programming.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const getTrack = async () =&amp;gt; {
    const audioStream = await mediaDevices.getUserMedia({ audio: true });
    const audioTrack = audioStream.getAudioTracks()[0];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in the code above, I am &lt;code class=&quot;language-text&quot;&gt;awaiting&lt;/code&gt; for the result of &lt;code class=&quot;language-text&quot;&gt;mediaDevices.getUserMedia({ audio: true })&lt;/code&gt; in order to use the return value of the method. If I don’t &lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt; for it, I get a promise instead of the value that I want. And if I were to use &lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; to check the value assigned to &lt;code class=&quot;language-text&quot;&gt;audioStream&lt;/code&gt;, it will be undefined.&lt;/p&gt;
&lt;p&gt;If you use the conventional &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; method, the code above is equivalent to this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const getTrack = () =&amp;gt; {
    mediaDevifes.getUserMedia({ audio: true })
    .then(audioStream =&amp;gt; {
        const audioTrack = audioStream.getAudioTracks()[0];
    })
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you were to only think about &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;async/await&lt;/code&gt; could be just merely a change of syntax, but &lt;code class=&quot;language-text&quot;&gt;async/await&lt;/code&gt; is a lot more useful since it allows you to use a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Callback and Promise in JavaScript]]></title><description><![CDATA[Asynchronous Programming in JavaScript explained]]></description><link>https://jasonkang14.github.io/posts/javascript/Callback-and-Promise-in-JavaScript</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/javascript/Callback-and-Promise-in-JavaScript</guid><pubDate>Wed, 21 Aug 2019 22:27:37 GMT</pubDate><content:encoded>&lt;h3 id=&quot;synchronous-vs-asynchronous&quot;&gt;&lt;a href=&quot;#synchronous-vs-asynchronous&quot; aria-label=&quot;synchronous vs asynchronous permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Synchronous vs Asynchronous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In synchronous programming, things happen one at a time. If there is a function that takes a while to finish, nothing will happen until that function is finished running.&lt;/li&gt;
&lt;li&gt;In asynchronous programming, a lot of things happen at the same time. Even if there is a function that takes a while to finish, the program continues to run.&lt;/li&gt;
&lt;li&gt;JavaScript is single-threaded, therefore, it can do only one thing at a time. Therefore, asynchronous programming helps JavaScript programs to do mutliple things at the same time while waiting for other functions to finish running.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;there-are-things-like-callback-promise-and-generator-that-help-javascript-to-run-asynchronously&quot;&gt;&lt;a href=&quot;#there-are-things-like-callback-promise-and-generator-that-help-javascript-to-run-asynchronously&quot; aria-label=&quot;there are things like callback promise and generator that help javascript to run asynchronously permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;There are things like &lt;code class=&quot;language-text&quot;&gt;callback&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;generator&lt;/code&gt; that help JavaScript to run asynchronously.&lt;/h2&gt;
&lt;h3 id=&quot;1-callback&quot;&gt;&lt;a href=&quot;#1-callback&quot; aria-label=&quot;1 callback permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Callback&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simply put, &lt;code class=&quot;language-text&quot;&gt;callback&lt;/code&gt; is a function to be called later. It is used as a property of an object, or a parameter that you pass to another function.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;callback&lt;/code&gt; can access the scope of where it gets called.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;error-first-callback&lt;/code&gt;: using an error object as the first parameter of a &lt;code class=&quot;language-text&quot;&gt;callback&lt;/code&gt; in order to check if there is an error associated with the &lt;code class=&quot;language-text&quot;&gt;callback&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the error is either &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;, there is no error associated with the &lt;code class=&quot;language-text&quot;&gt;callback&lt;/code&gt; But if there is an error, you must return the error, otherwise, it will get stuck there.&lt;/li&gt;
&lt;li&gt;if you have a lot of asynchronous codes, there is a higher change of bugs, and it will be difficult to manage. this is why &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; has appeared.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-promise&quot;&gt;&lt;a href=&quot;#2-promise&quot; aria-label=&quot;2 promise permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Promise&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Every async function returns a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt; solves the problem of &lt;code class=&quot;language-text&quot;&gt;callbacks&lt;/code&gt; getting called multiple times. because when a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; is rejected, it calls an &lt;code class=&quot;language-text&quot;&gt;errback&lt;/code&gt; instead of a &lt;code class=&quot;language-text&quot;&gt;callback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt; can be either &lt;code class=&quot;language-text&quot;&gt;fulfilled&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;rejected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; can be created like this: below is a code from &lt;a href=&quot;https://github.com/versatica/mediasoup-client&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;mediasoup-client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;async safeEmitAsPromise(event, ...args)
	{
		return new Promise((resolve, reject) =&amp;gt;
		{
			this.safeEmit(event, ...args, resolve, reject);
		});
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt; are also functions. However, they do not stop the function from running. They simply takes care of the &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; of a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Promises&lt;/code&gt; can be connected with a chain to return a different &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; after a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; is fulfilled.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you set &lt;code class=&quot;language-text&quot;&gt;timeout&lt;/code&gt; to a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;, you can prevent a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt; from not getting fulfilled or rejected.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I used this when I implemented social login. if there is no answer from a social login server, it throws an error to inform that a promise has been rejected instead of waiting forever.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Promise.all&lt;/code&gt; returns a single Promise after multiple promises get resolved. Below example is from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var promise1 = Promise.resolve(3);
var promise2 = 42;
var promise3 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 100, &amp;#39;foo&amp;#39;);
});

Promise.all([promise1, promise2, promise3]).then(function(values) {
  console.log(values);
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;3-generator&quot;&gt;&lt;a href=&quot;#3-generator&quot; aria-label=&quot;3 generator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Generator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code class=&quot;language-text&quot;&gt;generator&lt;/code&gt; allows bi-directional communication between a caller and a function. A &lt;code class=&quot;language-text&quot;&gt;generator&lt;/code&gt; has synchronous properties, but it can manage asynchronous codes easily if used with a &lt;code class=&quot;language-text&quot;&gt;promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read a section about a generator, but still kinda confused. needs to do more studies on it. One lesson that I got is that I don’t need to create a generator luncher on my own. it is better to use either &lt;code class=&quot;language-text&quot;&gt;co&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;Koa&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[WebRTC[03] - Mediasoup Flow Explained]]></title><description><![CDATA[Mediasoup Flow explained]]></description><link>https://jasonkang14.github.io/posts/webrtc/webrtc-Mediasoup-flow-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/webrtc/webrtc-Mediasoup-flow-explained</guid><pubDate>Tue, 20 Aug 2019 22:27:37 GMT</pubDate><content:encoded>&lt;h3 id=&quot;mediasoup-is-an-sfuselective-forwarding-unit-which-receives-audio-and-video-streams-from-endpoints-and-relays-them-to-everyone-else&quot;&gt;&lt;a href=&quot;#mediasoup-is-an-sfuselective-forwarding-unit-which-receives-audio-and-video-streams-from-endpoints-and-relays-them-to-everyone-else&quot; aria-label=&quot;mediasoup is an sfuselective forwarding unit which receives audio and video streams from endpoints and relays them to everyone else permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mediasoup is an SFU(Selective Forwarding Unit) which receives audio and video streams from endpoints and relays them to everyone else&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Device Loading&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;retrieve the &lt;code class=&quot;language-text&quot;&gt;rtpCapabilities&lt;/code&gt; of a router from the server and uses the information to load device&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create WebRTCTransport&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a &lt;code class=&quot;language-text&quot;&gt;sendTransport&lt;/code&gt; and a &lt;code class=&quot;language-text&quot;&gt;localTransport&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;transports&lt;/code&gt; must be created both in the client-side and the server-side&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect WebRTCTransport&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this is done by calling &lt;code class=&quot;language-text&quot;&gt;sendTransport.produce()&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;recvTransport.consume()&lt;/code&gt; in the client side.&lt;/li&gt;
&lt;li&gt;you have to connect the transport created in the server-side with the &lt;code class=&quot;language-text&quot;&gt;dtlsParameter&lt;/code&gt; of the device used to make a WebRTC connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Produce&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you call &lt;code class=&quot;language-text&quot;&gt;sendTransport.produce()&lt;/code&gt; in the client-side, &lt;code class=&quot;language-text&quot;&gt;sendTransport.on(&amp;quot;connect&amp;quot;)&lt;/code&gt; event is fired.&lt;/li&gt;
&lt;li&gt;If the connection is successful, &lt;code class=&quot;language-text&quot;&gt;sendTransport.on(&amp;quot;produce&amp;quot;)&lt;/code&gt; event is fired, which creates a producer in the server-side.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consume&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When there is a new &lt;code class=&quot;language-text&quot;&gt;producer&lt;/code&gt;, participants must &lt;code class=&quot;language-text&quot;&gt;consume&lt;/code&gt; the other’s &lt;code class=&quot;language-text&quot;&gt;producer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a &lt;code class=&quot;language-text&quot;&gt;consumer&lt;/code&gt; in the server-side first, and then use &lt;code class=&quot;language-text&quot;&gt;socket.io&lt;/code&gt; to let the client-side know that there is a new &lt;code class=&quot;language-text&quot;&gt;consumer&lt;/code&gt; created in the server-side&lt;/li&gt;
&lt;li&gt;The client-side then creates a &lt;code class=&quot;language-text&quot;&gt;consumer&lt;/code&gt; using the information from the server-side&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;General&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you build a WebRTC connection using &lt;code class=&quot;language-text&quot;&gt;mediasoup&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;transports&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;producer&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;consumer&lt;/code&gt; must be created both in the client-side and the server-side. And the client-side and the server-side must create the three components using the same information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[WebRTC[02] - SDP]]></title><description><![CDATA[SDP explained]]></description><link>https://jasonkang14.github.io/posts/webrtc/webrtc-SDP-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/webrtc/webrtc-SDP-explained</guid><pubDate>Mon, 19 Aug 2019 22:27:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;sdp-stands-for-session-description-protocol&quot;&gt;&lt;a href=&quot;#sdp-stands-for-session-description-protocol&quot; aria-label=&quot;sdp stands for session description protocol permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SDP stands for Session Description Protocol.&lt;/h2&gt;
&lt;p&gt;SDP is information created via &lt;code class=&quot;language-text&quot;&gt;createOffer()&lt;/code&gt; and/or &lt;code class=&quot;language-text&quot;&gt;createAnswer()&lt;/code&gt;. SDP is used to provide a callee with information about caller and vice versa.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;describes multimedia sessions, which can contain audio, video, whiteboard, fax, modem, and other streams.&lt;/li&gt;
&lt;li&gt;Provides a general purpose, standard representation to describe various aspects of multimedia session such as media capabilities, transport addresses and related matadata in a transport manner&lt;/li&gt;
&lt;li&gt;Used for session announcement, session invitation and parameter negotiation&lt;/li&gt;
&lt;li&gt;Used in the context of Session Initiation Protocol, Real-time Transport Protocol, and Real-time Streaming Protocol applications.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To be honest, all you need to know about &lt;code class=&quot;language-text&quot;&gt;SDP&lt;/code&gt; is that this is information that a caller and a callee must exchange in order to let each other know who he or she is.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WebRTC Flow[01] - createOffer() and createAnswer()]]></title><description><![CDATA[WebRTC flow explained]]></description><link>https://jasonkang14.github.io/posts/webrtc/webrtc-create-offer-create-answer</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/webrtc/webrtc-create-offer-create-answer</guid><pubDate>Fri, 16 Aug 2019 17:27:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;this-post-is-about-using-webrtc-in-react-native&quot;&gt;&lt;a href=&quot;#this-post-is-about-using-webrtc-in-react-native&quot; aria-label=&quot;this post is about using webrtc in react native permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This post is about using WebRTC in React Native.&lt;/h2&gt;
&lt;p&gt;make sure to install &lt;code class=&quot;language-text&quot;&gt;react-native-webrtc&lt;/code&gt; versions 1.75 or above &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;npm install --save react-native-webrtc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then you have to import. &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;import { RTCPeerConnection } from &amp;#39;react-native-webrtc&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now create a caller&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const caller = new RTCPeerConnection()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now the caller has to &lt;code class=&quot;language-text&quot;&gt;createOffer()&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;offerOptions&lt;/code&gt;.
&lt;code class=&quot;language-text&quot;&gt;offerOptions&lt;/code&gt; represent which source of data you are going to offer: either audio or video, or could be both.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const offerOptions = {
  offerToReceiveAudio: 1,
  offerToReceiveVideo: 0,
  voiceActivityDetection: true
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the created &lt;code class=&quot;language-text&quot;&gt;offer&lt;/code&gt;, the caller must set his/her &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;caller.createOffer(offerOptions)
  .then(async (desc) =&amp;gt; {
    await caller.setLocalDescription(desc);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the caller sends this &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt; to a callee, which is another &lt;code class=&quot;language-text&quot;&gt;RTCPeerConnection&lt;/code&gt;. &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;const callee = new RTCPeerConnection()&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Then the callee uses the &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt; from the caller to set the callee’s &lt;code class=&quot;language-text&quot;&gt;remoteDescription&lt;/code&gt;. After setting the &lt;code class=&quot;language-text&quot;&gt;remoteDescription&lt;/code&gt;, the callee now &lt;code class=&quot;language-text&quot;&gt;createAnswer()&lt;/code&gt; and uses the answer to set the callee’s &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The callee then sends the &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt; to the caller so that the caller can use the callee’s &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt; to set the caller’s &lt;code class=&quot;language-text&quot;&gt;remoteDescription&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;callee.setRemoteDescription(desc)
  .then(() =&amp;gt; {
    return callee.createAnswer()
      .then(async (desc) =&amp;gt; {
        await callee.setLocalDescription(desc)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The caller receives the callee’s &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt; and uses the &lt;code class=&quot;language-text&quot;&gt;localDescription&lt;/code&gt; to set the caller’s &lt;code class=&quot;language-text&quot;&gt;remoteDescription&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;caller.setRemoteDescription(desc)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then the caller and callee needs to change their Interactive Connectivity Establishment(ICE) information in order to build connection. It is managed using an eventhandler, which I will talk about in a later post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Lifecycle - Using getDerivedStateFromProps with React Native and MobX]]></title><description><![CDATA[How to use getDerivedStateFromProps instead of componentDidUpdate]]></description><link>https://jasonkang14.github.io/posts/react/react-life-cycle-get-derived-state-from-props-with-mobx</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/react/react-life-cycle-get-derived-state-from-props-with-mobx</guid><pubDate>Wed, 14 Aug 2019 14:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I am sure someone out there—or maybe you who are reading this post—has/have experienced infinite loop while trying to use &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt;. Or you might have experienced that &lt;code class=&quot;language-text&quot;&gt;this.props&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;prevProps&lt;/code&gt; turned out to be same, so your &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; inside &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt; won’t trigger.&lt;/p&gt;
&lt;p&gt;I personally struggled a lot with &lt;code class=&quot;language-text&quot;&gt;this.props&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;prevProps&lt;/code&gt; being equal, but couldn’t solve the problem. Adn the worst part was that it would work in some screens, but won’t in others.&lt;/p&gt;
&lt;p&gt;The solution that I have found is using &lt;code class=&quot;language-text&quot;&gt;getDerivedStateFromProps()&lt;/code&gt;. While &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt; compares &lt;code class=&quot;language-text&quot;&gt;this.props&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;prevProps&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;this.state&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;prevState&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;getDerivedStateFromProps()&lt;/code&gt; compares &lt;code class=&quot;language-text&quot;&gt;this.props&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;this.state&lt;/code&gt; which are written as &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Look at my code below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;static getDerivedStateFromProps(props, state) {
        if (toJS(props.MainScreenStore.snsPostArr[0]).length !== state.prPostArr.length) {
            return {
                prPostArr: toJS(props.MainScreenStore.snsPostArr[0]),
                likedPostSet: new Set(toJS(props.MainScreenStore.snsPostArr[1]))
            }
        }
        return null;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above, I am trying to &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;prPostArr&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;likedPostSet&lt;/code&gt; by using &lt;code class=&quot;language-text&quot;&gt;props.MainScreenStore.snsPostArr&lt;/code&gt;. I am fetching data from a server and storing the information into an &lt;code class=&quot;language-text&quot;&gt;observable&lt;/code&gt; called &lt;code class=&quot;language-text&quot;&gt;snsPostArr&lt;/code&gt; in a &lt;code class=&quot;language-text&quot;&gt;MobX store&lt;/code&gt;. The screen receives &lt;code class=&quot;language-text&quot;&gt;observable&lt;/code&gt; as a &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; from &lt;code class=&quot;language-text&quot;&gt;MainScreenStore&lt;/code&gt;, which handles all the requests made in &lt;code class=&quot;language-text&quot;&gt;MainScreen&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/69336415_10219573739995003_5495412085456109568_n.jpg?_nc_cat=107&amp;#x26;_nc_eui2=AeHeNzCxq53g06myCRPZzTYxjOPVBfNNOXSFhqfm7hXjR57BI6yyNUUt6gOxPfaZRp2ET59PczlEK707VjsINBi3Ro8DifNNkrXbVs870wTPTg&amp;#x26;_nc_oc=AQmuevn132BoKchtXMlt-yPVxxZ6pWYPDGS2_CLlvSmbMwqDeNCc4bJCW2iuiV483iQ&amp;#x26;_nc_ht=scontent-icn1-1.xx&amp;#x26;oh=4635c18a9e8eb6058c336e3d8519ca80&amp;#x26;oe=5E1606EA&quot; alt=&quot;console logs from getDerivedStateFromProps&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since both parameters are arrays, you cannot compare them by simply using &lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt;, I am comparing the length of the two arrays. Initially both of them have the length of zero, but when the store fetches data from the server, the array from &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; changes, thus changing the length.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/68536951_10219573747355187_4747634622542643200_n.jpg?_nc_cat=109&amp;#x26;_nc_eui2=AeGhYQeQJYys75YQjbuhqREOamP-ebJ-BO_-n32QJn-yvOOKKollYbMxo9G7ymGayhAO4rCtd8PhBq6ocoHd5OzzCZBuxmUvkmb20DPEYTTmNQ&amp;#x26;_nc_oc=AQlHNJT-h8gYLBqESNBg0F9y1DX5Pf5DGmGWOJccOXpAOmSyPFNw_-AJoI1lNa08wIU&amp;#x26;_nc_ht=scontent-icn1-1.xx&amp;#x26;oh=463d669a534169eb83cf512188228cff&amp;#x26;oe=5DDB3625&quot; alt=&quot;iPhone Simulator&quot;&gt;&lt;/p&gt;
&lt;p&gt;I will write about changing the timestamp in a later post&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Terminology from Interviews]]></title><description><![CDATA[Some important terminology in web development based on interview questions]]></description><link>https://jasonkang14.github.io/posts/Terminology-from-Interviews</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Terminology-from-Interviews</guid><pubDate>Fri, 09 Aug 2019 23:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I have been doing a lot of interviews these past couple weeks—maybe 10—as I have been searching for a job. I have been told that terminology—knowing exact words to use in different situations—is important at &lt;a href=&quot;https://wecode.co.kr/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;WeCode&lt;/a&gt;, but didn’t fully understand it until I went through interviews. Below are some examples written in no speicic order, just based off what I recall.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;populate&lt;/li&gt;
&lt;li&gt;to add record to a database. It can be data for testing an application’s functionality or the actual data during implementation.&lt;/li&gt;
&lt;li&gt;sanitize&lt;/li&gt;
&lt;li&gt;to remove malicious data from user input, such as form submissions&lt;/li&gt;
&lt;li&gt;to clean user input to avoid code-conflicts (duplicate ids for instance), security issues (xss codes etc), or other issues that might arise from non-standardized input &amp;#x26; human error/deviance.&lt;/li&gt;
&lt;li&gt;stale&lt;/li&gt;
&lt;li&gt;old data that is no longer fresh. something that has not been updated to represent current information&lt;/li&gt;
&lt;li&gt;pure&lt;/li&gt;
&lt;li&gt;of which return value is only determined by its input values, without observable side effects.&lt;/li&gt;
&lt;li&gt;side effect&lt;/li&gt;
&lt;li&gt;the modification of some kind of state outside its local environment something like a mutable data structure or variable, using IO, throwing an exception or halts an erro&lt;/li&gt;
&lt;li&gt;does not have to be hidden or unexpected, and I was told that sometime side effects are used on purpose in order to implement certain things of which examples that I do not recall&lt;/li&gt;
&lt;li&gt;declarative&lt;/li&gt;
&lt;li&gt;a programming paradigm in which the programmer defines what needs to be accomplished by the program without defining how it needs to be implemented.&lt;/li&gt;
&lt;li&gt;imperative&lt;/li&gt;
&lt;li&gt;opposite of declarative. you have to define how it needs to be implemented.&lt;/li&gt;
&lt;li&gt;memoize&lt;/li&gt;
&lt;li&gt;caching information to return the output when a program receives an input that it has experienced&lt;/li&gt;
&lt;li&gt;stateless&lt;/li&gt;
&lt;li&gt;no record of previous interactions and each interaction request has to be handled based entirely on information that comes with it.&lt;/li&gt;
&lt;li&gt;opposite of stateful, which keeps the records of previous interactions&lt;/li&gt;
&lt;li&gt;RESTful: Definition from &lt;a href=&quot;https://restfulapi.net/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;RESTFULAPI.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Representational State Transfer&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Characteristics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stateless: as described above, each request from client to server must contain all the necessary information to understand the request as no information from previous requests is stored&lt;/li&gt;
&lt;li&gt;cacheable: data within a response to a request must be labeled as cacheable or non-cacheable. If cacheable, a client cache is given the right to reuse that response data for later&lt;/li&gt;
&lt;li&gt;Uniform interface: four interface constraints:&lt;/li&gt;
&lt;li&gt;identification of resources&lt;/li&gt;
&lt;li&gt;manipulation of resources through representations&lt;/li&gt;
&lt;li&gt;self-descriptive messages&lt;/li&gt;
&lt;li&gt;hypermedia as the engine of application state&lt;/li&gt;
&lt;li&gt;to be honest, I have no idea what the fourth constraint means&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;compile&lt;/li&gt;
&lt;li&gt;the process of creating an executable program from code written in a compiled programming language&lt;/li&gt;
&lt;li&gt;allows a computer to run and understand a program without the need of the programming software used to create the program&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[JavaScript - Adding ESLint]]></title><description><![CDATA[How to add ESLint to your JavaScript Project]]></description><link>https://jasonkang14.github.io/posts/Adding-ESLint-to-Your-JavaScript-Project</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Adding-ESLint-to-Your-JavaScript-Project</guid><pubDate>Thu, 08 Aug 2019 13:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I am using &lt;code class=&quot;language-text&quot;&gt;VS Code&lt;/code&gt; as an editor when I work on a &lt;code class=&quot;language-text&quot;&gt;JavaScirpt&lt;/code&gt; project. You must first install &lt;code class=&quot;language-text&quot;&gt;ESLint&lt;/code&gt; Plugin from Extensions.&lt;/p&gt;
&lt;p&gt;However, when you install &lt;code class=&quot;language-text&quot;&gt;ESLint&lt;/code&gt; using the plugin, it does not really do much. It throws a lot of erros with red and green underlines that don’t really make sense. I have just found out a very easy way to add &lt;code class=&quot;language-text&quot;&gt;ESLint&lt;/code&gt; to your project using command lines from your terminal&lt;/p&gt;
&lt;p&gt;First, install &lt;code class=&quot;language-text&quot;&gt;ESLint&lt;/code&gt; &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;npm install -g eslint&lt;/code&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;then you gotta &lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt; &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;eslint --init&lt;/code&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;then your terminal will ask some questions. you have to answer them by using arrows—or j and k if you are familiar with vim—to choose your &lt;code class=&quot;language-text&quot;&gt;ESLint&lt;/code&gt; options&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/69036743_10219574424732121_8346729998689763328_o.jpg?_nc_cat=104&amp;#x26;_nc_oc=AQlGHZSxPCwUYvh0A6vl5c82DOBPdNhCtjc-gnIvobnUH9k8hr2SfOavYSB_qrpM8-c&amp;#x26;_nc_ht=scontent-icn1-1.xx&amp;#x26;oh=6ea0750cc536dbe38dc60a85d4a310c0&amp;#x26;oe=5DE9F755&quot; alt=&quot;ESLint questions answered&quot;&gt;&lt;/p&gt;
&lt;p&gt;After answering all the questions, it even asks you if you want to install all the necessary dependencies. You just gotta enter &lt;code class=&quot;language-text&quot;&gt;Y&lt;/code&gt;, and all the dependencies will be installed. And it automatically creates an &lt;code class=&quot;language-text&quot;&gt;.eslintrc.js&lt;/code&gt; file like this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module.exports = {
  env: {
    browser: true,
    es6: true,
  },
  extends: [
    &amp;#39;airbnb&amp;#39;,
  ],
  globals: {
    Atomics: &amp;#39;readonly&amp;#39;,
    SharedArrayBuffer: &amp;#39;readonly&amp;#39;,
  },
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 2018,
    sourceType: &amp;#39;module&amp;#39;,
  },
  plugins: [
    &amp;#39;react&amp;#39;,
  ],
  rules: {
  },
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Django - Upload Image to AWS S3]]></title><description><![CDATA[How to upload an image to AWS S3 using Django]]></description><link>https://jasonkang14.github.io/posts/Django-upload-image-to-aws-s3</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Django-upload-image-to-aws-s3</guid><pubDate>Wed, 07 Aug 2019 22:27:37 GMT</pubDate><content:encoded>&lt;p&gt;After receiving an image file from a client, you have to use a server to upload the image to AWS S3. I am not going to post about how to set up IAM and S3 Bucket in AWS as I believe there are already so many posts about it.&lt;/p&gt;
&lt;p&gt;If you want to upload an image to AWS S3, you need to first install &lt;code class=&quot;language-text&quot;&gt;boto3&lt;/code&gt;, which is a library that helps you upload a file to AWS S3.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pip install boto3&lt;/code&gt; &lt;br&gt;
and please build a habit of &lt;code class=&quot;language-text&quot;&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in order to help those who are working on the same project with you.&lt;/p&gt;
&lt;p&gt;Check out the code below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import boto3

...

class UploadPictureView(APIView):
    permission_classes = [IsAuthenticated]
    s3_client = boto3.client(
        &amp;#39;s3&amp;#39;,
        aws_access_key_id     = yptest_aws_access_key_id,
        aws_secret_access_key = yptest_aws_secret_access_key
    )

    def post(self, request):
        picture = request.FILES[&amp;#39;image&amp;#39;]
        picture.name = f&amp;quot;{request.user.id}_{picture.name}&amp;quot;

        self.s3_client.upload_fileobj(
            picture,
            &amp;quot;yptest-sns&amp;quot;,
            picture.name,
        )

        return JsonResponse({
            &amp;quot;picture_uri&amp;quot;: f&amp;quot;https://yptest-sns.s3.ap-northeast-2.amazonaws.com/{picture}&amp;quot;
        }, safe=False)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can retrieve your &lt;code class=&quot;language-text&quot;&gt;aws_access_key_id&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;aws_secret_access_key&lt;/code&gt; from your &lt;code class=&quot;language-text&quot;&gt;AWS IAM&lt;/code&gt;. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Once you upload an image to &lt;code class=&quot;language-text&quot;&gt;AWS S3&lt;/code&gt;, it provides you with an uri specific to the image by adding the image file name to the end of the &lt;code class=&quot;language-text&quot;&gt;S3 bucket uri&lt;/code&gt;. So if you return the uri to your client, the client will send a request to your server with the uri to save the information into your database&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native - Sending an Image to an API to upload a file]]></title><description><![CDATA[How to send an image file to an API to have it uploaded to AWS S3]]></description><link>https://jasonkang14.github.io/posts/React-Native-Multipart-Form-Data-to-API</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Native-Multipart-Form-Data-to-API</guid><pubDate>Tue, 06 Aug 2019 19:27:37 GMT</pubDate><content:encoded>&lt;p&gt;The purpose of this code was to send an image file to an API in order to upload an image to &lt;code class=&quot;language-text&quot;&gt;AWS S3&lt;/code&gt; to retrieve an image URL.&lt;/p&gt;
&lt;p&gt;In order to send a file to a server, you have to send it as a &lt;code class=&quot;language-text&quot;&gt;multipart/form-data&lt;/code&gt;. Since I am using an image, I used a library called &lt;code class=&quot;language-text&quot;&gt;react-native-image-picker&lt;/code&gt;. It is very easy to use the library—you just have to follow the instruction written in the official Github.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm i --save react-native-image-picker&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then you just add the code given in the instruction .&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;_addPicture = () =&amp;gt; {
    ImagePicker.showImagePicker(options, (response) =&amp;gt; {

      if (response.didCancel) {
        console.log(&amp;quot;User cancelled image picker&amp;quot;);
      } else if (response.error) {
        console.log(&amp;quot;ImagePicker Error: &amp;quot;, response.error);
      } else if (response.customButton) {
        console.log(&amp;quot;User tapped custom button: &amp;quot;, response.customButton);
      } else {
        const source = { uri: response.uri };

        this.setState({
          image: source,
          imageName: response.fileName
        });
      }
    });
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you have added the picture, you have to create a &lt;code class=&quot;language-text&quot;&gt;formData&lt;/code&gt; in order to send the picture to an API.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;_createFormData = () =&amp;gt; {
    const { image, imageName } = this.state;
    const imageUri = image.uri.slice(7);

    let picture = new FormData();
    let file = {
      uri: imageUri,
      type: &amp;quot;image/jpeg&amp;quot;,
      name: imageName
    }
    picture.append(&amp;quot;image&amp;quot;, file);
    return picture
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;image&lt;/code&gt; is an object which contains a key called uri whose value contains some prefix that &lt;code class=&quot;language-text&quot;&gt;multipart/form-data&lt;/code&gt; cannot recognize. So, I used the &lt;code class=&quot;language-text&quot;&gt;slice()&lt;/code&gt; method in order to cut the first seven letters off the string.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;_uploadPicture = async () =&amp;gt; {
    const accessToken = await AsyncStorage.getItem(&amp;#39;@storage_Key&amp;#39;);
    const picture = this._createFormData()
    const pictureUploadSettings = {
      method: &amp;quot;POST&amp;quot;,
      headers: {
        Authorization: `Token ${accessToken}`,
        &amp;quot;Content-Type&amp;quot;: &amp;quot;multipart/form-data&amp;quot;
      },
      body: picture
    }

    const response = await fetch(`${API_URL}listener/upload/picture`, pictureUploadSettings);
    const pictureUri = await response.json();

    return pictureUri.picture_uri
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I sent the image file to the API using the code above.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native - Header Right Button]]></title><description><![CDATA[How to use a header right button in React Native]]></description><link>https://jasonkang14.github.io/posts/React-Native-Header-Right-Button</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Native-Header-Right-Button</guid><pubDate>Mon, 05 Aug 2019 22:27:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React Native&lt;/code&gt; comes with a default header, which has a back button which allows you to go back to the previous page. You can also add a button to the right side of the header by using &lt;code class=&quot;language-text&quot;&gt;headerRight&lt;/code&gt; property like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;static navigationOptions = ({ navigation }) =&amp;gt; ({
    headerTitleStyle: {
    ...
    headerRight: (
      &amp;lt;TouchableOpacity
        onPress={navigation.getParam(&amp;#39;handleClick&amp;#39;)}
        style={{ marginRight: 17 }}
      &amp;gt;
        &amp;lt;Text
          style={[
            styles.headerRightBtn,
            navigation.getParam(&amp;#39;checkInput&amp;#39;)
              ? styles.applyGreen
              : styles.applyGray
          ]}
        &amp;gt;
          완료
        &amp;lt;/Text&amp;gt;
      &amp;lt;/TouchableOpacity&amp;gt;
    )
  });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, a method that gets called &lt;code class=&quot;language-text&quot;&gt;onPress&lt;/code&gt; is not a typical &lt;code class=&quot;language-text&quot;&gt;this.whateverYouWouldLikeToCall&lt;/code&gt;. Instead, I used &lt;code class=&quot;language-text&quot;&gt;navigation&lt;/code&gt; property and used &lt;code class=&quot;language-text&quot;&gt;getParam&lt;/code&gt;. This is because &lt;code class=&quot;language-text&quot;&gt;navigationOptions&lt;/code&gt; is &lt;code class=&quot;language-text&quot;&gt;static&lt;/code&gt;, which I will talk about in a later post.&lt;/p&gt;
&lt;h4 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h4&gt;
&lt;p&gt;I used &lt;code class=&quot;language-text&quot;&gt;navigation&lt;/code&gt; in order to call a method when the header right button is pressed.
In order for the button to &lt;code class=&quot;language-text&quot;&gt;getParam&lt;/code&gt;, you have to &lt;code class=&quot;language-text&quot;&gt;setParam&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt; like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidMount() {
    this.props.navigation.setParams({
      handleClick: this._makePost
    });
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So when the header right button fires &lt;code class=&quot;language-text&quot;&gt;handleClick&lt;/code&gt; via &lt;code class=&quot;language-text&quot;&gt;getParam&lt;/code&gt;, a method called &lt;code class=&quot;language-text&quot;&gt;_makePost&lt;/code&gt; is executed.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is WebRTC and How Does It Work?]]></title><description><![CDATA[Basics of WebRTC Explained]]></description><link>https://jasonkang14.github.io/posts/webrtc-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/webrtc-explained</guid><pubDate>Sat, 03 Aug 2019 14:27:37 GMT</pubDate><content:encoded>&lt;h3 id=&quot;this-is-a-summary-of-a-post-at-innoarchitech&quot;&gt;&lt;a href=&quot;#this-is-a-summary-of-a-post-at-innoarchitech&quot; aria-label=&quot;this is a summary of a post at innoarchitech permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This is a summary of a post at &lt;a href=&quot;https://www.innoarchitech.com/blog/what-is-webrtc-and-how-does-it-work&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;innoarchitech&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;webrtc-stands-for-web-real-time-communications&quot;&gt;&lt;a href=&quot;#webrtc-stands-for-web-real-time-communications&quot; aria-label=&quot;webrtc stands for web real time communications permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WebRTC stands for Web Real-Time Communications&lt;/h4&gt;
&lt;h3 id=&quot;intro&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A set of plugin-free APIs&lt;/li&gt;
&lt;li&gt;Leverages multiple standards and protocols such as data streams, STUN/TURN servers, signaling, JSEP, ICE, SIP, SDP, NAT, UDP/TCP, network sockets, and more&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;detail&quot;&gt;&lt;a href=&quot;#detail&quot; aria-label=&quot;detail permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Detail&lt;/h3&gt;
&lt;h4 id=&quot;peer-to-peer-communication&quot;&gt;&lt;a href=&quot;#peer-to-peer-communication&quot; aria-label=&quot;peer to peer communication permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Peer-To-Peer Communication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;audio and video communications&lt;/li&gt;
&lt;li&gt;each person’s web browser must agree to begin communication, know how to locate one anohter, bypass security and firewall protections, and transmit all multimedia communications in real-time&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;knowing how to locate and establish a network socket connection with another computer’s web browser is crucial&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you need to bidirectionally transmit multimedia data&lt;/li&gt;
&lt;li&gt;difficult to make a request to another computer because it is hard to know exactly where it is.&lt;/li&gt;
&lt;li&gt;you have to send a request by sending your audio/video data while receiving it from the othe rside without going through an external server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;firewalls-and-nat-traversal&quot;&gt;&lt;a href=&quot;#firewalls-and-nat-traversal&quot; aria-label=&quot;firewalls and nat traversal permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Firewalls and NAT Traversal&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Firewall enforces a set of rules about what data packets will be allowed to enter of leave a network. some sort of a security system&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;computer sits behind a firewall and Network Access Translation device (NAT)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;which is why your computer does not have a static public IP address&lt;/li&gt;
&lt;li&gt;NAT device translates private IP address from inside a firewall to public-facing IP addresses&lt;/li&gt;
&lt;li&gt;NAT is needed for security&lt;/li&gt;
&lt;li&gt;NAT makes your request IP to look different from your actualy IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STUN(Session Traversal Utilities for NAT) and TURN(Traversal Using Relays around NAT) servers allow you to get someone else’s IP to make a call by sending audio/video data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a request for your public-facing IP address is first made to a STUN server&lt;/li&gt;
&lt;li&gt;you tell your peers to send a request to your server via your public-facing IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;signaling-sessions-and-protocols&quot;&gt;&lt;a href=&quot;#signaling-sessions-and-protocols&quot; aria-label=&quot;signaling sessions and protocols permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Signaling, Sessions, and Protocols&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;negotiate and establish the network session connection with your peer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The initial session negotiation and establishment happens using a signaling/communication protocol specialized in multimedia communications&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;something like Session Initiation Protocol(SIP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the chosen signaling protocol must work with an application layer protocol called the Session Description Protocol (SDP)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when you try to communicate with someone, you generate a set of Interactive Connectivity Establishment(ICE) protocol candidates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the candidates represent a given combination of IP address, port, and transport protocol to be used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/6119/webrtc-complete-diagram.png&quot; alt=&quot;WebRTC exchange diagram from MDN&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;complete-process-summarized&quot;&gt;&lt;a href=&quot;#complete-process-summarized&quot; aria-label=&quot;complete process summarized permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Complete Process Summarized&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each peer first establishes its public-facing IP address by sending a request to STUN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Signaling data channels are then dynamically created to detect peers&lt;/li&gt;
&lt;li&gt;this channel is somewhat like a private room&lt;/li&gt;
&lt;li&gt;only those who know about the room can send and receive messages&lt;/li&gt;
&lt;li&gt;you need a unique idenfitier to access it&lt;/li&gt;
&lt;li&gt;but some protocols do not require a channel since webRTC is flexibile and does not specify the signaling process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;support peer-to-peer negotiations and session establishment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;once two or more peers are connected to the same channel, the peers are able to communicate and negotiate session information&lt;/li&gt;
&lt;li&gt;initiating peer sends an offer using a signaling protocol and waits to receive an answer from any receivers that are connected to the given channel&lt;/li&gt;
&lt;li&gt;Once the answer is received, a process occurs to determine and negotiate the best of the ICE candidates gathered by each peer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;once the optimal ICE candidates are chosen,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;things like all of the required metadata, network routing, and media information is agreed&lt;/li&gt;
&lt;li&gt;the network socket session between the peers is then fully established and active. - local data streams and data channel endpoints are created by each peer, and multimedia data is finally transmitted both ways&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if the process of agreeing on the best ICE candidates fails, the fallback is to use a TURN server as a relay instead of using STUN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basically employs a server that acts as an intermediary and relays any stransmitted data between peers.&lt;/li&gt;
&lt;li&gt;when TURN is used, each peer no longer needs to know how to contact and transmit data to each other.&lt;/li&gt;
&lt;li&gt;they need to know what public TURN server to send and receive real-time multimedia data during a communication session&lt;/li&gt;
&lt;li&gt;TURN servers need to be quite robust, have extensive bandwidth and processing capabilities, and handle potentially large amounts of data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;webrtc-javascript-apis&quot;&gt;&lt;a href=&quot;#webrtc-javascript-apis&quot; aria-label=&quot;webrtc javascript apis permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WebRTC JavaScript APIs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;WebRTC and the processes described are implemented through a set of JavaScript APIs that actually produce and transmit the multimedia data being used for real-time communications.&lt;/li&gt;
&lt;li&gt;The primary WebRTC APIs include, Navigator.getUserMedia (capture audio and video), RTCPeerConnection (create and negotiate peer-to-peer connections), and RTCDataChannel (represents a bidirectional data channel between peers).&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Request to Server using MobX]]></title><description><![CDATA[How to send a request to the server via MobX]]></description><link>https://jasonkang14.github.io/posts/Request-to-Server-using-MobX</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Request-to-Server-using-MobX</guid><pubDate>Fri, 02 Aug 2019 18:27:37 GMT</pubDate><content:encoded>&lt;p&gt;State like login must be handled globally since your login information should be accessible in every single page that requires permissions. So when you send a request to a server for login, you have to do it globally. &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt; is the way to go.&lt;/p&gt;
&lt;p&gt;I have already posted about how to set up your &lt;code class=&quot;language-text&quot;&gt;React Native&lt;/code&gt; project using &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt;. And this post is about how you send a request.&lt;/p&gt;
&lt;p&gt;First, you have to create a &lt;code class=&quot;language-text&quot;&gt;Store&lt;/code&gt; which changes a state and detects such changes.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { observable, action, runInAction } from &amp;quot;mobx&amp;quot;;
import { LoginManager, AccessToken } from &amp;#39;react-native-fbsdk&amp;#39;;
import { API_URL } from &amp;quot;../../config&amp;quot;;
import axios from &amp;quot;axios&amp;quot;;

class UserStore {
    @observable user = [];
    @observable facebookLoginStatus = &amp;quot;&amp;quot;;
    @observable state = &amp;quot;pending&amp;quot;

    const store = new UserStore();
    export default store;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;observable&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;MobX&lt;/code&gt; is data of which change could be observable. When Facebook login is successful, his or her user information is going to be stored in &lt;code class=&quot;language-text&quot;&gt;@observable user&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And you implement the Facebook login by using the code provided by Facebook Github. I used a custom button, so my code is like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    @action
    facebookLogin() {
        LoginManager.logInWithPermissions([&amp;quot;public_profile&amp;quot;]).then(
            action ((result) =&amp;gt; {
              if (result.isCancelled) {
                console.log(&amp;quot;Login cancelled&amp;quot;);
              } else {
                AccessToken.getCurrentAccessToken().then(
                   action ((data) =&amp;gt; {
                    this.facebookToken = data.accessToken;
                    const headers = {
                            &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
                            &amp;quot;Accept&amp;quot;: &amp;quot;application/json&amp;quot;
                        }
                    const body = JSON.stringify(this.facebookToken)

                    axios.post(`${API_URL}account/facebooklogin`, body, { headers }). then(
                        action ((response) =&amp;gt; {
                        if (response.data.code === 0) {
                            this.state = &amp;quot;done&amp;quot;;
                            this.facebookLoginStatus=&amp;quot;fail&amp;quot;;
                            this.user = response.data.user_info;
                        } else {
                            this.state= &amp;quot;done&amp;quot;;
                            this.facebookLoginStatus=&amp;quot;success&amp;quot;;
                            this.user = response.data.user_info;
                        }
                    }))
                  })
                )
                console.log(
                  &amp;quot;Login success with permissions: &amp;quot; +
                    result.grantedPermissions.toString()
                );
              }
            }),
            action ((error) =&amp;gt; {
              console.log(&amp;quot;Login fail with error: &amp;quot; + error);
            })
        );
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt; is anything that can modify a &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;. Since I am going to change the state called &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;, I am calling this request an &lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt;. I used &lt;code class=&quot;language-text&quot;&gt;async/await&lt;/code&gt; like above since the instruction was very clear in the &lt;a href=&quot;https://mobx.js.org/best/actions.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;MobX website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And when you send a request to a server using a token from Facebook, your server will return the access token from your server, which you have to store in your storage.&lt;/p&gt;
&lt;p&gt;One thing &lt;code class=&quot;language-text&quot;&gt;React Native&lt;/code&gt; is different from &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; is that you have to store the token by using &lt;code class=&quot;language-text&quot;&gt;async-storage&lt;/code&gt; library. I will talk about this in the next post&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native Facebook Login (iOS only)]]></title><description><![CDATA[How to implement Facebook Login using React Native.]]></description><link>https://jasonkang14.github.io/posts/React-Native-Facebook-Login-Front-End</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Native-Facebook-Login-Front-End</guid><pubDate>Thu, 01 Aug 2019 14:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I struggled a lot to implement Facebook Login using React Native. I followed three lectures on YouTube and saw it working in the video, but it didn’t work on my screen. I followed the instruction given on &lt;a href=&quot;https://developers.facebook.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;facebook developer&lt;/a&gt; very closely as well, but it did not work. After Googling different errors, I finally made it. So I am writing this blog hoping that you won’t have to go through what I had to go through.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you have not already, start your react-native project by following the &lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;react native document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;react-native init project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now you have to install &lt;code class=&quot;language-text&quot;&gt;react-native-fbsdk&lt;/code&gt;, but &lt;b&gt;instead of using the command given in Facebook Github, use the following&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save https://github.com/facebook/react-native-fbsdk.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you install by &lt;code class=&quot;language-text&quot;&gt;npm install --save react-native-fbsdk&lt;/code&gt;, you will face an error as you add a line to &lt;code class=&quot;language-text&quot;&gt;AppDelegate.m&lt;/code&gt; later, and it will not get resolved.&lt;/p&gt;
&lt;p&gt;Now you just have to follow the instruction given in the &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/ios&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Create a New App&lt;/code&gt; by clicking the blue button. Then you will get an &lt;code class=&quot;language-text&quot;&gt;App ID&lt;/code&gt;, which you will need to use later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-gmp1-1.xx.fbcdn.net/v/t1.0-9/67658681_10219516192556353_8573416276628602880_o.jpg?_nc_cat=104&amp;#x26;_nc_oc=AQnePz3W-UU2cpr7BW133hsH5KWArc5p8Ap_iKtWN82zavzs22deZRrzktuewYXEX_0&amp;#x26;_nc_ht=scontent-gmp1-1.xx&amp;#x26;oh=a87660d355748673fbe9f78aac296f09&amp;#x26;oe=5DCF60C2&quot; alt=&quot;first step image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up Your Development Environment
Facebook for Developers give two options, but I would recommend that you use &lt;code class=&quot;language-text&quot;&gt;SDK:Cocoapods&lt;/code&gt; because there would be less chance for an error.
And please follow my instruction for this specific step.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, install &lt;code class=&quot;language-text&quot;&gt;cocoapods&lt;/code&gt; in your &lt;code class=&quot;language-text&quot;&gt;ios&lt;/code&gt; directory
&lt;code class=&quot;language-text&quot;&gt;cd ios &amp;amp;&amp;amp; sudo gem install cocoapods&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and then create a Podfile
&lt;code class=&quot;language-text&quot;&gt;pod init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;open PodFile&lt;/code&gt; and add following lines into your Podfile&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pod &amp;#39;FBSDKCoreKit&amp;#39;
pod &amp;#39;FBSDKLoginKit&amp;#39;
pod &amp;#39;FBSDKShareKit&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then install the dependencies
&lt;code class=&quot;language-text&quot;&gt;pod install&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would recommend you to open your XCode and build your project after each step and check if there is an error.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;Register and Configure Your App with Facebook&lt;/p&gt;
&lt;p&gt;Open your XCode in your &lt;code class=&quot;language-text&quot;&gt;ios&lt;/code&gt; directory. Make sure you open &lt;code class=&quot;language-text&quot;&gt;yourprojectname.xcworkspace&lt;/code&gt; of which color is white instead of the other one. I used the other file so many times, and it never worked.&lt;/p&gt;
&lt;p&gt;Copy your &lt;code class=&quot;language-text&quot;&gt;Bundle Identifier&lt;/code&gt; from step 3 of the first image, and then add it to the Facebook for Developers page like the second image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-gmp1-1.xx.fbcdn.net/v/t1.0-9/67744521_10219518396571452_630729407845105664_o.jpg?_nc_cat=104&amp;#x26;_nc_oc=AQnMR8heOu39t9CIRsT9MSU9iahkUvkrqpcw5bBhhlLQEUg3N5UBGLWBcxHIIQQx2JE&amp;#x26;_nc_ht=scontent-gmp1-1.xx&amp;#x26;oh=8ae4a328aeac6e7db2cb04f6626c77de&amp;#x26;oe=5DE61F9D&quot; alt=&quot;first image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-gmp1-1.xx.fbcdn.net/v/t1.0-9/67740893_10219518396411448_6746216577638596608_o.jpg?_nc_cat=104&amp;#x26;_nc_oc=AQly76cQX7bMaNYZfvrAFwm970_ww5mg9ydtOdjH5R2qckUg3ydDHZLukxEdEvLCvto&amp;#x26;_nc_ht=scontent-gmp1-1.xx&amp;#x26;oh=65cf70420eb12f4891548594ba22df04&amp;#x26;oe=5DE6FD67&quot; alt=&quot;second image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then enable the single sign on like the image below;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-gmp1-1.xx.fbcdn.net/v/t1.0-9/67930407_10219518407251719_4004078549840429056_n.jpg?_nc_cat=109&amp;#x26;_nc_eui2=AeEIib0lD_vMZ6ne5JxFg5o47E7WevsHPx67TN08ohNukCVDFYeLWYYpQhprN2fy9vpkHtkc34qAMWKglQJaz6wPk5jHsaGVUzM-vux3ezEXrA&amp;#x26;_nc_oc=AQkv2J7J1_zmrFd5nxAtL6fWHAGupYQQ8W6i-y1srl59IC22mpKWwH6paF58DQVg4N8&amp;#x26;_nc_ht=scontent-gmp1-1.xx&amp;#x26;oh=5ba492d6820eaab3e003ca567a7287c4&amp;#x26;oe=5DD24ED6&quot; alt=&quot;third image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Follow the instruction given in 4a. 4b has already been done when you &lt;code class=&quot;language-text&quot;&gt;react-native init&lt;/code&gt;, so you don’t have to worry about it&lt;/li&gt;
&lt;li&gt;Connect Your App Delegate
Add &lt;code class=&quot;language-text&quot;&gt;#import &amp;lt;FBSDKCoreKit/FBSDKCoreKit.h&amp;gt;&lt;/code&gt; to the top of your &lt;code class=&quot;language-text&quot;&gt;AppDelegate.m&lt;/code&gt; and then copy the code given in Facebook for Developers and paste it to your &lt;code class=&quot;language-text&quot;&gt;AppDelegate.m&lt;/code&gt; like below&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];
  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge
                                                   moduleName:@&amp;quot;sideProject&amp;quot;
                                            initialProperties:nil];
  [[FBSDKApplicationDelegate sharedInstance] application:application
                           didFinishLaunchingWithOptions:launchOptions];

  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  return YES;
}

- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
            options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey,id&amp;gt; *)options {

  BOOL handled = [[FBSDKApplicationDelegate sharedInstance] application:application
                                                                openURL:url
                                                      sourceApplication:options[UIApplicationOpenURLOptionsSourceApplicationKey]
                                                             annotation:options[UIApplicationOpenURLOptionsAnnotationKey]
                  ];


  // Add any custom logic here.
  return handled;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Ignore the rest of the instruction given in the link and copy the code from Facebook Github. Follow the &lt;a href=&quot;https://github.com/facebook/react-native-fbsdk#usage&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Usage&lt;/a&gt; section&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[React Native - Basic Setup with MobX]]></title><description><![CDATA[How to set up a React Native project with MobX]]></description><link>https://jasonkang14.github.io/posts/reactnative/basic-setup</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/reactnative/basic-setup</guid><pubDate>Mon, 29 Jul 2019 22:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Before you start following my blog to set up your first &lt;code class=&quot;language-text&quot;&gt;React Native&lt;/code&gt; project, please check out the versions that I have installed.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;react-native&amp;quot;: &amp;quot;^0.60.4&amp;quot;
&amp;quot;mobx&amp;quot;: &amp;quot;^5.13.0&amp;quot;,
&amp;quot;mobx-react&amp;quot;: &amp;quot;^6.1.1&amp;quot;,
&amp;quot;@babel/plugin-proposal-class-properties&amp;quot;: &amp;quot;^7.5.5&amp;quot;,
&amp;quot;@babel/plugin-proposal-decorators&amp;quot;: &amp;quot;^7.4.4&amp;quot;,
&amp;quot;@babel/plugin-transform-flow-strip-types&amp;quot;: &amp;quot;^7.4.4&amp;quot;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I did not use &lt;code class=&quot;language-text&quot;&gt;expo&lt;/code&gt; to set up my &lt;code class=&quot;language-text&quot;&gt;react native&lt;/code&gt; project, so it could be a little different in the beginning, but I am sure the rest of the process is the same. First, follow the instruction given in the &lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;react native document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And then you have to install &lt;code class=&quot;language-text&quot;&gt;mobx&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;mobx-react&lt;/code&gt;. But honestly, I feel like you don’t need to install &lt;code class=&quot;language-text&quot;&gt;mobx&lt;/code&gt; for a &lt;code class=&quot;language-text&quot;&gt;react-native&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;react&lt;/code&gt; project. Maybe you only need to install &lt;code class=&quot;language-text&quot;&gt;mobx-react&lt;/code&gt;. I will check on it and update this post if necessary. Regardless, install &lt;code class=&quot;language-text&quot;&gt;mobx&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;mobx-react&lt;/code&gt; for now.
&lt;code class=&quot;language-text&quot;&gt;npm install mobx mobx-react --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then you have to install &lt;code class=&quot;language-text&quot;&gt;babel&lt;/code&gt;. The problem that I ran into while installing setting up this project was that I have to install &lt;code class=&quot;language-text&quot;&gt;@babel/plugin-proposal-decorators&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;babel-plugin-transform-decorators-legacy&lt;/code&gt;. And you also have to install &lt;code class=&quot;language-text&quot;&gt;@babel/plugin-proposal-class-properties&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;@babel/plugin-transform-flow-strip-types&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties @babel/plugin-transform-flow-strip-types --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then you have to change &lt;code class=&quot;language-text&quot;&gt;babel.config.js&lt;/code&gt; like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module.exports = {
  &amp;quot;presets&amp;quot;: [&amp;quot;module:metro-react-native-babel-preset&amp;quot;],
  &amp;quot;plugins&amp;quot;: [
        [&amp;quot;@babel/plugin-transform-flow-strip-types&amp;quot;],
        [&amp;quot;@babel/plugin-proposal-decorators&amp;quot;, { &amp;quot;legacy&amp;quot;: true}],
        [&amp;quot;@babel/plugin-proposal-class-properties&amp;quot;, { &amp;quot;loose&amp;quot;: true}]
    ]
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when you do &lt;code class=&quot;language-text&quot;&gt;react-native run-ios&lt;/code&gt;, you should be good to go.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React - Using Set as a State]]></title><description><![CDATA[How to use a 'set' as a state and update the state]]></description><link>https://jasonkang14.github.io/posts/react/using-set-as-a-state</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/react/using-set-as-a-state</guid><pubDate>Tue, 16 Jul 2019 17:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I got an interview question, which asked me to create a shopping cart where a user can add or remove an item. And when an item is added to a cart, I was supposed to put a checkmark to the item.&lt;/p&gt;
&lt;p&gt;I first tried to implement this by using a &lt;code class=&quot;language-text&quot;&gt;Boolean&lt;/code&gt; state like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;consturctor() {
    super()

    this.state = {
        addedToCart: false
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, when I did this, every single item got a checkmark, so I decided to use an &lt;code class=&quot;language-text&quot;&gt;array&lt;/code&gt; and add an index of the item to the array when an item is added to the cart, and put a checkmark to the items of which index exists in the array like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;consturctor() {
    super()

    this.state = {
        addedToCart: []
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I realized that the values in the array could not be repeated. There is no repeated item in the list of items. so I decided to use a &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; instead of an &lt;code class=&quot;language-text&quot;&gt;array&lt;/code&gt; for efficiency.&lt;/p&gt;
&lt;p&gt;You can use a &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; when…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;there is no duplicate in your data—or when you try to remove duplicates&lt;/li&gt;
&lt;li&gt;a fast look-up is required.&lt;/li&gt;
&lt;li&gt;the order of data does not matter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I thought my case suits all three. There were only 12 items, so maybe a fast look-up was not required, but it was an interview question, so I kinda wanted to show off that I know my stuff. And this is how I did it;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;constructor() {
    super();

    this.state = {
      productInCart: new Set(),
    };
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I set a &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; as a state like above, and updated, or &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; likd below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;handleProductClick = idx =&amp;gt; {
    if (!this.state.productInCart.has(idx)) {
        this.addToCart(idx);
    } else {
        this.removeFromCart(idx);
    }
};

addToCart = idx =&amp;gt; {
    this.setState(({ productInCart }) =&amp;gt; ({
        productInCart: new Set(productInCart).add(idx)
    }));
};

removeFromCart = idx =&amp;gt; {
    const updateCart = new Set(this.state.productInCart);
    updateCart.delete(idx);
    this.setState({
        productInCart: updateCart
    });
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you add an item to a &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;, you can just add it directly to the current state. However, when you remove an item from a &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;, you have to declare a separate variable like you would do with an array like &lt;code class=&quot;language-text&quot;&gt;const tempArray = this.state.array.slice()&lt;/code&gt;, and then delete an item from the set and &lt;code class=&quot;language-text&quot;&gt;this.setState&lt;/code&gt; in order to update.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git Rebase - How I struggled using it for the first time]]></title><description><![CDATA[How I overcame my confusion using git rebase]]></description><link>https://jasonkang14.github.io/posts/git-rebase</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/git-rebase</guid><pubDate>Mon, 15 Jul 2019 23:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I was taught to use &lt;code class=&quot;language-text&quot;&gt;git rebase&lt;/code&gt; from now on before making a &lt;code class=&quot;language-text&quot;&gt;pull request&lt;/code&gt;. Honestly, the command it self was confusing. This is how I understood &lt;code class=&quot;language-text&quot;&gt;git rebase&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are &lt;code class=&quot;language-text&quot;&gt;rebasing&lt;/code&gt; the &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt; branch.
The command for &lt;code class=&quot;language-text&quot;&gt;git rebase&lt;/code&gt; is &lt;code class=&quot;language-text&quot;&gt;git rebase -i master&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;-i&lt;/code&gt; represents interactive, which allows you to choose commits to include as you rebase your master branch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After using the command, you face a message like the image below;
&lt;img src=&quot;https://scontent-gmp1-1.xx.fbcdn.net/v/t1.0-9/67501828_10219354644757759_6212543380459618304_o.jpg?_nc_cat=110&amp;#x26;_nc_oc=AQkU3NMI1N-Dt3nhhMx3X3hjcBTPU36dROO_QyGiD2i3tsOx4NjDBAiA8LESjLeZ-Lo&amp;#x26;_nc_ht=scontent-gmp1-1.xx&amp;#x26;oh=b3b11394c762f66891a3e793624a49ab&amp;#x26;oe=5DC07CD2&quot; alt=&quot;git rebase&quot;&gt;&lt;/p&gt;
&lt;p&gt;Using the commands explained, you can choose which commits to use. If you are going to use all the commands, you just have to leave the top commit as pick, and choose the rest as s, or &lt;code class=&quot;language-text&quot;&gt;squash&lt;/code&gt; so that all the commits can be &lt;code class=&quot;language-text&quot;&gt;squashed&lt;/code&gt; together.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Conflicts may occur in every step.
Forgot to take a screenshot of it, but I faced 3 conflicts while rebasing 7 different commits. You have to be careful as you resolve the conflicts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So then, why do you have to use &lt;code class=&quot;language-text&quot;&gt;git rebase&lt;/code&gt; when you can simply just &lt;code class=&quot;language-text&quot;&gt;git add&lt;/code&gt; and then &lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase&lt;/code&gt; ensures that the orders of commits do not get messed up. When you make a &lt;code class=&quot;language-text&quot;&gt;pull request&lt;/code&gt; the master/develop branch pulls each commit based on the time that it was made. Therefore, it is difficult to track down the history of each commit. And it gets worse if you have to revert your commit since commits from different feature branches are all mixed together.&lt;/p&gt;
&lt;p&gt;By using &lt;code class=&quot;language-text&quot;&gt;git rebase&lt;/code&gt;, you need to take more time before making a &lt;code class=&quot;language-text&quot;&gt;pull request&lt;/code&gt;, but you can prevent the master branch from having mixed-up history of commits from different branches.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What Is Axios and Why Do You Use it?]]></title><description><![CDATA[Explaining Axios]]></description><link>https://jasonkang14.github.io/posts/Axios-explained</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Axios-explained</guid><pubDate>Fri, 12 Jul 2019 14:27:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Axios&lt;/code&gt; is a library you can use to perform HTTP requests. Basically, you use this in order to send a request to a GraphQL or REST API. &lt;code class=&quot;language-text&quot;&gt;Axios&lt;/code&gt; is similar to the native &lt;code class=&quot;language-text&quot;&gt;Fetch API&lt;/code&gt;, but &lt;code class=&quot;language-text&quot;&gt;Axios&lt;/code&gt; has some advantages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Automatic Transformation
When you use the native &lt;code class=&quot;language-text&quot;&gt;Fetch API&lt;/code&gt;, you have to transfrom the &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;json&lt;/code&gt; in order to use it. This means that it takes a while for you to receive a &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; from the server since you have to wait until a &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; gets transformed into &lt;code class=&quot;language-text&quot;&gt;json&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// Fetch API
fetch(ADDRESS + &amp;quot;restaurant&amp;quot;)
.then(res =&amp;gt; res.json())
.then(result =&amp;gt; {
    this.props.setStore(result);
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, &lt;code class=&quot;language-text&quot;&gt;Axios&lt;/code&gt; converts the data to &lt;code class=&quot;language-text&quot;&gt;json&lt;/code&gt; automatically, so you have one less step to perform. This means that using a &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; from the server would not take as long.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// Axios
if (storeId === undefined) {
    axios(ADDRESS + &amp;quot;restaurant&amp;quot;)
    .then(res =&amp;gt; {
        this.props.setStore(res);
    });
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Built-in CSRF Protection
CSRF stands for Cross Site Request Forgery. For example, after you log in to your bank account, a hacker may send you a link to retreive the token you used to log in to your bank account. Then, the hacker can use your token to log in to your account.&lt;/p&gt;
&lt;p&gt;But, &lt;code class=&quot;language-text&quot;&gt;Axios&lt;/code&gt; has a built-in protection against it in order to protect your bank account information in the case above, or your server as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Monitor POST Request Progress
Apparently you can see the process of receiving a response after sending a &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt; request, but have not experienced this yet. If I get to experience this, I will make sure to make a post about it.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Login Decorator]]></title><description><![CDATA[How to implement a login decorator]]></description><link>https://jasonkang14.github.io/posts/How-to-implement-a-login-decorator</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/How-to-implement-a-login-decorator</guid><pubDate>Thu, 11 Jul 2019 20:27:37 GMT</pubDate><content:encoded>&lt;p&gt;The definition of decorator is a function that must execute before executing a function. Therefore, a login decorator is used where user authorization is necessary. For example, when you look up a registered-member-only event, you must be logged in, which is supposed to be done via a login decorator.&lt;/p&gt;
&lt;p&gt;The code is like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import json
import jwt

from django.http          import JsonResponse
from .models              import Account
from db_settings          import jwt_key
from lunch_buddy.settings import JWT_ALGORITHM
def login_decorator(func):

    def login_wrapper(self, request, *args, **kwargs):
        token = request.headers[&amp;quot;Authorization&amp;quot;]

        check_auth = jwt.decode(token, jwt_key, JWT_ALGORITHM)

        if Account.objects.filter(pk = check_auth[&amp;quot;id&amp;quot;]).exists():
            request.user = Account.objects.get(pk = check_auth[&amp;quot;id&amp;quot;])
            return func(self, request, *args, **kwargs)

        return JsonResponse({
            &amp;quot;error_code&amp;quot;: &amp;quot;INVALID_LOGIN&amp;quot;
        }, status=400)

    return login_wrapper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decorators could be “nested” into multiple layers depending on how you want to use it. In this case, I did not need much nesting.&lt;/p&gt;
&lt;p&gt;The basic logic of a login decorator is checking whether the user is a registered user or not by using a token, which is supposed to be given out by a server you have developed.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Receive a token from &lt;code class=&quot;language-text&quot;&gt;request headers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Decode&lt;/code&gt; using a &lt;code class=&quot;language-text&quot;&gt;jwt&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Check if he or she has been registered.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One thing that I find very clever is the use of a &lt;code class=&quot;language-text&quot;&gt;primary key&lt;/code&gt; to distinguish different users as you save the data to the database. As you use the token to see if a user with such &lt;code class=&quot;language-text&quot;&gt;primary key&lt;/code&gt; exists, you give the user authorizaion/authentication to access a page which requires a login.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to import local mysql databases to AWS mysql databases]]></title><description><![CDATA[How to import local mysql databases to AWS mysql databases]]></description><link>https://jasonkang14.github.io/posts/How-to-import-local-mysql-databases-to-AWS-mysql databases</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/How-to-import-local-mysql-databases-to-AWS-mysql databases</guid><pubDate>Wed, 10 Jul 2019 15:27:37 GMT</pubDate><content:encoded>&lt;p&gt;As the first project is coming to close, I am trying to deploy what I have developed in local. In order to do that, I had to backup my local database in to a temporary sql file and then dump that data into AWS database.&lt;/p&gt;
&lt;p&gt;Make sure to remove quotation marks &quot;&quot; when you enter commands&lt;/p&gt;
&lt;p&gt;First make a backup &lt;code class=&quot;language-text&quot;&gt;sql&lt;/code&gt; file.
&lt;code class=&quot;language-text&quot;&gt;mysql -u root -p &amp;quot;database you want to backup&amp;quot; &amp;gt; &amp;quot;temporary.sql&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you don’t put &lt;code class=&quot;language-text&quot;&gt;-u root -p&lt;/code&gt;, it tries to login to the mysql server using your laptop name. By adding &lt;code class=&quot;language-text&quot;&gt;-u root -p&lt;/code&gt;, you get to use the root and its password.&lt;/p&gt;
&lt;p&gt;And then go into your AWS mysql and create a database
&lt;code class=&quot;language-text&quot;&gt;mysql -h &amp;quot;your aws mysql url&amp;quot; -u root -p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when you are in AWS mysql server,
&lt;code class=&quot;language-text&quot;&gt;CREATE DATABASE &amp;quot;yourdatabasename&amp;quot; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then dump the backup into your AWS database
&lt;code class=&quot;language-text&quot;&gt;mysql -h &amp;quot;your aws mysql url&amp;quot; -u root -p &amp;quot;yourdatabasename in AWS mysql&amp;quot; &amp;lt; &amp;quot;temporary.sql&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then you are done&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Hooks [useEffect()] how to update when you want]]></title><description><![CDATA[How to use `useEffect()` instead of `componentDidUpdate()`]]></description><link>https://jasonkang14.github.io/posts/React-Hooks-useEffect-update-when-you-want</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Hooks-useEffect-update-when-you-want</guid><pubDate>Tue, 09 Jul 2019 22:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I wanted to use &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; to work like &lt;code class=&quot;language-text&quot;&gt;componentDidUpda()&lt;/code&gt;. Whenever I click a certain button, I wanted the states updated so that React may render components. Last time I talked about how to add &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt; as a second argument to &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; in order to prevent infinte loops. This time, it is about how to call it when you want.&lt;/p&gt;
&lt;p&gt;Check out the code below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useEffect(() =&amp;gt; {
    if (joinPartyBtnClick) {
      const getToken = localStorage.getItem(&amp;quot;wtw-token&amp;quot;);
      fetch(`${ADDRESS}party/join`, {
        method: &amp;quot;post&amp;quot;,
        headers: {
          &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
          Accept: &amp;quot;application/json&amp;quot;,
          Authorization: getToken
        },
        body: JSON.stringify({
          id : idJoinParty
        })
      }).then((response) =&amp;gt; {
        if (response.status === 200) {
          setParticipationStatus(!participationStatus);
        }
        setJoinPartyBtnClick(!joinPartyBtnClick);
      });
    }
  }, [joinPartyBtnClick]);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very straight-forward. If &lt;code class=&quot;language-text&quot;&gt;joinPartyBtnClick === true&lt;/code&gt;, you run the &lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; as written. I can set that the &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; runs whenever the state of &lt;code class=&quot;language-text&quot;&gt;joinPartyBtnClick&lt;/code&gt; changes by adding it as the second argument like above.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JWT Token for a Login Decorator]]></title><description><![CDATA[Implementing Authentication using JWT]]></description><link>https://jasonkang14.github.io/posts/JWT-Token-for-a-login-decorator</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/JWT-Token-for-a-login-decorator</guid><pubDate>Fri, 05 Jul 2019 19:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Using a &lt;code class=&quot;language-text&quot;&gt;JWT&lt;/code&gt; token for a &lt;code class=&quot;language-text&quot;&gt;login decorator&lt;/code&gt;is similar to checking hashed password. You just have to use a method to &lt;code class=&quot;language-text&quot;&gt;decode&lt;/code&gt; the token to see if a &lt;code class=&quot;language-text&quot;&gt;payload&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; you used to &lt;code class=&quot;language-text&quot;&gt;encode&lt;/code&gt; your token is retrieved.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;jwt.decode(encoded_jwt, &amp;#39;secret&amp;#39;, algorithms=[&amp;#39;HS256&amp;#39;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is all that is to it, and it is really simple.
But the problem that I ran into while writing this was that I messed up the order of positional arguments and kept giving the &lt;code class=&quot;language-text&quot;&gt;encoded_jwt&lt;/code&gt; as the second argument.&lt;/p&gt;
&lt;p&gt;I tried so hard to look this up on &lt;code class=&quot;language-text&quot;&gt;StackOverflow&lt;/code&gt;, but couldn’t find anyone who made a stupid mistake like I did. So I fixed my code like below, and it is now working as a &lt;code class=&quot;language-text&quot;&gt;login decorator&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import json
import jwt
import db_settings

from django.http import JsonResponse

def login_decorator(func):

    def login_wrapper(self, request, *args, **kwargs):
        token = request.headers[&amp;quot;Authentication&amp;quot;]

        team_name = &amp;quot;team_babKKUNG&amp;quot;
        key       = db_settings.LUNCHBUDDYDATABASES[&amp;quot;jwt&amp;quot;][&amp;quot;KEY&amp;quot;]
        algorithm = &amp;#39;HS256&amp;#39;

        check_auth = jwt.decode(token, key, algorithm)

        if check_auth[&amp;quot;iss&amp;quot;] == team_name:
            return func(self, request, *args, **kwargs)

        else :
            return JsonResponse({&amp;quot;message&amp;quot;: &amp;quot;승인되지 않은 사용자입니다.&amp;quot;})

    return login_wrapper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JWT Token Returned upon Login]]></title><description><![CDATA[Implementing Authentication using JWT]]></description><link>https://jasonkang14.github.io/posts/JWT-Token-returned-upon-login</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/JWT-Token-returned-upon-login</guid><pubDate>Thu, 04 Jul 2019 23:27:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JWT&lt;/code&gt; is a token that a server hands out to a user so that a user and server just exchanges the token instead of logging in every time you switch a page. After sending a &lt;code class=&quot;language-text&quot;&gt;JWT&lt;/code&gt; token to a user, you use a &lt;code class=&quot;language-text&quot;&gt;login decorator&lt;/code&gt; to check if he or she has an authentication to access a webpage.&lt;/p&gt;
&lt;p&gt;Apparently, there’s a &lt;code class=&quot;language-text&quot;&gt;JWT&lt;/code&gt; directly associated with &lt;code class=&quot;language-text&quot;&gt;django&lt;/code&gt;, but I used &lt;code class=&quot;language-text&quot;&gt;PyJWT&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;so first install &lt;code class=&quot;language-text&quot;&gt;pyjwt&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;pip install pyjwt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the how you &lt;code class=&quot;language-text&quot;&gt;encode&lt;/code&gt; using &lt;code class=&quot;language-text&quot;&gt;JWT&lt;/code&gt;:
&lt;code class=&quot;language-text&quot;&gt;encoded_jwt = jwt.encode({&amp;#39;some&amp;#39;: &amp;#39;payload&amp;#39;}, &amp;#39;secret&amp;#39;, algorithm=&amp;#39;HS256&amp;#39;)&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;payload&lt;/code&gt; is some information that you want to send&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;secret&lt;/code&gt; is a key that you use when you encode&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;algorithm&lt;/code&gt; is how you want to encode your token&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So simple. It is so easy to encode, but I faced so many errors while implementing this. But the most important thing is that you have to &lt;code class=&quot;language-text&quot;&gt;decode&lt;/code&gt; your &lt;code class=&quot;language-text&quot;&gt;JWT&lt;/code&gt; token before sending it to a user.&lt;/p&gt;
&lt;p&gt;My first code was something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;if bcrypt.checkpw(login_password.encode(&amp;quot;utf-8&amp;quot;), registered_password.encode(&amp;quot;utf-8&amp;quot;)):
    payload = {
        &amp;quot;iss&amp;quot;: &amp;quot;team_babKKUNG&amp;quot;,
    }

    key = db_settings.LUNCHBUDDYDATABASES[&amp;quot;jwt&amp;quot;][&amp;quot;KEY&amp;quot;]
    algorithm = &amp;#39;HS256&amp;#39;

    jwt_token = jwt.encode(payload, key, algorithm)
    return JsonResponse({&amp;quot;token&amp;quot;: jwt_token})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And below is the error that I got:
&lt;code class=&quot;language-text&quot;&gt;Object of type bytes is not JSON serializable&lt;/code&gt;,
which is very straight forward. you have to decode it like this in order to avoid the error and successfully.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;if bcrypt.checkpw(login_password.encode(&amp;quot;utf-8&amp;quot;), registered_password.encode(&amp;quot;utf-8&amp;quot;)):
    payload = {
        &amp;quot;iss&amp;quot;: &amp;quot;team_babKKUNG&amp;quot;,
    }

    key = db_settings.LUNCHBUDDYDATABASES[&amp;quot;jwt&amp;quot;][&amp;quot;KEY&amp;quot;]
    algorithm = &amp;#39;HS256&amp;#39;

    jwt_token = jwt.encode(payload, key, algorithm)

    return JsonResponse({&amp;quot;token&amp;quot;: jwt_token.decode(&amp;quot;utf-8&amp;quot;)})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Bcrypt[checkpw()] Login, how to check if an entered password matches the hashed password saved in the database]]></title><description><![CDATA[Implementing Login using Django and Bcrypt]]></description><link>https://jasonkang14.github.io/posts/Bcrypt-Login-using-checkpw</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Bcrypt-Login-using-checkpw</guid><pubDate>Wed, 03 Jul 2019 13:27:37 GMT</pubDate><content:encoded>&lt;p&gt;Bcrypt has a method called &lt;code class=&quot;language-text&quot;&gt;checkpw()&lt;/code&gt;, which allows you to check whether the entered password matches the hashed password, which is saved in the database.
&lt;code class=&quot;language-text&quot;&gt;bcrypt.checkpw(password, hashed):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I used &lt;code class=&quot;language-text&quot;&gt;checkpw()&lt;/code&gt; method as well like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;if bcrypt.checkpw(login_password.encode(&amp;quot;utf-8&amp;quot;), registered_password):
    return JsonResponse({&amp;quot;message&amp;quot; : &amp;quot;login success&amp;quot;}, safe=False)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my last post, I mentioned that you have to save a decoded password to the database because it would cause errors in login otherwise. I encoded the &lt;code class=&quot;language-text&quot;&gt;login_password&lt;/code&gt;, which is the password that a user entered to login, but did not encode &lt;code class=&quot;language-text&quot;&gt;registered_password&lt;/code&gt;, which is the hashed password because I had encoded it before hasing when I saved it to the database.&lt;/p&gt;
&lt;p&gt;But it gave me this error
&lt;code class=&quot;language-text&quot;&gt;Unicode-objects must be encoded before checking&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Facing the error message, I changed my code to this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;if bcrypt.checkpw(login_password.encode(&amp;quot;utf-8&amp;quot;), registered_password.encode(&amp;quot;utf-8&amp;quot;)):
    return JsonResponse({&amp;quot;message&amp;quot; : &amp;quot;login success&amp;quot;}, safe=False)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But the code above doesn’t really make sense because I am “double-encoding” my hashed password, so I go another error message like this below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;File &amp;quot;/Users/byeongjinkang/miniconda3/envs/lunch_buddy/lib/python3.7/site-packages/bcrypt/__init__.py&amp;quot;, line 86, in hashpw
    raise ValueError(&amp;quot;Invalid salt&amp;quot;)
ValueError: Invalid salt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I thought this implied that my salt, which was randomly generated by &lt;code class=&quot;language-text&quot;&gt;bcrypt.gensalt()&lt;/code&gt;, was invalid, which doesn’t make sense. Why is bcrypt telling me that a salt, which was randomly generated by bcrypt, was invalid? In order to get deeper into the problem, I decided to look into that &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt;, and this is where the error occurred.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;hashed = _bcrypt.ffi.new(&amp;quot;char[]&amp;quot;, 128)
retval = _bcrypt.lib.bcrypt_hashpass(password, salt, hashed, len(hashed))

if retval != 0:
    raise ValueError(&amp;quot;Invalid salt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bcrypt library describes this section that the hashed password must have the &lt;code class=&quot;language-text&quot;&gt;$2b$&lt;/code&gt; prefix, which is achived by decoding the password. If you save the password without decoding it, its prefix becomes &lt;code class=&quot;language-text&quot;&gt;b&amp;#39;$2b$&lt;/code&gt;, which raises an error.&lt;/p&gt;
&lt;p&gt;Then you could argue “why don’t you save it as an encoded password?” I tried it, but unfortunately(?) &lt;code class=&quot;language-text&quot;&gt;bytes&lt;/code&gt; object, whish is a type of the hashed password, doesn’t have an attribute &lt;code class=&quot;language-text&quot;&gt;encode&lt;/code&gt;. So this is pretty much the only way.&lt;/p&gt;
&lt;p&gt;In my next post, I am going to talk about how to use &lt;code class=&quot;language-text&quot;&gt;jwt&lt;/code&gt; token.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bcrypt[hashpw()] Signup, how to hash password securely]]></title><description><![CDATA[Implementing Signup using Django and Bcrypt]]></description><link>https://jasonkang14.github.io/posts/Bcrypt-Signup-Function-using-hashpw</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Bcrypt-Signup-Function-using-hashpw</guid><pubDate>Tue, 02 Jul 2019 21:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I’ve been using Django to make API for a project, which was very straight forward as long as I follow the tutorial from the official website. And signup was also fairly easy.&lt;/p&gt;
&lt;p&gt;First, install bcrypt:
&lt;code class=&quot;language-text&quot;&gt;pip install bcrypt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And using bcrypt, you gotta encode the entered password into &lt;code class=&quot;language-text&quot;&gt;bytes&lt;/code&gt; type,and then hash the password using a salt.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;else :
    password = bytes(new_account_info[&amp;quot;password&amp;quot;], &amp;quot;utf-8&amp;quot;)
    hashed = bcrypt.hashpw(password, bcrypt.gensalt())

    new_account = Account(
        user_id = new_account_info[&amp;quot;user_id&amp;quot;],
        password = hashed.decode(&amp;quot;utf-8&amp;quot;),
    )

    new_account.save()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use a randomly generated salt using &lt;code class=&quot;language-text&quot;&gt;bcrypt.gensalt()&lt;/code&gt;, which gets added to the password entered by the user. Then it gets hashed by using &lt;code class=&quot;language-text&quot;&gt;bcrypt.hashpw()&lt;/code&gt;, which gets decoded again before getting saved to the database.&lt;/p&gt;
&lt;p&gt;I saved the decoded password to the databse, which doesn’t really seem to make sense becuase the database probably should have encoded password, which sounds more secure. However, if I save encoded password to the database, it causes problem when the server checks the password upon login,which will be discussed in the next post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Hooks[useEffect()] How to avoid infinite loops]]></title><description><![CDATA[How to avoid potential infinite loops of while using useEffect.]]></description><link>https://jasonkang14.github.io/posts/React-Hooks-avoid-infinite-loops</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Hooks-avoid-infinite-loops</guid><pubDate>Mon, 01 Jul 2019 14:27:37 GMT</pubDate><content:encoded>&lt;p&gt;React came out with a new feature called &lt;code class=&quot;language-text&quot;&gt;React Hooks&lt;/code&gt;. As I work on a group project with three other people at a coding bootcamp, I decided to use this new feature.&lt;/p&gt;
&lt;p&gt;Before &lt;code class=&quot;language-text&quot;&gt;React Hooks&lt;/code&gt;, you had to use a &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt; in order for your React component to have a state. But with &lt;code class=&quot;language-text&quot;&gt;React Hooks&lt;/code&gt;, your function component can have a state like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Party = () =&amp;gt; {
    const [joinBtnClicked, setJoinBtnClicked] = useState(true);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very straight-forward.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I made a state called &lt;code class=&quot;language-text&quot;&gt;joinBtnClicked&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;useState()&lt;/code&gt; method allows me to declare the initial &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; of &lt;code class=&quot;language-text&quot;&gt;joinBtnClicked&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I can change the state of &lt;code class=&quot;language-text&quot;&gt;joinBtnClicked&lt;/code&gt; with a method called &lt;code class=&quot;language-text&quot;&gt;setJoinBtnClicked&lt;/code&gt; like below.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const displayPartyGenerationField = () =&amp;gt; {
    setJoinBtnClicked(false);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React Hooks&lt;/code&gt; makes my code a lot more efficient and easier to understand.&lt;/p&gt;
&lt;p&gt;I don’t need to use lifecycle methods such as &lt;code class=&quot;language-text&quot;&gt;componenetDidMount()&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;componentWillUnmount()&lt;/code&gt; anymore. I just use one method called &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; which deals with all the lifecycle methods. But I actually ran into a problem while using this method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useEffect(() =&amp;gt; {
    fetch (`${ADDRESS}party`, {mode: &amp;#39;cors&amp;#39;})
        .then (
            (response) =&amp;gt; {
                response.json().then((data) =&amp;gt; {
                    const length = data.length;
                    for(let i=0; i &amp;lt; length; i++) {
                        for (let key in data[i]) {
                            oldParty[key] = data[i][key];
                        }
                        oldParty.time = oldParty.time.slice(0, -3);
                        oldPartyArr.push(oldParty);
                        oldParty = {};
                    }
                    displayParties();
                    setPartyArr(oldPartyArr);
                })
            }
        )
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the above code, I am retrieving a list of parties that had been formed by other users, so that I can pick a party to join myself. However, when I executed this code, &lt;code class=&quot;language-text&quot;&gt;useEffect()&lt;/code&gt; kept re-rendering while I needed it to render only once.&lt;/p&gt;
&lt;p&gt;According to &lt;code class=&quot;language-text&quot;&gt;React.js&lt;/code&gt;,
&lt;code class=&quot;language-text&quot;&gt;If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument. This tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So, I simply added [] as an argument like below and the problem was solved.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useEffect(() =&amp;gt; {
    fetch (`${ADDRESS}party`, {mode: &amp;#39;cors&amp;#39;})
        .then (
            (response) =&amp;gt; {
                response.json().then((data) =&amp;gt; {
                    const length = data.length;
                    for(let i=0; i &amp;lt; length; i++) {
                        for (let key in data[i]) {
                            oldParty[key] = data[i][key];
                        }
                        oldParty.time = oldParty.time.slice(0, -3);
                        oldPartyArr.push(oldParty);
                        oldParty = {};
                    }
                    displayParties();
                    setPartyArr(oldPartyArr);
                })
            }
        )
},[])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Advanced CSS [02] Animating Underlines]]></title><description><![CDATA[Practicing Advanced CSS using SASS]]></description><link>https://jasonkang14.github.io/posts/AdvancedCSS/Animating Underlines</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/AdvancedCSS/Animating Underlines</guid><pubDate>Sun, 30 Jun 2019 20:56:37 GMT</pubDate><content:encoded>&lt;p&gt;Tried to show underline on two buttons upon mouse hover. &lt;br&gt;
CSS codes were written using &lt;code class=&quot;language-text&quot;&gt;SASS&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//main.sass
$font-stack:    Helvetica, sans-serif

Button
  border: none
  height: 40px
  width: 700px
  font: 25px $font-stack
  text-decoration: none
  background-image: linear-gradient(to right, transparent 20%, currentColor 21%)
  background-position: 0% 100%
  background-repeat: no-repeat
  background-size: 0% 3px
  transition: background-size 0.3s
  position: relative

  &amp;amp;:hover, &amp;amp;:focus
    background-size: 100% 3px



.btn_wrap
  position: relative
  top: 50%
  left: 30%
  display: flex&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A nice thing about using &lt;code class=&quot;language-text&quot;&gt;SASS&lt;/code&gt; is that I don’t need to use curly brackets or semicolons. It kinda feels like &lt;code class=&quot;language-text&quot;&gt;Python&lt;/code&gt;. You can just use indentation to use different effects.&lt;/p&gt;
&lt;p&gt;In the example above,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Button
    &amp;amp;:hover&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Button:hover&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;using &lt;code class=&quot;language-text&quot;&gt;SASS&lt;/code&gt; makes the code a lot more efficient by elminating the need to write a parent component over and over again. if you change the extension to &lt;code class=&quot;language-text&quot;&gt;scss&lt;/code&gt;, you can use curly brackets and semicolons to improve readability if you prefer that way.&lt;/p&gt;
&lt;p&gt;An underline is bascially a &lt;code class=&quot;language-text&quot;&gt;background-image&lt;/code&gt; which is initially hidden, but appears upon &lt;code class=&quot;language-text&quot;&gt;hover&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;linear-gradient&lt;/code&gt; was used to generate an image, which is a solid line in this case. The syntax for &lt;code class=&quot;language-text&quot;&gt;linear-gradient&lt;/code&gt; is like below:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;background-image: linear-gradient(direction, color-stop1, color-stop2, ...);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;transparent&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;currentColor&lt;/code&gt; are straight-forward. By adding &lt;code class=&quot;language-text&quot;&gt;transparnt&lt;/code&gt;, it makes the line appear to start slightly left of the zero position.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;background-position&lt;/code&gt; places the underline in the bottom left corner. the first value represents the horizontal position at 0% and the second value represents the vertical position at 100%.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;background-repeat&lt;/code&gt; prevents multiple instances of the lines filling the entire background of the button.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;background&lt;/code&gt;size` makes the underline zero pixels wide and three pixels tall&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;transition&lt;/code&gt; on &lt;code class=&quot;language-text&quot;&gt;background-size&lt;/code&gt; so that any change to the property will take &lt;code class=&quot;language-text&quot;&gt;0.3 seconds&lt;/code&gt; to complete&lt;/li&gt;
&lt;li&gt;on &lt;code class=&quot;language-text&quot;&gt;hover&lt;/code&gt;, the width of the underline becomes 100%, which creates a full underline, of which animation the &lt;code class=&quot;language-text&quot;&gt;transition&lt;/code&gt; takes care of&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Advanced CSS [01] Changing Font Color/Weight/Size upon Mousemove]]></title><description><![CDATA[Practicing Advanced CSS using jQuery]]></description><link>https://jasonkang14.github.io/posts/Advanced-CSS-Change-Font-Mousemove</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Advanced-CSS-Change-Font-Mousemove</guid><pubDate>Fri, 28 Jun 2019 20:56:37 GMT</pubDate><content:encoded>&lt;p&gt;Check the demonstration on YouTube by clicking the CSS logo : &lt;br&gt;&lt;br&gt;
&lt;a href =&quot;https://youtu.be/AYuYFC4slP8&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/CSS3_logo_and_wordmark.svg/1200px-CSS3_logo_and_wordmark.svg.png&quot; style=&quot;width:100px;height:100px&quot; alt=&quot;Advanced CSS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The HTML code looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;main.css&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css?family=Libre+Franklin:100,300,500,700,900&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;text-wrap width-left&amp;quot;&amp;gt;
        &amp;lt;span class=&amp;quot;circle&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;br&amp;gt;
        &amp;lt;div class=&amp;quot;text&amp;quot;&amp;gt;
            Eleanor se plaignait sans cesse qu’elle n’aimait pas ses jambes et sa grand-mère lui disait toujours en soupirant : « Si jeunesse savait, si     vieillesse pouvait » .
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
This line was added to &lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt; in order to use &lt;code class=&quot;language-text&quot;&gt;jQuery&lt;/code&gt;, and the first line in the &lt;code class=&quot;language-text&quot;&gt;body&lt;/code&gt; is the font that I retrieved from &lt;code class=&quot;language-text&quot;&gt;Google Font&lt;/code&gt;.
I used a &lt;code class=&quot;language-text&quot;&gt;span&lt;/code&gt; with a class in order to show the mouse location as it moves around the page.&lt;/p&gt;
&lt;p&gt;I used jQuery to apply &lt;code class=&quot;language-text&quot;&gt;mousemove&lt;/code&gt; events to the text like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$(&amp;#39;.text-wrap&amp;#39;).mousemove(e =&amp;gt; {
    const wrapWidth = $(&amp;#39;.text-wrap&amp;#39;).width();
    const step = wrapWidth/5;
    const nowX = e.pageX - $(&amp;#39;.text-wrap&amp;#39;).offset().left;
    $(&amp;#39;.circle&amp;#39;).css({&amp;#39;left&amp;#39;: nowX, &amp;#39;top&amp;#39;: e.pageY});

    if (nowX &amp;lt; step) {
        $(&amp;#39;.text-wrap&amp;#39;).attr(&amp;#39;class&amp;#39;, &amp;#39;text-wrap step-1&amp;#39;);
    } else if (nowX &amp;gt;= step &amp;amp;&amp;amp; nowX &amp;lt; step*2) {
        $(&amp;#39;.text-wrap&amp;#39;).attr(&amp;#39;class&amp;#39;, &amp;#39;text-wrap step-2&amp;#39;);
    } else if (nowX &amp;gt;= step*2 &amp;amp;&amp;amp; nowX &amp;lt; step*3) {
        $(&amp;#39;.text-wrap&amp;#39;).attr(&amp;#39;class&amp;#39;, &amp;#39;text-wrap step-3&amp;#39;);
    } else if (nowX &amp;gt;= step*3 &amp;amp;&amp;amp; nowX &amp;lt; step*4) {
        $(&amp;#39;.text-wrap&amp;#39;).attr(&amp;#39;class&amp;#39;, &amp;#39;text-wrap step-4&amp;#39;);
    } else if (nowX &amp;gt;= step*4 &amp;amp;&amp;amp; nowX &amp;lt; step*5) {
        $(&amp;#39;.text-wrap&amp;#39;).attr(&amp;#39;class&amp;#39;, &amp;#39;text-wrap step-5&amp;#39;);
    }
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I separated the entire page into five sections becuase I wanted to use five different font sizes. Since the element has some padding by default, &lt;code class=&quot;language-text&quot;&gt;offset().left&lt;/code&gt; was subtracted from the mouse position.&lt;/p&gt;
&lt;p&gt;The circle, which is supposed to move along witht he mouse, has its position assigned to it. The horizontal position is assigned by accounting the &lt;code class=&quot;language-text&quot;&gt;offset().left&lt;/code&gt; of the page.&lt;/p&gt;
&lt;p&gt;The CSS code looks like below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  .step-1 {
    font-weight: 100;
    color: red;
  }

  .step-2 {
    font-weight: 300;
    color: orange;
  }

  .step-3 {
    font-weight: 500;
    color: green;
  }

  .step-4 {
    font-weight: 700;
    color: blue;
  }

  .step-5 {
    font-weight: 900;
    color: purple;
  }

  * {
      cursor: none;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cursor: none;&lt;/code&gt; was applied to show the mousemovent with the circle only.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React[06]Remaking Miniter Using React VI - Forms]]></title><description><![CDATA[Remaking Miniter Using React]]></description><link>https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-six</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-six</guid><pubDate>Thu, 27 Jun 2019 19:56:37 GMT</pubDate><content:encoded>&lt;p&gt;I used three HTML form elemements for this proejct.&lt;/p&gt;
&lt;h1 id=&quot;1-textarea&quot;&gt;&lt;a href=&quot;#1-textarea&quot; aria-label=&quot;1 textarea permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Textarea&lt;/h1&gt;
&lt;p&gt;A textarea component looks like this;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&amp;#39;;

const Textarea = props =&amp;gt; {
    return (
        &amp;lt;textarea
            value={props.value}
            className={props.className}
            placeholder={props.placeholder}
            onChange={props.handleInput}
        /&amp;gt;
    );
}

export default Textarea;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt; is to handle inputs to the text area &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;className&lt;/code&gt; is to apply CSS&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;placeholder&lt;/code&gt; is for placeholder&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;onChange&lt;/code&gt; is to use &lt;code class=&quot;language-text&quot;&gt;setState()&lt;/code&gt; method to change the state of &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;&lt;br&gt;
Since Textarea does not need a constructor, I used a function format in order to define the component. Passing props allows me to omit &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;, which normally comes in front of &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;, making the code slightly more efficient.&lt;/p&gt;
&lt;p&gt;The parent component of the textarea code is below;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;handleInputChange = (event) =&amp;gt; {
        this.setState ({
            value: event.target.value
        })
    }

...

&amp;lt;Textarea
    className=&amp;quot;newMessage&amp;quot;
    placeholder=&amp;quot;What&amp;#39;s happening?&amp;quot;
    value={this.state.value}
    handleInput={this.handleInputChange}
/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When an input is made into the textarea, it runs &lt;code class=&quot;language-text&quot;&gt;handleInputchange()&lt;/code&gt; and changes the state of &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;, which will be used as contents for a tweet.&lt;/p&gt;
&lt;h1 id=&quot;2-input&quot;&gt;&lt;a href=&quot;#2-input&quot; aria-label=&quot;2 input permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Input&lt;/h1&gt;
&lt;p&gt;This is used for id and password section.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&amp;#39;;

const Input = props =&amp;gt; {
    return (
        &amp;lt;input
            className={props.className}
            type={props.type}
            name={props.name}
            placeholder={props.placeholder}
            autoComplete={props.autoComplete}
            onChange={props.changeInput}
        /&amp;gt;
    );
}

export default Input;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the only thing that is different is &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; since an &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;element can be of different types. &lt;br&gt;
also added &lt;code class=&quot;language-text&quot;&gt;autoComplete&lt;/code&gt; upon the advice of Chrome brower.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;
    &amp;lt;Input
    type=&amp;quot;text&amp;quot;
    placeholder=&amp;quot;Enter ID&amp;quot;
    className=&amp;quot;enterId&amp;quot;
    name=&amp;quot;userId&amp;quot;
    autoComplete=&amp;quot;username&amp;quot;
    changeInput={this.handleChange}
    /&amp;gt;

    &amp;lt;Input
    type=&amp;quot;password&amp;quot;
    name=&amp;quot;password&amp;quot;
    placeholder=&amp;quot;Password&amp;quot;
    className=&amp;quot;enterPassword&amp;quot;
    autocomplete=&amp;quot;current-password&amp;quot;
    changeInput={this.handleChange}
    /&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;very similar to &lt;code class=&quot;language-text&quot;&gt;textarea&lt;/code&gt;, it takes an &lt;code class=&quot;language-text&quot;&gt;onChange&lt;/code&gt; attribute to run &lt;code class=&quot;language-text&quot;&gt;handleChange()&lt;/code&gt; so that input value to the &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; elements can be used to change the &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; of value&lt;/p&gt;
&lt;h1 id=&quot;3-button&quot;&gt;&lt;a href=&quot;#3-button&quot; aria-label=&quot;3 button permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Button&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&amp;#39;;

const Button = props =&amp;gt; {
    return (
        &amp;lt;button
            className={props.className}
            name={props.name}
            onClick={props.btnClicked}
        &amp;gt;
            {props.innerHTML}
        &amp;lt;/button&amp;gt;
    );
}

export default Button;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;button&lt;/code&gt; elements have an &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; event to take care of it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Button
    className=&amp;quot;make-btn&amp;quot;
    name={`${this.state.mode === &amp;quot;generate&amp;quot; ? &amp;quot;makeTweetBtn&amp;quot; : &amp;quot;updateTweetBtn&amp;quot;}`}
    innerHTML={`${this.state.mode === &amp;quot;generate&amp;quot; ? &amp;quot;Tweet&amp;quot; : &amp;quot;Update&amp;quot;}`}
    btnClicked={this.state.mode === &amp;quot;generate&amp;quot; ? this.generateNewTweet : this.updateTweet}
/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each tweet also has an &lt;code class=&quot;language-text&quot;&gt;edit&lt;/code&gt; button. Therefore, when the &lt;code class=&quot;language-text&quot;&gt;edit&lt;/code&gt; button is clicked, it changes the generate button into an edit button, which is why the conditional operator was used.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React[05]Remaking Miniter Using React V - List and Keys]]></title><description><![CDATA[Remaking Miniter Using React]]></description><link>https://jasonkang14.github.io/posts/React Remaking-Miniter-Using-React-part-five</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React Remaking-Miniter-Using-React-part-five</guid><pubDate>Wed, 26 Jun 2019 20:56:37 GMT</pubDate><content:encoded>&lt;p&gt;A React list is like a JavaScript array, but it is recommended—not required—to provide a key to each element of a list. The key provided to each elemenet must be unique to the element. React executes the code whether a unique key is assigned to each element or not, but it keep throwing a warning if it is not.&lt;/p&gt;
&lt;h1 id=&quot;1-keys&quot;&gt;&lt;a href=&quot;#1-keys&quot; aria-label=&quot;1 keys permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Keys&lt;/h1&gt;
&lt;p&gt;According to the React official document, key helps React identify which items have changed and are added/removed. Which is why keys have to be unique in order to distinguish which items have been affected by a change.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const todoItems = todos.map((todo) =&amp;gt;
  &amp;lt;li key={todo.id}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have said that React will still execute your code even if a list doesn’t have a key assigned to it, and that is because React automatically assigns an index as a key to each element, but there are some negative impacts to it, which is why you gotta get some unique keys to each and every item. Details can be found &lt;a href=&quot;https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is recommended to use &lt;code class=&quot;language-text&quot;&gt;shortid&lt;/code&gt;, which generates short non-sequential url-friendly unique keys like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var shortid = require(&amp;#39;shortid&amp;#39;);
function createNewTodo(text) {
  return {
    completed: false,
    id: shortid.generate(),
    text
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-keys-with-map-method&quot;&gt;&lt;a href=&quot;#2-keys-with-map-method&quot; aria-label=&quot;2 keys with map method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Keys with &lt;code class=&quot;language-text&quot;&gt;map()&lt;/code&gt; method&lt;/h1&gt;
&lt;p&gt;to display tweets for my miniter project, I made each tweet as an object and nested it into an array. Instead of requiring &lt;code class=&quot;language-text&quot;&gt;shortid&lt;/code&gt;, I decided to use the indexes of the array with a prefix like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  this.state.tweetArr.map((el, idx) =&amp;gt;
          &amp;lt;DisplayTweets
              key={`tweet-${idx}`}
              tweet={el}
          /&amp;gt;

  )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if I were to connect this with an API, it would be better to require &lt;code class=&quot;language-text&quot;&gt;shortid&lt;/code&gt;, but for the sake of this specific project, I decided to go with this.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React[04]Remaking Miniter Using React IV - Handling Events]]></title><description><![CDATA[Remaking Miniter Using React]]></description><link>https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-four</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-four</guid><pubDate>Tue, 25 Jun 2019 17:56:37 GMT</pubDate><content:encoded>&lt;p&gt;React event handlers are slighlty different from HTML event handlers&lt;/p&gt;
&lt;h1 id=&quot;1-react-events-are-named-using-camelcase-and-pass-a-function-as-the-event-handler-using-jsx&quot;&gt;&lt;a href=&quot;#1-react-events-are-named-using-camelcase-and-pass-a-function-as-the-event-handler-using-jsx&quot; aria-label=&quot;1 react events are named using camelcase and pass a function as the event handler using jsx permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. React events are named using camelCase and pass a function as the event handler using JSX&lt;/h1&gt;
&lt;p&gt;notice the difference below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//HTML
&amp;lt;button onclick=&amp;quot;activateLasers()&amp;quot;&amp;gt;
  Activate Lasers
&amp;lt;/button&amp;gt;

//React
&amp;lt;button onClick={activateLasers}&amp;gt;
  Activate Lasers
&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-call-eventpreventdefault-explicitly-to-prevent-default-behavior&quot;&gt;&lt;a href=&quot;#2-call-eventpreventdefault-explicitly-to-prevent-default-behavior&quot; aria-label=&quot;2 call eventpreventdefault explicitly to prevent default behavior permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Call event.preventDefault() explicitly to prevent default behavior&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function ActionLink() {
  function handleClick(e) {
    e.preventDefault();
    console.log(&amp;#39;The link was clicked.&amp;#39;);
  }

  return (
    &amp;lt;a href=&amp;quot;#&amp;quot; onClick={handleClick}&amp;gt;
      Click me
    &amp;lt;/a&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-binding-this&quot;&gt;&lt;a href=&quot;#3-binding-this&quot; aria-label=&quot;3 binding this permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. binding &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;since event handlers are added as a method on a class, binding is required in order to make &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;work in callback functions. Otherwise, when a callback function receives &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;, the &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; will be &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; instead of the class to which the method belongs.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};

    // This binding is necessary to make `this` work in the callback
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState(state =&amp;gt; ({
      isToggleOn: !state.isToggleOn
    }));
  }

  render() {
    return (
      &amp;lt;button onClick={this.handleClick}&amp;gt;
        {this.state.isToggleOn ? &amp;#39;ON&amp;#39; : &amp;#39;OFF&amp;#39;}
      &amp;lt;/button&amp;gt;
    );
  }
}

ReactDOM.render(
  &amp;lt;Toggle /&amp;gt;,
  document.getElementById(&amp;#39;root&amp;#39;)
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if you build a habit of writing the method in an ES6 format, binding is not necessary.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//ES6 example I
class LoggingButton extends React.Component {
  // This syntax ensures `this` is bound within handleClick.
  // Warning: this is *experimental* syntax.
  handleClick = () =&amp;gt; {
    console.log(&amp;#39;this is:&amp;#39;, this);
  }

  render() {
    return (
      &amp;lt;button onClick={this.handleClick}&amp;gt;
        Click me
      &amp;lt;/button&amp;gt;
    );
  }
}

//ES6 exmample II
class LoggingButton extends React.Component {
  handleClick() {
    console.log(&amp;#39;this is:&amp;#39;, this);
  }

  render() {
    // This syntax ensures `this` is bound within handleClick
    return (
      &amp;lt;button onClick={(e) =&amp;gt; this.handleClick(e)}&amp;gt;
        Click me
      &amp;lt;/button&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the problem with the above syntax is that a different callback is created each time &lt;code class=&quot;language-text&quot;&gt;LoggingButton&lt;/code&gt; renders. If this callback is passed as a prop to lower components, it might do an extra re-rendering, which would decrease the efficiency of your code. So binding is recommended.&lt;/p&gt;
&lt;h1 id=&quot;4-passing-arguments-to-event-handlers&quot;&gt;&lt;a href=&quot;#4-passing-arguments-to-event-handlers&quot; aria-label=&quot;4 passing arguments to event handlers permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Passing arguments to event handlers&lt;/h1&gt;
&lt;p&gt;Either way is fine&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;button onClick={(e) =&amp;gt; this.deleteRow(id, e)}&amp;gt;Delete Row&amp;lt;/button&amp;gt;
&amp;lt;button onClick={this.deleteRow.bind(this, id)}&amp;gt;Delete Row&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[React[03]Remaking Miniter Using React III - State and Lifecycle]]></title><description><![CDATA[Remaking Miniter Using React]]></description><link>https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-three</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-three</guid><pubDate>Mon, 24 Jun 2019 22:56:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt; is a way to store and update data or information that a component has. &lt;br&gt;
As mentioned in a previous post, a &lt;code class=&quot;language-text&quot;&gt;component&lt;/code&gt; must be defined as a &lt;code class=&quot;language-text&quot;&gt;class component&lt;/code&gt; in order to use &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-adding-local-state-to-a-class&quot;&gt;&lt;a href=&quot;#1-adding-local-state-to-a-class&quot; aria-label=&quot;1 adding local state to a class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Adding Local State to a Class&lt;/h1&gt;
&lt;p&gt;Use a &lt;code class=&quot;language-text&quot;&gt;class constructor&lt;/code&gt; in order to assign initial &lt;code class=&quot;language-text&quot;&gt;this.state&lt;/code&gt; to a component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;It is {this.state.date.toLocaleTimeString()}.&amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Class components should always call the base constructor with &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;. by passing &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; to the base constructor, it — but why?&lt;/p&gt;
&lt;h1 id=&quot;2-adding-lifecycle-methods-to-a-class&quot;&gt;&lt;a href=&quot;#2-adding-lifecycle-methods-to-a-class&quot; aria-label=&quot;2 adding lifecycle methods to a class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Adding Lifecycle Methods to a Class&lt;/h1&gt;
&lt;p&gt;Using the example of the &lt;code class=&quot;language-text&quot;&gt;Clock&lt;/code&gt; component writeen in section 1, &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;mounting&lt;/code&gt;: set up a timer whenever the &lt;code class=&quot;language-text&quot;&gt;Clock&lt;/code&gt; is rendered to the DOM for the first time &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;unmounting&lt;/code&gt;: clear the timer whenever the DOM produced by the &lt;code class=&quot;language-text&quot;&gt;Clock&lt;/code&gt; is removed&lt;/p&gt;
&lt;p&gt;this is the order of how React inserts components into the DOM: &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor() -&gt; componentWillMount() -&gt; render() -&gt; componentDidMount()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like below, you can do &lt;code class=&quot;language-text&quot;&gt;mounting&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;unmounting&lt;/code&gt; by using &lt;code class=&quot;language-text&quot;&gt;componentDidMount()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;componentWillUnmount()&lt;/code&gt; respectively.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () =&amp;gt; this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;It is {this.state.date.toLocaleTimeString()}.&amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;compononetwillmount&quot;&gt;&lt;a href=&quot;#compononetwillmount&quot; aria-label=&quot;compononetwillmount permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;compononetWillMount()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;called before the &lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;only called once in a life of a component&lt;/li&gt;
&lt;li&gt;therefore, no access to the DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;compononetdidmount&quot;&gt;&lt;a href=&quot;#compononetdidmount&quot; aria-label=&quot;compononetdidmount permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;compononetDidMount()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;called after the &lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;use this method if your initialization relies on the DOM (different from &lt;code class=&quot;language-text&quot;&gt;componentWillMount()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;able to set the state with &lt;code class=&quot;language-text&quot;&gt;this.setState()&lt;/code&gt;, which will trigger a re-render, therefore, displayed on the browser&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; data from a server&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;componentwillunmount&quot;&gt;&lt;a href=&quot;#componentwillunmount&quot; aria-label=&quot;componentwillunmount permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;componentWillUnmount()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;called right before React unmounts and destroys components&lt;/li&gt;
&lt;li&gt;can’t set state before unmounting&lt;/li&gt;
&lt;li&gt;remove &lt;code class=&quot;language-text&quot;&gt;event listeners&lt;/code&gt; added in &lt;code class=&quot;language-text&quot;&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cancelling active network requests&lt;/li&gt;
&lt;li&gt;cleaning up DOM elements created in &lt;code class=&quot;language-text&quot;&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[React[02] Remaking Miniter Using React II - Components and Props]]></title><description><![CDATA[Remaking Miniter Using React]]></description><link>https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-two</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-two</guid><pubDate>Sun, 23 Jun 2019 14:56:37 GMT</pubDate><content:encoded>&lt;p&gt;React app consists of multiple &lt;code class=&quot;language-text&quot;&gt;components&lt;/code&gt; and they transfer imformation in the format of &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; (&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; stands for properties). To be exact, a parent component transfers its infomration to its children as &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-function-and-class&quot;&gt;&lt;a href=&quot;#1-function-and-class&quot; aria-label=&quot;1 function and class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Function and Class&lt;/h1&gt;
&lt;p&gt;you can write a function to define a component&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Welcome(props) {
  return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can also use an ES6 class to define a component&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Welcome extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From my own understanding, it is better to use an ES6 class when you define a component, because it allows you to use &lt;code class=&quot;language-text&quot;&gt;constructor()&lt;/code&gt; method to set &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;, which is a topic to discuss later&lt;/p&gt;
&lt;h1 id=&quot;2-composing-components&quot;&gt;&lt;a href=&quot;#2-composing-components&quot; aria-label=&quot;2 composing components permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Composing Components&lt;/h1&gt;
&lt;p&gt;Components can refer to other components in their input, which allows us to re-use the same component for different purposes. For example, a single button component can be used for log-in, sign-up, and main-tweet pages.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Welcome(props) {
  return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;;
}

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Welcome name=&amp;quot;Sara&amp;quot; /&amp;gt;
      &amp;lt;Welcome name=&amp;quot;Cahal&amp;quot; /&amp;gt;
      &amp;lt;Welcome name=&amp;quot;Edite&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

ReactDOM.render(
  &amp;lt;App /&amp;gt;,
  document.getElementById(&amp;#39;root&amp;#39;)
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above, you can see that the &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt; component refers to &lt;code class=&quot;language-text&quot;&gt;Welcome&lt;/code&gt; component.&lt;br&gt;
You can maximize the use of children components to simplify a parent component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// parnet component
function Comment(props) {
  return (
    &amp;lt;div className=&amp;quot;Comment&amp;quot;&amp;gt;
      &amp;lt;div className=&amp;quot;UserInfo&amp;quot;&amp;gt;
        &amp;lt;img className=&amp;quot;Avatar&amp;quot;
          src={props.author.avatarUrl}
          alt={props.author.name}
        /&amp;gt;
        &amp;lt;div className=&amp;quot;UserInfo-name&amp;quot;&amp;gt;
          {props.author.name}
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;Comment-text&amp;quot;&amp;gt;
        {props.text}
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;Comment-date&amp;quot;&amp;gt;
        {formatDate(props.date)}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above parent component is really long. But you can simplify it by using children component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// child component called Avatar
function Avatar(props) {
  return (
    &amp;lt;img className=&amp;quot;Avatar&amp;quot;
      src={props.user.avatarUrl}
      alt={props.user.name}
    /&amp;gt;

  );
}

// parent component re-written
function Comment(props) {
  return (
    &amp;lt;div className=&amp;quot;Comment&amp;quot;&amp;gt;
      &amp;lt;div className=&amp;quot;UserInfo&amp;quot;&amp;gt;
        &amp;lt;Avatar user={props.author} /&amp;gt;
        &amp;lt;div className=&amp;quot;UserInfo-name&amp;quot;&amp;gt;
          {props.author.name}
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;Comment-text&amp;quot;&amp;gt;
        {props.text}
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;Comment-date&amp;quot;&amp;gt;
        {formatDate(props.date)}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[React[01] Remaking Miniter Using React I - JSX]]></title><description><![CDATA[Remaking Miniter Using React]]></description><link>https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-one</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/React-Remaking-Miniter-Using-React-part-one</guid><pubDate>Sat, 22 Jun 2019 22:56:37 GMT</pubDate><content:encoded>&lt;p&gt;Decided to dig deeper into the front-end development. Used &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; to re-do the miniter project which I had done using DOM&lt;/p&gt;
&lt;h1 id=&quot;1-jsx-format&quot;&gt;&lt;a href=&quot;#1-jsx-format&quot; aria-label=&quot;1 jsx format permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. JSX format&lt;/h1&gt;
&lt;p&gt;Simply put, it’s using HTML elements as a string like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const name = &amp;#39;Josh Perez&amp;#39;;
const element = &amp;lt;h1&amp;gt;Hello, {name}&amp;lt;/h1&amp;gt;;

ReactDOM.render(
  element,
  document.getElementById(&amp;#39;root&amp;#39;)
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any JavaScript expression can go inside the curly braces in JSX. For the longest time, I was wondering why every single example was rendinring the element to document.getElementById(‘root’) and found out that HTML components written in React becomes children to that element. like below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;gt;
  &amp;lt;head&amp;gt;...&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;noscript&amp;gt;You need to enable JavaScript to run this app.&amp;lt;/noscript&amp;gt;
    &amp;lt;div id=&amp;quot;root&amp;gt;...&amp;lt;/div&amp;gt;
      &amp;lt;!--
        ... has code written in React
      --&amp;gt;
  &amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can just close the element directly like this. without a separate closing tag&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;button name=&amp;quot;input-btn&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-jsx-as-an-object&quot;&gt;&lt;a href=&quot;#2-jsx-as-an-object&quot; aria-label=&quot;2 jsx as an object permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. JSX as an object&lt;/h1&gt;
&lt;p&gt;if you write something like this,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const element = (
  &amp;lt;h1 className=&amp;quot;greeting&amp;quot;&amp;gt;
    Hello, world!
  &amp;lt;/h1&amp;gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this is same as this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const element = React.createElement(
  &amp;#39;h1&amp;#39;,
  {className: &amp;#39;greeting&amp;#39;},
  &amp;#39;Hello, world!&amp;#39;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Data Crawling Using Scrapy]]></title><description><![CDATA[Data Analysis project using Scrapy and Luigi]]></description><link>https://jasonkang14.github.io/posts/DataAnalysis-Scrapy</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/DataAnalysis-Scrapy</guid><pubDate>Fri, 21 Jun 2019 19:56:37 GMT</pubDate><content:encoded>&lt;p&gt;With a colleague at WeCode, which is a coding bootcamp based in Seoul, South Korea, I am doing a data analysis project on the relationship betwen box office and music daily chart. We are trying to see how box office affects what people listen to in their daily lives. Not sure how much correlation there would be, but this would be beneficial.&lt;/p&gt;
&lt;h1 id=&quot;1-what-is-scrapy&quot;&gt;&lt;a href=&quot;#1-what-is-scrapy&quot; aria-label=&quot;1 what is scrapy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. What is Scrapy?&lt;/h1&gt;
&lt;p&gt;According to the official document, &lt;code class=&quot;language-text&quot;&gt;Scrapy&lt;/code&gt; is an application framework for crawling web sites and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival.&lt;/p&gt;
&lt;h1 id=&quot;2-starting-a-scrapy-project&quot;&gt;&lt;a href=&quot;#2-starting-a-scrapy-project&quot; aria-label=&quot;2 starting a scrapy project permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Starting a &lt;code class=&quot;language-text&quot;&gt;Scrapy&lt;/code&gt; project&lt;/h1&gt;
&lt;p&gt;I intalled &lt;code class=&quot;language-text&quot;&gt;Scrapy&lt;/code&gt; in a virtual environment created with &lt;code class=&quot;language-text&quot;&gt;Miniconda&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(bedataproj) pip install scrapy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And created a &lt;code class=&quot;language-text&quot;&gt;Scrapy&lt;/code&gt; project&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(bedataproj) scrapy startproject project_name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code class=&quot;language-text&quot;&gt;genspider&lt;/code&gt; command helps create a data crawling spider.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(bedataproj) scrapy genspider spider_name website&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below is the spider&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;##spider.py

import scrapy

class MusicSpiderSpider(scrapy.Spider):
    name = &amp;#39;music_spider&amp;#39;
    start_urls = [&amp;#39;http://www.mnet.com/chart/TOP100/20190623&amp;#39;]

    def parse(self, response):
        top_selector = &amp;#39;.MMLITitle_Box&amp;#39;

        for music in response.css(top_selector):
            musician = &amp;#39;.MMLITitle_Info .MMLIInfo_Artist ::text&amp;#39;
            song = &amp;#39;.MMLITitleSong_Box .MMLI_Song ::text&amp;#39;
            album = &amp;#39;.MMLITitle_Info .MMLIInfo_Album ::text&amp;#39;
            yield {
                &amp;quot;song&amp;quot; : music.css(song).extract_first(),
                &amp;quot;musician&amp;quot; : music.css(musician).extract_first(),
                &amp;quot;album&amp;quot; : music.css(album).extract_first(),
            }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will explain each component of the spider. &lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; is the name of the spider&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;start_urls&lt;/code&gt; is the website you would like to crawl your data from &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;parse&lt;/code&gt; function is how you are going to parse the crawled data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you crawl data from a webiste using &lt;code class=&quot;language-text&quot;&gt;Scrapy&lt;/code&gt;, the easiest way is using &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt; and/or &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; as if you are applying CSS to HTML.&lt;/p&gt;
&lt;p&gt;Appending &lt;code class=&quot;language-text&quot;&gt;::text&lt;/code&gt; to a selector means that I am going to crawl innerText of the class. &lt;br&gt;
And then I called &lt;code class=&quot;language-text&quot;&gt;extract_first()&lt;/code&gt; on the object returned by &lt;code class=&quot;language-text&quot;&gt;music.css(selector)&lt;/code&gt; because I am extracting the first element that matches the selector—in case there are more than one.&lt;/p&gt;
&lt;p&gt;Then you run &lt;code class=&quot;language-text&quot;&gt;Scrapy&lt;/code&gt; like below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;scrapy runspider spider_name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Miniter[07]Sending Get/Post Requests]]></title><description><![CDATA[Sending a post request to a locally created API to build log-in, sign-up, and making tweets.]]></description><link>https://jasonkang14.github.io/posts/Miniter-Sending-Get-Post-Requests</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Miniter-Sending-Get-Post-Requests</guid><pubDate>Thu, 20 Jun 2019 21:56:37 GMT</pubDate><content:encoded>&lt;p&gt;There are two ways to &lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; data from server:&lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt;.&lt;br&gt;
Thankfully the methods are very straight-forward. &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; is used in order to merely get data, and &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt; is used to interact with the server by posting some data and retrieve it back.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; was used to display previously generated tweets on screen, and &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt; was used to sign up, log in, and generate new tweets.&lt;/p&gt;
&lt;h1 id=&quot;1-get-to-display-previously-generated-tweets&quot;&gt;&lt;a href=&quot;#1-get-to-display-previously-generated-tweets&quot; aria-label=&quot;1 get to display previously generated tweets permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. &lt;code class=&quot;language-text&quot;&gt;Get&lt;/code&gt; to display previously generated tweets&lt;/h1&gt;
&lt;p&gt;Here is the code for the &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; method;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fetch (&amp;#39;http://localhost:8000/api/tweet&amp;#39;, {mode: &amp;#39;cors&amp;#39;})
  .then (
    (response) =&amp;gt; {
      response.json().then((data) =&amp;gt; {
        for (let i=data.length-1; i&amp;gt;=0; i--) {
          const originalTweet = document.createElement(&amp;#39;li&amp;#39;);
          originalTweet.innerHTML = makeTweetList(data[i]);
          elTweetList.appendChild(originalTweet);
        }
      });
    }
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; information from the url&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;then&lt;/code&gt; wait for a &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;then&lt;/code&gt; use the &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; from the &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; in order to do something.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the back-end part:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Tweet_class(View):
    def get(self, request, *args, **kwargs):
        tweet_list = list(Tweet.objects.values())
        return JsonResponse(tweet_list, safe=False)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when the server gets a &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; request, it returns tweet_list, which is in the form of an array(or a list in python) to the front-end. Therefore, the fetched &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; looks like an array.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/65284788_10219135481398812_1402279772439969792_o.jpg?_nc_cat=101&amp;#x26;_nc_oc=AQlnw2un3dSg9S6vSmjPY2OdcZkfxMePJvhGY1XZnJli6Cejciwe2DmA25wqszg89WQ&amp;#x26;_nc_ht=scontent-hkg3-1.xx&amp;#x26;oh=6bab252688ffa04c297e64b0b83a01b0&amp;#x26;oe=5DC1DE49&quot; alt=&quot;fetched data&quot;&gt;&lt;/p&gt;
&lt;p&gt;The retrieved data ges paired up with previously written code to display previously generated tweets.&lt;/p&gt;
&lt;h1 id=&quot;2-post-to-interact-with-the-server&quot;&gt;&lt;a href=&quot;#2-post-to-interact-with-the-server&quot; aria-label=&quot;2 post to interact with the server permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. &lt;code class=&quot;language-text&quot;&gt;Post&lt;/code&gt; to interact with the server.&lt;/h1&gt;
&lt;p&gt;Here is how I wrote a JavaScript code for sign-up.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const signUp = () =&amp;gt; {
  fetch(&amp;#39;http://localhost:8000/api/account&amp;#39;, {
    method: &amp;#39;post&amp;#39;,
    headers: {
      &amp;quot;Content-type&amp;quot;: &amp;quot;application/x-www-form-urlencoded; charset=UTF-8&amp;quot;
    },
    body: JSON.stringify({
      &amp;quot;user&amp;quot; : elNewId.value,
      &amp;quot;name&amp;quot; : elNewName.value,
      &amp;quot;password&amp;quot; : elNewPassword.value,
      &amp;quot;profile&amp;quot; : elNewProfile.value
    })
  })

  .then(
    (response) =&amp;gt; {
      console.log(1);
      response.json().then((data) =&amp;gt; {
        console.log(data);
        alert(&amp;quot;회원가입 성공&amp;quot;);
      })
  })

  .catch(function (error) {
    console.log(&amp;#39;Request failed&amp;#39;, error);
  });
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;signUp()&lt;/code&gt; gets invoked when sign-up button is clicked. In order to sign up for Miniter,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; information from the url&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt; your data (userid, name, password, profile)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;then&lt;/code&gt; wait for a &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;then&lt;/code&gt; use the &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; from the &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; in order to do something.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When a &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt; request is made from the front-end, the back-end receives data and stores it in the form of a list (or an array in JavaScript).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/64495197_10219135524159881_7340781733786157056_n.jpg?_nc_cat=100&amp;#x26;_nc_oc=AQnFZmh8ODTkhgdufGuYGOThYTRTOXGMbso3gVjVDtF8cXxXrVkhf7s5vYRsiel7R88&amp;#x26;_nc_ht=scontent-hkg3-1.xx&amp;#x26;oh=1c2a093e2bb525bcbf3447d4c5dfa806&amp;#x26;oe=5D8C99A4&quot; alt=&quot;sign up&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Miniter[06]Making an API Using Django without REST framework II]]></title><description><![CDATA[Making an API for the Miniter project with Django without using the REST framework.]]></description><link>https://jasonkang14.github.io/posts/Miniter-Link-API-to-HTML</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Miniter-Link-API-to-HTML</guid><pubDate>Wed, 19 Jun 2019 22:36:37 GMT</pubDate><content:encoded>&lt;p&gt;Ran into so many errors while doing this assignment. Let me try to walk you through it.&lt;/p&gt;
&lt;h1 id=&quot;1-csrf-failed-csrf-token-is-incorrect-or-missing&quot;&gt;&lt;a href=&quot;#1-csrf-failed-csrf-token-is-incorrect-or-missing&quot; aria-label=&quot;1 csrf failed csrf token is incorrect or missing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. CSRF Failed: CSRF token is incorrect or missing&lt;/h1&gt;
&lt;p&gt;CSRF stands for Cross Site Request Forgery, which is an attack that tricks a web browser into executing an unwanted action. CSRF token first appeared during the second generation of the web development where front-end and back-end developments were done on the same server.&lt;/p&gt;
&lt;p&gt;Anti-CSRF tokens were developed for a security reason that an attacker, who knows the form of a web, could request something to the server and do something that a web developer did not intend. Therefore, CSRF protection ensures that only the form that the web developer of the webpage created may send requests to the server.&lt;/p&gt;
&lt;p&gt;However, the protection is no longer needed since front-end and back-end developments are done separately. You can disable CSRF validation by disabling csrf section in &lt;code class=&quot;language-text&quot;&gt;MIDDLEWARE&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt; like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MIDDLEWARE = [
    &amp;#39;django.middleware.security.SecurityMiddleware&amp;#39;,
    &amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;,
    &amp;#39;django.middleware.common.CommonMiddleware&amp;#39;,
    &amp;#39;api.middleware.DisableCsrfCheck&amp;#39;,
    #&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;,       ## to disable CSRF validation
    &amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;,
    &amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;,
    &amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;,
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-cors-error&quot;&gt;&lt;a href=&quot;#2-cors-error&quot; aria-label=&quot;2 cors error permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. CORS Error&lt;/h1&gt;
&lt;p&gt;CORS stands for Cross-Origin Resource Sharing, which is a standard that allows a server to relax the same-origin policy. The same-origin policy is a security mechanism that restricts how a document/script loaded from one origin can interact with a resource from another origin. CORS allows some cross-origin requests while rejecting others.&lt;/p&gt;
&lt;p&gt;Cross-Site Request Forgery is an attempt to take advantage of the browser’s cookie storage system. A browser would store relevant session cookie when someone signs into a web application. And everytime he or she revisits the web the API will recognized the stored session cookie upon further HTTP requests.&lt;/p&gt;
&lt;p&gt;The problem is that the browser automatically includes any relevant cookies stored for a domain when another request is made to that exact domain. Therefore, when an attacker sends a request to the API, the browser includes the relevant cookies. The attacker gains authenticated access to the website.&lt;/p&gt;
&lt;p&gt;The easiest way to solve the problem would be installing the CORS plugin on your browser. However, this does not fix everything because this would mean that your code only works on computers which have the plugin installed. Therefore, it is the best to fix the problem on the back-end side in order to ensure that anyone who requests such API may not have a problem.&lt;/p&gt;
&lt;p&gt;It is simple. You just have to add a package that allows CORS.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;## settings.py
INSTALLED_APPS = [
    &amp;#39;django.contrib.admin&amp;#39;,
    &amp;#39;django.contrib.auth&amp;#39;,
    &amp;#39;django.contrib.contenttypes&amp;#39;,
    &amp;#39;django.contrib.sessions&amp;#39;,
    &amp;#39;django.contrib.messages&amp;#39;,
    &amp;#39;django.contrib.staticfiles&amp;#39;,
    &amp;#39;api&amp;#39;,              ## name of the app
    &amp;#39;corsheaders&amp;#39;,      ## added to allow CORS
]

MIDDLEWARE = [
    &amp;#39;django.middleware.security.SecurityMiddleware&amp;#39;,
    &amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;,
    &amp;#39;django.middleware.common.CommonMiddleware&amp;#39;,
    &amp;#39;api.middleware.DisableCsrfCheck&amp;#39;,
    #&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;,         ## added to disable CSRF validation
    &amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;,
    &amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;,
    &amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;,
    &amp;#39;corsheaders.middleware.CorsMiddleware&amp;#39;,              ## added to allow CORS
]


CORS_ORIGIN_ALLOW_ALL=True       # added to the bottom of settings.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Miniter[05]Making an API Using Django without REST framework I]]></title><description><![CDATA[Making an API for the Miniter project with Django without using the REST framework.]]></description><link>https://jasonkang14.github.io/posts/Miniter-API-sign-up</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Miniter-API-sign-up</guid><pubDate>Tue, 18 Jun 2019 22:36:37 GMT</pubDate><content:encoded>&lt;p&gt;Even though I finished a tutorial on djangoproject.com, it was still a struggle to even start an assignment/project on back-end because I have never done it before. One of my colleagues who had some experience with back-end development went ahead of me. Looking at his endproduct gave me an idea of what I am suppsoed to do.&lt;/p&gt;
&lt;h1 id=&quot;1-virtual-environment-with-miniconda&quot;&gt;&lt;a href=&quot;#1-virtual-environment-with-miniconda&quot; aria-label=&quot;1 virtual environment with miniconda permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Virtual Environment with Miniconda&lt;/h1&gt;
&lt;p&gt;I used Miniconda to create a virtual environment to do my back-end project. Detailed instruction how to install Miniconda is &lt;a href=&quot;https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/20/conda/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Virtual environment helps to keep dependencies required by different projects especially you have to use different versions of python or django for each project.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#create a virtual environment
conda create -n environment_name python=python_version anaconda

#activate a virtual environment
source activate environment_name

#deactivate the virtual environment
source deactivate

#remove the virtual environment if no longer needed
conda remove -n environment_name -all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-understanding-different-py-files&quot;&gt;&lt;a href=&quot;#2-understanding-different-py-files&quot; aria-label=&quot;2 understanding different py files permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Understanding different “.py” files&lt;/h1&gt;
&lt;p&gt;I got to understan what each &lt;code class=&quot;language-text&quot;&gt;.py&lt;/code&gt; file does by working on this project.
&lt;code class=&quot;language-text&quot;&gt;manage.py&lt;/code&gt;: a command-line utility. you can run different command lines such as makemigrations, migrate, shell, and runserver (these are pretty much all I had to use until I ran into a problem, which I will explain later in this post)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;: settings/configurations for this Django project&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;urls.py&lt;/code&gt;: the URL declaration for the project&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;models.py&lt;/code&gt;: define each model that this Django project needs. model is like class in python which helps with creating objects&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;views.py&lt;/code&gt;: takes a web request and returns a web response&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-making-objects&quot;&gt;&lt;a href=&quot;#3-making-objects&quot; aria-label=&quot;3 making objects permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Making objects&lt;/h1&gt;
&lt;p&gt;You can use either &lt;code class=&quot;language-text&quot;&gt;python manage.py shell&lt;/code&gt; command or create an object direclty from the &lt;code class=&quot;language-text&quot;&gt;admin&lt;/code&gt; page. Objects are created according to how class is defined in &lt;code class=&quot;language-text&quot;&gt;models.py&lt;/code&gt;I tried both ways since I am only working on the back-end side right now.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;## models.py

def user_list(request):
    user_list = []
    for user in  User.objects.all():
        user_list.append({
            &amp;#39;user_text&amp;#39;: user.user_text,
            &amp;#39;name&amp;#39;: user.name,
            &amp;#39;date&amp;#39;: user.date,
            &amp;#39;content&amp;#39;: user.content,
            &amp;#39;password&amp;#39;: user.password,
        })
    return JsonResponse(user_list, safe=False)

## views.py

def user_list(request):
    user_list = []
    for user in  User.objects.all():
        user_list.append({
            &amp;#39;user_text&amp;#39;: user.user_text,
            &amp;#39;name&amp;#39;: user.name,
            &amp;#39;date&amp;#39;: user.date,
            &amp;#39;content&amp;#39;: user.content,
            &amp;#39;password&amp;#39;: user.password,
        })
    return JsonResponse(user_list, safe=False)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;python manage.py shell

from api.models import User  # importing the class created/written in models.py

user = User(user_text=&amp;quot;jkang14&amp;quot;, name=&amp;quot;jason&amp;quot;, ..., content=&amp;quot;first tweet&amp;quot;, password=&amp;quot;firstpassword&amp;quot;)    # assign attributes as needed

user.save()      # save above information as an object, which gets appended to a list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;4-changing-attributes&quot;&gt;&lt;a href=&quot;#4-changing-attributes&quot; aria-label=&quot;4 changing attributes permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Changing attributes&lt;/h1&gt;
&lt;p&gt;I ran into a problem when I added a password attribute to the User class. I created an object before adding the attribute, so the table already had some data. When I tried to migrate after changing my model, I kept running into an error that the password attribute needs a default value. even after I set a default value(default=‘password’), I kept getting the error message.&lt;/p&gt;
&lt;p&gt;I Googled—like any other developers would do—and found out that if I delete the migration diretory, I can easily migrate it again. It looked like I had succeeded, but I couldn’t create a new object using either method that I described in part 3.&lt;/p&gt;
&lt;p&gt;And that was because it was still checked as migrated even though I deleted the file. I had to clear the migration story using zsh in order to migrate again by using the command below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ python manage.py migrate --fake api zero&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This cleared the history, so I was able to migrate the new model and then create objects.
&lt;br&gt;
&lt;br&gt;
&lt;img src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/64883356_10219120716429697_6822158836451770368_n.jpg?_nc_cat=104&amp;#x26;_nc_oc=AQm6ELBNSklVU2Qjf_pb8Tv8-4SP-k644FGRMw0rSWbhSmnofAqpiJFmDq93yChdVww&amp;#x26;_nc_ht=scontent-hkg3-1.xx&amp;#x26;oh=59628082c617465d129b0554cddf7ead&amp;#x26;oe=5D855E32&quot; alt=&quot;api at the moment&quot;&gt;
&lt;br&gt;
This is what I can see in my screen right now. Will work on it more tomorrow and see how it works.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Miniter[04] Flexbox]]></title><description><![CDATA[Use of flexbox in attempt to make a mini-version of Twitter.]]></description><link>https://jasonkang14.github.io/posts/Minitor-Flexbox</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Minitor-Flexbox</guid><pubDate>Sat, 08 Jun 2019 20:27:37 GMT</pubDate><content:encoded>&lt;h4 id=&quot;definition-by-mdn--the-flex-css-property-sets-how-a-flex-item-will-grow-or-shrink-to-fit-the-space-available-in-its-flex-container&quot;&gt;&lt;a href=&quot;#definition-by-mdn--the-flex-css-property-sets-how-a-flex-item-will-grow-or-shrink-to-fit-the-space-available-in-its-flex-container&quot; aria-label=&quot;definition by mdn  the flex css property sets how a flex item will grow or shrink to fit the space available in its flex container permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;definition by MDN : the &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; CSS property sets how a flex item will grow or shrink to fit the space available in its flex container.&lt;/h4&gt;
&lt;p&gt;I used &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; property in order to display two boxes horizontally in my Miniter.
&lt;img src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/64529894_10219110777621233_7758357828900749312_o.jpg?_nc_cat=106&amp;#x26;_nc_oc=AQlqJ6of7W1GWUBQ9ng_r7agwRYXVLGnDhZKibk1joLU8G6JN2IlFQspmlZq072PHpk&amp;#x26;_nc_ht=scontent-hkg3-1.xx&amp;#x26;oh=adce80d702b42423ec384ba8d22b7d5d&amp;#x26;oe=5DC6A56E&quot; alt=&quot;Miniter Main Page&quot;&gt;&lt;/p&gt;
&lt;p&gt;The two &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt;boxes were displayed vertically by default, so I set the display of the body as &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//HTML

body {
  display: flex;
  background-color: #e6e6e6;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You have to set the display of the parent element &lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; in order to have the child elements displayed horizontally. You can also use a property called &lt;code class=&quot;language-text&quot;&gt;flex-direction&lt;/code&gt; in order to display your image in different ways. The properties are very straight forward.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.flex-container {
  display: flex;
  flex-direction: column, column-reverse, row, or row-reverse;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;flex-wrap&lt;/code&gt; property specified whether you want the flex items wrapped or not. It would help you understand better if you try the examples from W3Schools in the link below.
&lt;a href=&quot;https://www.w3schools.com/css/css3_flexbox.asp#flex-wrap&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Flex-Wrap&lt;/a&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;justify-content&lt;/code&gt; property is used to align the flex items. I think this would be very helpful when you are trying to ditribute child elements evenly. It would help you understand better if you try the examples from W3Schools in the link below.
&lt;a href=&quot;https://www.w3schools.com/css/css3_flexbox.asp#justify-content&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Justify-Content&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Miniter[03] <form>, autocomplete]]></title><description><![CDATA[Use of the <form> element and autocomplete in attempt to make a mini-version of Twitter.]]></description><link>https://jasonkang14.github.io/posts/Minitor-form-element-autocomplete/</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Minitor-form-element-autocomplete/</guid><pubDate>Fri, 07 Jun 2019 18:27:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-form-element&quot;&gt;&lt;a href=&quot;#1-form-element&quot; aria-label=&quot;1 form element permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. &lt;code class=&quot;language-text&quot;&gt;form&lt;/code&gt; element&lt;/h1&gt;
&lt;p&gt;When I created &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;password&lt;/code&gt; input tags, Chrome Developer Console threw me a message. My code still worked, but it was giving me an advice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[DOM] Password field is not contained in a form: (More info: &lt;a href=&quot;https://goo.gl/9p2vKq&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://goo.gl/9p2vKq&lt;/a&gt;) ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I can tell that password field, which was an &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; tag that I used was suppsoed to be contained in a form, which I had never heard of. So I decided to follow the link to see what’s up.
This is what it says on the link.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure that each authentication process (registration, login or change password) is grouped together in a single form element.&lt;/li&gt;
&lt;li&gt;Don’t combine multiple processes (like registration and login), or skip the form element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, it tells you to use the &lt;code class=&quot;language-text&quot;&gt;form&lt;/code&gt; element, but doesn’t tell you why. So I Googled further. The most plausible answer that I found is this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do we put &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; elements inside of &lt;code class=&quot;language-text&quot;&gt;form&lt;/code&gt; elements? For the same reason we put &lt;code class=&quot;language-text&quot;&gt;li&lt;/code&gt; tags inside of &lt;code class=&quot;language-text&quot;&gt;ul&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ol&lt;/code&gt; elements - it’s where they belong. It’s semantically correct, and helps to define the markup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By using the &lt;code class=&quot;language-text&quot;&gt;form&lt;/code&gt; element, we are labeling the code correctly by making them semantically correct.
&lt;a href=&quot;https://stackoverflow.com/questions/1294493/what-does-semantically-correct-mean&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Semantically Correct Explained&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-autocomplete&quot;&gt;&lt;a href=&quot;#2-autocomplete&quot; aria-label=&quot;2 autocomplete permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. &lt;code class=&quot;language-text&quot;&gt;autocomplete&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;While making the input fields, I ran into another another advice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[DOM] Input elements should have autocomplete attributes (suggested: “current-password”): (More info: &lt;a href=&quot;https://goo.gl/9p2vKq&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://goo.gl/9p2vKq&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This time, the link supported its argument. It helps the user not to fill in wrong information rather than to fill in right information by providing users with what inputs are expected.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Autocomplete attributes help password managers to infer the purpose of a field in a form, saving them from accidentally saving or autofilling the wrong data.&lt;/li&gt;
&lt;li&gt;Further explanation is in this link &lt;a href=&quot;https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofilling-form-controls%3A-the-autocomplete-attribute&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Autocomplete Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So with the “advice” that I had received from the Chrome Developmen Console, I wrote down my HTML like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;
      &amp;lt;div class=&amp;quot;input-wrap&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Enter ID&amp;quot;
        class=&amp;quot;enterId&amp;quot; autocomplete=&amp;quot;username&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;input-wrap&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Password&amp;quot;
        class=&amp;quot;enterPassword&amp;quot; autocomplete=&amp;quot;current-password&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;input-wrap&amp;quot;&amp;gt;
        &amp;lt;button class=&amp;quot;login-btn&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Log in&amp;lt;/b&amp;gt;&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-eventstoppropagation&quot;&gt;&lt;a href=&quot;#3-eventstoppropagation&quot; aria-label=&quot;3 eventstoppropagation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. event.stopPropagation()&lt;/h1&gt;</content:encoded></item><item><title><![CDATA[Miniter[02] Events]]></title><description><![CDATA[How to set events in attempt to make a mini-version of Twitter.]]></description><link>https://jasonkang14.github.io/posts/Miniter-Events/</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Miniter-Events/</guid><pubDate>Thu, 06 Jun 2019 11:50:32 GMT</pubDate><content:encoded>&lt;p&gt;I had to make some events such as &lt;code class=&quot;language-text&quot;&gt;keyup&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;click&lt;/code&gt; for my Miniter. &lt;br&gt;
I used &lt;code class=&quot;language-text&quot;&gt;addEventListner&lt;/code&gt; on certain elements in order to give events to them so that they may do what I want them to do.&lt;/p&gt;
&lt;h1 id=&quot;1-keyup-keydown-onkeyup-onkeydown&quot;&gt;&lt;a href=&quot;#1-keyup-keydown-onkeyup-onkeydown&quot; aria-label=&quot;1 keyup keydown onkeyup onkeydown permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. keyup, keydown, onKeyUp, onKeyDown&lt;/h1&gt;
&lt;p&gt;Change the color of a button from gray to blue if all cateroies are filled.&lt;br&gt;
Below is the code I wrote to accomplish this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// HTML
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;img class=&amp;quot;logo&amp;quot; src=&amp;quot;https://upload.wikimedia.org/wikipedia/fr/thumb/c/c8/Twitter_Bird.svg/944px-Twitter_Bird.svg.png&amp;quot;&amp;gt;
    &amp;lt;header&amp;gt;&amp;lt;b&amp;gt;Log in to Miniter&amp;lt;/b&amp;gt;&amp;lt;/header&amp;gt;
    &amp;lt;form&amp;gt;
      &amp;lt;div class=&amp;quot;input-wrap&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Enter ID&amp;quot; class=&amp;quot;enterId&amp;quot; autocomplete=&amp;quot;username&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;input-wrap&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Password&amp;quot; class=&amp;quot;enterPassword&amp;quot; autocomplete=&amp;quot;current-password&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;input-wrap&amp;quot;&amp;gt;
        &amp;lt;button class=&amp;quot;login-btn&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Log in&amp;lt;/b&amp;gt;&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;div class=&amp;quot;input-wrap&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;./signup.html&amp;quot;&amp;gt;Sign Up for Miniter&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;script src=&amp;quot;js/login.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// CSS
.login-btn {
  border: none;
  border-radius: 30px;
  color: white;
  font-size: 20px;
  text-align: center;
  background-color: gray;
}

button:hover, a:hover {
  cursor: pointer;
  opacity: 0.7;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// JavaScript
const elLoginBtn = document.querySelector(&amp;#39;.login-btn&amp;#39;);
const elInputId = document.querySelector(&amp;#39;.enterId&amp;#39;);
const elInputPassword = document.querySelector(&amp;#39;.enterPassword&amp;#39;);

const changeBtnColor = () =&amp;gt; {
  if(elInputId.value !== &amp;quot;&amp;quot; &amp;amp;&amp;amp; elInputPassword.value !== &amp;quot;&amp;quot;) {
    elLoginBtn.style.backgroundColor = &amp;quot;#0099ff&amp;quot;;
  } else {
    elLoginBtn.style.backgroundColor = &amp;quot;gray&amp;quot;;
  }
};

elInputId.addEventListener(&amp;#39;keyup&amp;#39;, changeBtnColor);
elInputPassword.addEventListener(&amp;#39;keyup&amp;#39;, changeBtnColor);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I used &lt;code class=&quot;language-text&quot;&gt;document.querySelector()&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;document.getElementById()&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;document.getElementsByClassName()&lt;/code&gt; for the consistency purpose.&lt;/p&gt;
&lt;p&gt;I also used &lt;code class=&quot;language-text&quot;&gt;keyup&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;keydown&lt;/code&gt; since &lt;code class=&quot;language-text&quot;&gt;keyup&lt;/code&gt; triggers an event when you release a key that just pressed. &lt;br&gt;
I tried using &lt;code class=&quot;language-text&quot;&gt;keydown&lt;/code&gt; first because &lt;code class=&quot;language-text&quot;&gt;keydown&lt;/code&gt; triggers an event when you press down a key.&lt;br&gt; However, it required me to press an extra key in order to trigger the event. I believe that is because when &lt;code class=&quot;language-text&quot;&gt;keydown&lt;/code&gt;is used, the function &lt;code class=&quot;language-text&quot;&gt;changeBtnColor&lt;/code&gt; is executed before a key gets inserted as a value.&lt;/p&gt;
&lt;h1 id=&quot;2-click-onclick&quot;&gt;&lt;a href=&quot;#2-click-onclick&quot; aria-label=&quot;2 click onclick permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. click, onClick&lt;/h1&gt;
&lt;p&gt;Added a &lt;code class=&quot;language-text&quot;&gt;click&lt;/code&gt; event to generate a tweet.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const makeTweetList = (obj) =&amp;gt; {
  let tweet =
  `
    &amp;lt;span class=&amp;quot;user&amp;quot;&amp;gt;${obj.user}&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;date&amp;quot;&amp;gt;${obj.date}&amp;lt;/span&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;${obj.contents}&amp;lt;/div&amp;gt;
  `
  return tweet;
};

const makeNewTweet = () =&amp;gt; {
  count++;
  if (elTextarea.value === &amp;quot;&amp;quot;) {
    alert(&amp;quot;write your tweet&amp;quot;);
    event.preventDefault();
    return;
  }

  const newTweet = document.createElement(&amp;#39;li&amp;#39;);
  newTweet.className = &amp;quot;tweet&amp;quot;;
  let tweetObj = {
    user: elUserName.innerHTML,
    date: getDate(),
    contents: elTextarea.value
  }

  newTweet.innerHTML = makeTweetList(tweetObj);
  elTweetList.insertBefore(newTweet, elTweetList.childNodes[0]);
}

elMakeBtn.addEventListener(&amp;#39;click&amp;#39;, makeNewTweet);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I decided to use &lt;code class=&quot;language-text&quot;&gt;backtick&lt;/code&gt; to create HTML elements and put them directly into the HTML using DOM as shown in the function &lt;code class=&quot;language-text&quot;&gt;makeTwitList(obj)&lt;/code&gt;. &lt;br&gt;
The function &lt;code class=&quot;language-text&quot;&gt;makeTwitList(obj)&lt;/code&gt; is called from function &lt;code class=&quot;language-text&quot;&gt;makeNewTweet()&lt;/code&gt; after receiving input values upon &lt;code class=&quot;language-text&quot;&gt;click&lt;/code&gt;. &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;makeNewTweet()&lt;/code&gt; function stores input values into an object and sends the object to &lt;code class=&quot;language-text&quot;&gt;makeTwitList(obj)&lt;/code&gt; as a parameter so that the callback function may require data from the object.&lt;/p&gt;
&lt;p&gt;Then the returned value gets assigned as &lt;code class=&quot;language-text&quot;&gt;innerHTML&lt;/code&gt; of a &lt;code class=&quot;language-text&quot;&gt;newTweet&lt;/code&gt; element. &lt;code class=&quot;language-text&quot;&gt;insertBefore()&lt;/code&gt;was used so that a new tweet may get stacked upon old tweets.&lt;/p&gt;
&lt;h1 id=&quot;3-eventstoppropagation&quot;&gt;&lt;a href=&quot;#3-eventstoppropagation&quot; aria-label=&quot;3 eventstoppropagation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. event.stopPropagation()&lt;/h1&gt;
&lt;p&gt;I was trying my best—ok I admit not my utmost best— to make it look similar to the actual Twitter. So I added a feature to enlarge the textarea when someone clicks the textarea to make a new tweet and return it to its original size if elsewhere is clicked. Below is my code&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//HTML

&amp;lt;div class=&amp;quot;enterNewTweet&amp;quot;&amp;gt;
  &amp;lt;textarea placeholder=&amp;quot;What&amp;#39;s happening?&amp;quot; class=&amp;quot;newMessage&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
  &amp;lt;div class=&amp;quot;toolBar&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;make-btn&amp;quot;&amp;gt;Tweet&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//CSS

textarea {
  border-radius: 5px;
  border: 3px solid #99d6ff;
  height: 50px;
  width: 90%;
  margin: 15px auto;
  padding: 10px;
  resize: none;
  font-size: 20px;
}

textarea::placeholder {
  font-size: 20px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//JavaScript

const enlargeTextarea = () =&amp;gt; {
  event.stopPropagation();
  elTextarea.style.height = &amp;quot;150px&amp;quot;;
  elToolBar.style.display = &amp;quot;block&amp;quot;;
}

elTextarea.addEventListener(&amp;#39;click&amp;#39;, enlargeTextarea);

document.addEventListener(&amp;#39;click&amp;#39;, () =&amp;gt; {
  elTextarea.style.height = &amp;quot;50px&amp;quot;;
  elToolBar.style.display = &amp;quot;none&amp;quot;;
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I added a &lt;code class=&quot;language-text&quot;&gt;click&lt;/code&gt; event to &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; to change the size if any areas rather than the textarea was clicked. And this was a problem &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; includes &lt;code class=&quot;language-text&quot;&gt;textarea&lt;/code&gt; as well. &lt;br&gt;This is where &lt;code class=&quot;language-text&quot;&gt;event.stopPropagation()&lt;/code&gt; comes in. According to MDN, &lt;code class=&quot;language-text&quot;&gt;event.stopPropagation()&lt;/code&gt; prevents further propagation of the current event in the capturing and bubbling phase.&lt;br&gt;
This means that when &lt;code class=&quot;language-text&quot;&gt;textarea&lt;/code&gt; is clicked, it stops the current event, which is the event set on &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt;, so that the event on &lt;code class=&quot;language-text&quot;&gt;textarea&lt;/code&gt; may take place.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Miniter[01] Position, Background-]]></title><description><![CDATA[Use of position, and background- properties on HTML and CSS in attempt to make a mini-version of Twitter.]]></description><link>https://jasonkang14.github.io/posts/Minitor-Position-Background/</link><guid isPermaLink="false">https://jasonkang14.github.io/posts/Minitor-Position-Background/</guid><pubDate>Wed, 05 Jun 2019 14:27:37 GMT</pubDate><content:encoded>&lt;p&gt;I joined a coding bootcamp called WeCode which is based in Seoul, South Korea.
For my first project, I am making a mini-version of Twitter with sign-up, log-in, and making tweets. The end product would look something like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/62421048_10219088287138985_1856569703267303424_o.jpg?_nc_cat=105&amp;#x26;_nc_ht=scontent-hkg3-1.xx&amp;#x26;oh=e4ac2dfda5d5da06e93602ed60cb5cb1&amp;#x26;oe=5D7C3881&quot; alt=&quot;Final Picture of Miniter&quot;&gt;&lt;/p&gt;
&lt;p&gt;I got to use &lt;code class=&quot;language-text&quot;&gt;position&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;background-&lt;/code&gt; properties to make my page.
&lt;code class=&quot;language-text&quot;&gt;position&lt;/code&gt; is a common property that a front-end developer uses when he or she tries to set a layout for the webpage. I had a hard time trying to understand the difference between &lt;code class=&quot;language-text&quot;&gt;absolute&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;relative&lt;/code&gt;. Just like any other front developers would do, I changed the property to see how they work, but it was difficult to see it right away. Below is a picture that really helped me understand the difference between &lt;code class=&quot;language-text&quot;&gt;absolute&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;relative&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/64437787_10219088554305664_1048970393961889792_n.jpg?_nc_cat=102&amp;#x26;_nc_ht=scontent-hkg3-1.xx&amp;#x26;oh=439ff1632529d25feb4a0ff639047088&amp;#x26;oe=5D9AC986&quot; alt=&quot;&amp;#x60;absolute&amp;#x60; and &amp;#x60;relative&quot;&gt;
&lt;a href=&quot;https://medium.com/@leannezhang/difference-between-css-position-absolute-versus-relative-35f064384c6&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;absolute&lt;/code&gt; : Positioning an element based on its closest positioned ancestor position. So basically you are placing your element based on its parent element and changing the layout around it.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;relative&lt;/code&gt; : Positioning an element based on its current position without changing layout.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background-&lt;/code&gt; properties: I was trying to insert an image as a &lt;code class=&quot;language-text&quot;&gt;background-image&lt;/code&gt; instead of using an &lt;code class=&quot;language-text&quot;&gt;img&lt;/code&gt; tag/element.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/62650384_10219088606706974_3332370773124841472_n.jpg?_nc_cat=106&amp;#x26;_nc_ht=scontent-hkg3-1.xx&amp;#x26;oh=b81d227a6e6a486754b39bf3a0163ad8&amp;#x26;oe=5D8F2B9A&quot; alt=&quot;Background-Image Used&quot;&gt;&lt;/p&gt;
&lt;p&gt;Below is the CSS I wrote for this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.blueCircle {
  background: #0099ff;
  position: absolute;
  left: 12%;
  top: 35%;
  border: 5px solid white;
  height: 100px;
  border-radius: 50%;
  width: 100px;
  background-image: url(https://scontent-hkg3-1.xx.fbcdn.net/v/t1.0-9/62072328_10219032446142995_4385081662694752256_n.jpg?_nc_cat=103&amp;amp;_nc_ht=scontent-hkg3-1.xx&amp;amp;oh=27926ae25a7eb38a36b18114643a4edc&amp;amp;oe=5D98939C);
  background-repeat: no-repeat;
  background-size: 100%;
  background-position: center;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;position: absolute;&lt;/code&gt; was used in order to place the image based on the blue box in the image above.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background-img: url(link);&lt;/code&gt; was used in order to insert the image. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background-repeat: no-repeat;&lt;/code&gt; background image is repeated vertically and horizontally by default. you can set its property as &lt;code class=&quot;language-text&quot;&gt;repeat-x&lt;/code&gt; to have your image repeated only horizonatlly or &lt;code class=&quot;language-text&quot;&gt;repeat-y&lt;/code&gt; to have it vertically. &lt;code class=&quot;language-text&quot;&gt;no-repeat&lt;/code&gt; prevents image repetition.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;backround-size: 100%;&lt;/code&gt; makes the image fill the given space set by &lt;code class=&quot;language-text&quot;&gt;height&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;width&lt;/code&gt;. &lt;br&gt;&lt;code class=&quot;language-text&quot;&gt;background-size: cover;&lt;/code&gt; expands the image to fill the entire space. If the given space is too small compared to the size of the image, it might cut out most of the image. &lt;br&gt;&lt;code class=&quot;language-text&quot;&gt;background-size: contain;&lt;/code&gt; manipulates the size of the image to show the entire image within the given space.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background-position: center;&lt;/code&gt; puts the image at the center of a given space.&lt;/p&gt;</content:encoded></item></channel></rss>